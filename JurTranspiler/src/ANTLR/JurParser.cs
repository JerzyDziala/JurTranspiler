//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/strator/Documents/GitHub/JurTranspiler/JurTranspiler/src/ANTLR/Jur.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class JurParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, LINE_COMMENT=2, WHITESPACE=3, NEWLINE=4, COMA=5, DOT=6, SEMICOLON=7, 
		ASSIGN=8, ADD=9, SUBTRACT=10, TIMES=11, DIVIDE=12, LEFT_CURLY=13, RIGHT_CURLY=14, 
		LEFT_PARENT=15, RIGHT_PARENT=16, LEFT_SQUARE_PARENT=17, RIGHT_SQUARE_PARENT=18, 
		LESS=19, LEQUAL=20, GREATER=21, GREQUAL=22, EQUAL=23, WHERE=24, NOT_EQUAL=25, 
		NOT=26, LOGICAL_AND=27, OR=28, STRING_VALUE=29, NUMBER_VALUE=30, BOOL_VALUE=31, 
		NULL_VALUE=32, VALUE=33, STRUCT=34, VOID=35, ANY=36, RETURN=37, BREAK=38, 
		CONTINUE=39, IF=40, ABSTRACTION=41, MAIN=42, NEW=43, IS=44, AND=45, DEFAULT_VALUE=46, 
		TYPE=47, ELSE=48, FOR=49, EXTERN=50, POLY=51, ARROW=52, MEMBER=53, PRIVATE=54, 
		PRIMITIVE=55, ARITHMETIC=56, LOGIC=57, ID=58;
	public const int
		RULE_program = 0, RULE_main = 1, RULE_abstraction = 2, RULE_structDeclaration = 3, 
		RULE_inlinedType = 4, RULE_functionDeclaration = 5, RULE_constraints = 6, 
		RULE_constrain = 7, RULE_uninitializedVarDeclaration = 8, RULE_initializedVariableDeclaration = 9, 
		RULE_inferedVariableDeclaration = 10, RULE_type = 11, RULE_statement = 12, 
		RULE_block = 13, RULE_expression = 14;
	public static readonly string[] ruleNames = {
		"program", "main", "abstraction", "structDeclaration", "inlinedType", 
		"functionDeclaration", "constraints", "constrain", "uninitializedVarDeclaration", 
		"initializedVariableDeclaration", "inferedVariableDeclaration", "type", 
		"statement", "block", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "':='", null, null, null, "','", "'.'", "';'", "'='", "'+'", "'-'", 
		"'*'", "'/'", "'{'", "'}'", "'('", "')'", "'['", "']'", "'<'", "'<='", 
		"'>'", "'>='", "'=='", "'where'", "'!='", "'!'", "'&&'", "'||'", null, 
		null, null, "'null'", null, "'struct'", "'void'", "'any'", "'return'", 
		"'break'", "'continue'", "'if'", "'abstraction'", "'main'", "'new'", "'is'", 
		"'and'", "'default'", "'typeof'", "'else'", "'for'", "'extern'", "'poly'", 
		"'->'", "'member'", "'private'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "LINE_COMMENT", "WHITESPACE", "NEWLINE", "COMA", "DOT", "SEMICOLON", 
		"ASSIGN", "ADD", "SUBTRACT", "TIMES", "DIVIDE", "LEFT_CURLY", "RIGHT_CURLY", 
		"LEFT_PARENT", "RIGHT_PARENT", "LEFT_SQUARE_PARENT", "RIGHT_SQUARE_PARENT", 
		"LESS", "LEQUAL", "GREATER", "GREQUAL", "EQUAL", "WHERE", "NOT_EQUAL", 
		"NOT", "LOGICAL_AND", "OR", "STRING_VALUE", "NUMBER_VALUE", "BOOL_VALUE", 
		"NULL_VALUE", "VALUE", "STRUCT", "VOID", "ANY", "RETURN", "BREAK", "CONTINUE", 
		"IF", "ABSTRACTION", "MAIN", "NEW", "IS", "AND", "DEFAULT_VALUE", "TYPE", 
		"ELSE", "FOR", "EXTERN", "POLY", "ARROW", "MEMBER", "PRIVATE", "PRIMITIVE", 
		"ARITHMETIC", "LOGIC", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Jur.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JurParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JurParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JurParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(JurParser.Eof, 0); }
		public MainContext[] main() {
			return GetRuleContexts<MainContext>();
		}
		public MainContext main(int i) {
			return GetRuleContext<MainContext>(i);
		}
		public AbstractionContext[] abstraction() {
			return GetRuleContexts<AbstractionContext>();
		}
		public AbstractionContext abstraction(int i) {
			return GetRuleContext<AbstractionContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ABSTRACTION || _la==MAIN) {
				{
				State = 32;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case MAIN:
					{
					State = 30; main();
					}
					break;
				case ABSTRACTION:
					{
					State = 31; abstraction();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 36;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 37; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainContext : ParserRuleContext {
		public ITerminalNode MAIN() { return GetToken(JurParser.MAIN, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 2, RULE_main);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39; Match(MAIN);
			State = 40; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractionContext : ParserRuleContext {
		public ITerminalNode ABSTRACTION() { return GetToken(JurParser.ABSTRACTION, 0); }
		public ITerminalNode NUMBER_VALUE() { return GetToken(JurParser.NUMBER_VALUE, 0); }
		public ITerminalNode LEFT_CURLY() { return GetToken(JurParser.LEFT_CURLY, 0); }
		public ITerminalNode RIGHT_CURLY() { return GetToken(JurParser.RIGHT_CURLY, 0); }
		public FunctionDeclarationContext[] functionDeclaration() {
			return GetRuleContexts<FunctionDeclarationContext>();
		}
		public FunctionDeclarationContext functionDeclaration(int i) {
			return GetRuleContext<FunctionDeclarationContext>(i);
		}
		public StructDeclarationContext[] structDeclaration() {
			return GetRuleContexts<StructDeclarationContext>();
		}
		public StructDeclarationContext structDeclaration(int i) {
			return GetRuleContext<StructDeclarationContext>(i);
		}
		public AbstractionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstraction; } }
	}

	[RuleVersion(0)]
	public AbstractionContext abstraction() {
		AbstractionContext _localctx = new AbstractionContext(Context, State);
		EnterRule(_localctx, 4, RULE_abstraction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42; Match(ABSTRACTION);
			State = 43; Match(NUMBER_VALUE);
			State = 44; Match(LEFT_CURLY);
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRUCT) | (1L << VOID) | (1L << ANY) | (1L << EXTERN) | (1L << PRIVATE) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
				{
				State = 47;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VOID:
				case ANY:
				case EXTERN:
				case PRIVATE:
				case PRIMITIVE:
				case ID:
					{
					State = 45; functionDeclaration();
					}
					break;
				case STRUCT:
					{
					State = 46; structDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 52; Match(RIGHT_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationContext : ParserRuleContext {
		public ITerminalNode STRUCT() { return GetToken(JurParser.STRUCT, 0); }
		public ITerminalNode[] ID() { return GetTokens(JurParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(JurParser.ID, i);
		}
		public ITerminalNode LEFT_CURLY() { return GetToken(JurParser.LEFT_CURLY, 0); }
		public ITerminalNode RIGHT_CURLY() { return GetToken(JurParser.RIGHT_CURLY, 0); }
		public ITerminalNode LESS() { return GetToken(JurParser.LESS, 0); }
		public ITerminalNode GREATER() { return GetToken(JurParser.GREATER, 0); }
		public InlinedTypeContext[] inlinedType() {
			return GetRuleContexts<InlinedTypeContext>();
		}
		public InlinedTypeContext inlinedType(int i) {
			return GetRuleContext<InlinedTypeContext>(i);
		}
		public UninitializedVarDeclarationContext[] uninitializedVarDeclaration() {
			return GetRuleContexts<UninitializedVarDeclarationContext>();
		}
		public UninitializedVarDeclarationContext uninitializedVarDeclaration(int i) {
			return GetRuleContext<UninitializedVarDeclarationContext>(i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(JurParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(JurParser.SEMICOLON, i);
		}
		public ITerminalNode[] COMA() { return GetTokens(JurParser.COMA); }
		public ITerminalNode COMA(int i) {
			return GetToken(JurParser.COMA, i);
		}
		public StructDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaration; } }
	}

	[RuleVersion(0)]
	public StructDeclarationContext structDeclaration() {
		StructDeclarationContext _localctx = new StructDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_structDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; Match(STRUCT);
			State = 55; Match(ID);
			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LESS) {
				{
				State = 56; Match(LESS);
				State = 57; Match(ID);
				State = 62;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMA) {
					{
					{
					State = 58; Match(COMA);
					State = 59; Match(ID);
					}
					}
					State = 64;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 65; Match(GREATER);
				}
			}

			State = 68; Match(LEFT_CURLY);
			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << ANY) | (1L << IS) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
				{
				State = 73;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VOID:
				case ANY:
				case PRIMITIVE:
				case ID:
					{
					{
					State = 69; uninitializedVarDeclaration();
					State = 70; Match(SEMICOLON);
					}
					}
					break;
				case IS:
					{
					State = 72; inlinedType();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 78; Match(RIGHT_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlinedTypeContext : ParserRuleContext {
		public ITerminalNode IS() { return GetToken(JurParser.IS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(JurParser.SEMICOLON, 0); }
		public InlinedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlinedType; } }
	}

	[RuleVersion(0)]
	public InlinedTypeContext inlinedType() {
		InlinedTypeContext _localctx = new InlinedTypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_inlinedType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; Match(IS);
			State = 81; type(0);
			State = 82; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(JurParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(JurParser.ID, i);
		}
		public ITerminalNode LEFT_PARENT() { return GetToken(JurParser.LEFT_PARENT, 0); }
		public ITerminalNode RIGHT_PARENT() { return GetToken(JurParser.RIGHT_PARENT, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(JurParser.VOID, 0); }
		public ITerminalNode PRIVATE() { return GetToken(JurParser.PRIVATE, 0); }
		public ITerminalNode LESS() { return GetToken(JurParser.LESS, 0); }
		public ITerminalNode GREATER() { return GetToken(JurParser.GREATER, 0); }
		public UninitializedVarDeclarationContext[] uninitializedVarDeclaration() {
			return GetRuleContexts<UninitializedVarDeclarationContext>();
		}
		public UninitializedVarDeclarationContext uninitializedVarDeclaration(int i) {
			return GetRuleContext<UninitializedVarDeclarationContext>(i);
		}
		public ConstraintsContext constraints() {
			return GetRuleContext<ConstraintsContext>(0);
		}
		public ITerminalNode[] COMA() { return GetTokens(JurParser.COMA); }
		public ITerminalNode COMA(int i) {
			return GetToken(JurParser.COMA, i);
		}
		public ITerminalNode ARROW() { return GetToken(JurParser.ARROW, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(JurParser.SEMICOLON, 0); }
		public ITerminalNode EXTERN() { return GetToken(JurParser.EXTERN, 0); }
		public ITerminalNode MEMBER() { return GetToken(JurParser.MEMBER, 0); }
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_functionDeclaration);
		int _la;
		try {
			State = 198;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIVATE) {
					{
					State = 84; Match(PRIVATE);
					}
				}

				State = 89;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
				case 1:
					{
					State = 87; type(0);
					}
					break;
				case 2:
					{
					State = 88; Match(VOID);
					}
					break;
				}
				State = 91; Match(ID);
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LESS) {
					{
					State = 92; Match(LESS);
					State = 93; Match(ID);
					State = 98;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 94; Match(COMA);
						State = 95; Match(ID);
						}
						}
						State = 100;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 101; Match(GREATER);
					}
				}

				State = 104; Match(LEFT_PARENT);
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << ANY) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
					{
					State = 105; uninitializedVarDeclaration();
					State = 110;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 106; Match(COMA);
						State = 107; uninitializedVarDeclaration();
						}
						}
						State = 112;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 115; Match(RIGHT_PARENT);
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 116; constraints();
					}
				}

				State = 119; block();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIVATE) {
					{
					State = 120; Match(PRIVATE);
					}
				}

				State = 125;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 123; type(0);
					}
					break;
				case 2:
					{
					State = 124; Match(VOID);
					}
					break;
				}
				State = 127; Match(ID);
				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LESS) {
					{
					State = 128; Match(LESS);
					State = 129; Match(ID);
					State = 134;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 130; Match(COMA);
						State = 131; Match(ID);
						}
						}
						State = 136;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 137; Match(GREATER);
					}
				}

				State = 140; Match(LEFT_PARENT);
				State = 149;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << ANY) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
					{
					State = 141; uninitializedVarDeclaration();
					State = 146;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 142; Match(COMA);
						State = 143; uninitializedVarDeclaration();
						}
						}
						State = 148;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 151; Match(RIGHT_PARENT);
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 152; constraints();
					}
				}

				State = 155; Match(ARROW);
				State = 156; expression(0);
				State = 157; Match(SEMICOLON);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIVATE) {
					{
					State = 159; Match(PRIVATE);
					}
				}

				State = 162; Match(EXTERN);
				State = 164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MEMBER) {
					{
					State = 163; Match(MEMBER);
					}
				}

				State = 168;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
				case 1:
					{
					State = 166; type(0);
					}
					break;
				case 2:
					{
					State = 167; Match(VOID);
					}
					break;
				}
				State = 170; Match(ID);
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LESS) {
					{
					State = 171; Match(LESS);
					State = 172; Match(ID);
					State = 177;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 173; Match(COMA);
						State = 174; Match(ID);
						}
						}
						State = 179;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 180; Match(GREATER);
					}
				}

				State = 183; Match(LEFT_PARENT);
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << ANY) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
					{
					State = 184; uninitializedVarDeclaration();
					State = 189;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 185; Match(COMA);
						State = 186; uninitializedVarDeclaration();
						}
						}
						State = 191;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 194; Match(RIGHT_PARENT);
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 195; constraints();
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintsContext : ParserRuleContext {
		public ITerminalNode WHERE() { return GetToken(JurParser.WHERE, 0); }
		public ConstrainContext[] constrain() {
			return GetRuleContexts<ConstrainContext>();
		}
		public ConstrainContext constrain(int i) {
			return GetRuleContext<ConstrainContext>(i);
		}
		public ITerminalNode[] AND() { return GetTokens(JurParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(JurParser.AND, i);
		}
		public ConstraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraints; } }
	}

	[RuleVersion(0)]
	public ConstraintsContext constraints() {
		ConstraintsContext _localctx = new ConstraintsContext(Context, State);
		EnterRule(_localctx, 12, RULE_constraints);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200; Match(WHERE);
			State = 201; constrain();
			State = 206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 202; Match(AND);
				State = 203; constrain();
				}
				}
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstrainContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode IS() { return GetToken(JurParser.IS, 0); }
		public ConstrainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constrain; } }
	}

	[RuleVersion(0)]
	public ConstrainContext constrain() {
		ConstrainContext _localctx = new ConstrainContext(Context, State);
		EnterRule(_localctx, 14, RULE_constrain);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209; type(0);
			State = 210; Match(IS);
			State = 211; type(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UninitializedVarDeclarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(JurParser.ID, 0); }
		public UninitializedVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uninitializedVarDeclaration; } }
	}

	[RuleVersion(0)]
	public UninitializedVarDeclarationContext uninitializedVarDeclaration() {
		UninitializedVarDeclarationContext _localctx = new UninitializedVarDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_uninitializedVarDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213; type(0);
			State = 214; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializedVariableDeclarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(JurParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(JurParser.ASSIGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InitializedVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializedVariableDeclaration; } }
	}

	[RuleVersion(0)]
	public InitializedVariableDeclarationContext initializedVariableDeclaration() {
		InitializedVariableDeclarationContext _localctx = new InitializedVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_initializedVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216; type(0);
			State = 217; Match(ID);
			State = 218; Match(ASSIGN);
			State = 219; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InferedVariableDeclarationContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(JurParser.ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InferedVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inferedVariableDeclaration; } }
	}

	[RuleVersion(0)]
	public InferedVariableDeclarationContext inferedVariableDeclaration() {
		InferedVariableDeclarationContext _localctx = new InferedVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_inferedVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221; Match(ID);
			State = 222; Match(T__0);
			State = 223; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArrayTypeContext : TypeContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode LEFT_SQUARE_PARENT() { return GetToken(JurParser.LEFT_SQUARE_PARENT, 0); }
		public ITerminalNode RIGHT_SQUARE_PARENT() { return GetToken(JurParser.RIGHT_SQUARE_PARENT, 0); }
		public ArrayTypeContext(TypeContext context) { CopyFrom(context); }
	}
	public partial class AnyTypeContext : TypeContext {
		public ITerminalNode ANY() { return GetToken(JurParser.ANY, 0); }
		public AnyTypeContext(TypeContext context) { CopyFrom(context); }
	}
	public partial class TypeParameterOrStructTypeContext : TypeContext {
		public ITerminalNode ID() { return GetToken(JurParser.ID, 0); }
		public TypeParameterOrStructTypeContext(TypeContext context) { CopyFrom(context); }
	}
	public partial class FunctionPointerTypeContext : TypeContext {
		public ITerminalNode VOID() { return GetToken(JurParser.VOID, 0); }
		public ITerminalNode LEFT_PARENT() { return GetToken(JurParser.LEFT_PARENT, 0); }
		public ITerminalNode RIGHT_PARENT() { return GetToken(JurParser.RIGHT_PARENT, 0); }
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode[] COMA() { return GetTokens(JurParser.COMA); }
		public ITerminalNode COMA(int i) {
			return GetToken(JurParser.COMA, i);
		}
		public FunctionPointerTypeContext(TypeContext context) { CopyFrom(context); }
	}
	public partial class GenericStructTypeContext : TypeContext {
		public ITerminalNode ID() { return GetToken(JurParser.ID, 0); }
		public ITerminalNode LESS() { return GetToken(JurParser.LESS, 0); }
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode GREATER() { return GetToken(JurParser.GREATER, 0); }
		public ITerminalNode[] COMA() { return GetTokens(JurParser.COMA); }
		public ITerminalNode COMA(int i) {
			return GetToken(JurParser.COMA, i);
		}
		public GenericStructTypeContext(TypeContext context) { CopyFrom(context); }
	}
	public partial class PrimitiveTypeContext : TypeContext {
		public ITerminalNode PRIMITIVE() { return GetToken(JurParser.PRIMITIVE, 0); }
		public PrimitiveTypeContext(TypeContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public TypeContext type() {
		return type(0);
	}

	private TypeContext type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeContext _localctx = new TypeContext(Context, _parentState);
		TypeContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_type, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				_localctx = new AnyTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 226; Match(ANY);
				}
				break;
			case 2:
				{
				_localctx = new PrimitiveTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 227; Match(PRIMITIVE);
				}
				break;
			case 3:
				{
				_localctx = new TypeParameterOrStructTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 228; Match(ID);
				}
				break;
			case 4:
				{
				_localctx = new GenericStructTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 229; Match(ID);
				{
				State = 230; Match(LESS);
				State = 231; type(0);
				State = 236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMA) {
					{
					{
					State = 232; Match(COMA);
					State = 233; type(0);
					}
					}
					State = 238;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 239; Match(GREATER);
				}
				}
				break;
			case 5:
				{
				_localctx = new FunctionPointerTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 241; Match(VOID);
				State = 242; Match(LEFT_PARENT);
				State = 251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << ANY) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
					{
					State = 243; type(0);
					State = 248;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 244; Match(COMA);
						State = 245; type(0);
						}
						}
						State = 250;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 253; Match(RIGHT_PARENT);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 274;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 272;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
					case 1:
						{
						_localctx = new FunctionPointerTypeContext(new TypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 256;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 257; Match(LEFT_PARENT);
						State = 266;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << ANY) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
							{
							State = 258; type(0);
							State = 263;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==COMA) {
								{
								{
								State = 259; Match(COMA);
								State = 260; type(0);
								}
								}
								State = 265;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							}
						}

						State = 268; Match(RIGHT_PARENT);
						}
						break;
					case 2:
						{
						_localctx = new ArrayTypeContext(new TypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 269;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 270; Match(LEFT_SQUARE_PARENT);
						State = 271; Match(RIGHT_SQUARE_PARENT);
						}
						break;
					}
					} 
				}
				State = 276;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlockStatementContext : StatementContext {
		public ITerminalNode LEFT_CURLY() { return GetToken(JurParser.LEFT_CURLY, 0); }
		public ITerminalNode RIGHT_CURLY() { return GetToken(JurParser.RIGHT_CURLY, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class AssignmentStatementContext : StatementContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ASSIGN() { return GetToken(JurParser.ASSIGN, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(JurParser.SEMICOLON, 0); }
		public AssignmentStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class UninitializedVarDeclarationStatementContext : StatementContext {
		public UninitializedVarDeclarationContext uninitializedVarDeclaration() {
			return GetRuleContext<UninitializedVarDeclarationContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(JurParser.SEMICOLON, 0); }
		public UninitializedVarDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class ForStatementContext : StatementContext {
		public ITerminalNode FOR() { return GetToken(JurParser.FOR, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(JurParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(JurParser.SEMICOLON, i);
		}
		public InitializedVariableDeclarationContext initializedVariableDeclaration() {
			return GetRuleContext<InitializedVariableDeclarationContext>(0);
		}
		public InferedVariableDeclarationContext inferedVariableDeclaration() {
			return GetRuleContext<InferedVariableDeclarationContext>(0);
		}
		public ForStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class BreakStatementContext : StatementContext {
		public ITerminalNode BREAK() { return GetToken(JurParser.BREAK, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(JurParser.SEMICOLON, 0); }
		public BreakStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class ContinueStatementContext : StatementContext {
		public ITerminalNode CONTINUE() { return GetToken(JurParser.CONTINUE, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(JurParser.SEMICOLON, 0); }
		public ContinueStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class ExpressionStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(JurParser.SEMICOLON, 0); }
		public ExpressionStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class IfStatementContext : StatementContext {
		public ITerminalNode IF() { return GetToken(JurParser.IF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(JurParser.ELSE, 0); }
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class ReturnStatementContext : StatementContext {
		public ITerminalNode RETURN() { return GetToken(JurParser.RETURN, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(JurParser.SEMICOLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class InferedVariableDeclarationStatementContext : StatementContext {
		public InferedVariableDeclarationContext inferedVariableDeclaration() {
			return GetRuleContext<InferedVariableDeclarationContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(JurParser.SEMICOLON, 0); }
		public InferedVariableDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class InitializedVariableDeclarationStatementContext : StatementContext {
		public InitializedVariableDeclarationContext initializedVariableDeclaration() {
			return GetRuleContext<InitializedVariableDeclarationContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(JurParser.SEMICOLON, 0); }
		public InitializedVariableDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_statement);
		int _la;
		try {
			State = 334;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				_localctx = new BlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 277; Match(LEFT_CURLY);
				State = 281;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT_CURLY) | (1L << LEFT_PARENT) | (1L << NOT) | (1L << STRING_VALUE) | (1L << NUMBER_VALUE) | (1L << BOOL_VALUE) | (1L << NULL_VALUE) | (1L << VOID) | (1L << ANY) | (1L << RETURN) | (1L << BREAK) | (1L << CONTINUE) | (1L << IF) | (1L << NEW) | (1L << FOR) | (1L << ARROW) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
					{
					{
					State = 278; statement();
					}
					}
					State = 283;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 284; Match(RIGHT_CURLY);
				}
				break;
			case 2:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 285; Match(IF);
				State = 286; expression(0);
				State = 287; statement();
				State = 290;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
				case 1:
					{
					State = 288; Match(ELSE);
					State = 289; statement();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 292; Match(FOR);
				State = 299;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
				case 1:
					{
					State = 295;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
					case 1:
						{
						State = 293; initializedVariableDeclaration();
						}
						break;
					case 2:
						{
						State = 294; inferedVariableDeclaration();
						}
						break;
					}
					State = 297; Match(SEMICOLON);
					}
					break;
				}
				State = 301; expression(0);
				State = 304;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 302; Match(SEMICOLON);
					State = 303; expression(0);
					}
				}

				State = 306; statement();
				}
				break;
			case 4:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 308; Match(RETURN);
				State = 310;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT_PARENT) | (1L << NOT) | (1L << STRING_VALUE) | (1L << NUMBER_VALUE) | (1L << BOOL_VALUE) | (1L << NULL_VALUE) | (1L << VOID) | (1L << ANY) | (1L << NEW) | (1L << ARROW) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
					{
					State = 309; expression(0);
					}
				}

				State = 312; Match(SEMICOLON);
				}
				break;
			case 5:
				_localctx = new BreakStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 313; Match(BREAK);
				State = 314; Match(SEMICOLON);
				}
				break;
			case 6:
				_localctx = new ContinueStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 315; Match(CONTINUE);
				State = 316; Match(SEMICOLON);
				}
				break;
			case 7:
				_localctx = new InferedVariableDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 317; inferedVariableDeclaration();
				State = 318; Match(SEMICOLON);
				}
				break;
			case 8:
				_localctx = new InitializedVariableDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 320; initializedVariableDeclaration();
				State = 321; Match(SEMICOLON);
				}
				break;
			case 9:
				_localctx = new UninitializedVarDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 323; uninitializedVarDeclaration();
				State = 324; Match(SEMICOLON);
				}
				break;
			case 10:
				_localctx = new AssignmentStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 326; expression(0);
				State = 327; Match(ASSIGN);
				State = 328; expression(0);
				State = 329; Match(SEMICOLON);
				}
				break;
			case 11:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 331; expression(0);
				State = 332; Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode LEFT_CURLY() { return GetToken(JurParser.LEFT_CURLY, 0); }
		public ITerminalNode RIGHT_CURLY() { return GetToken(JurParser.RIGHT_CURLY, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 26, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336; Match(LEFT_CURLY);
			State = 340;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT_CURLY) | (1L << LEFT_PARENT) | (1L << NOT) | (1L << STRING_VALUE) | (1L << NUMBER_VALUE) | (1L << BOOL_VALUE) | (1L << NULL_VALUE) | (1L << VOID) | (1L << ANY) | (1L << RETURN) | (1L << BREAK) | (1L << CONTINUE) | (1L << IF) | (1L << NEW) | (1L << FOR) | (1L << ARROW) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
				{
				{
				State = 337; statement();
				}
				}
				State = 342;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 343; Match(RIGHT_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariableAccessContext : ExpressionContext {
		public ITerminalNode ID() { return GetToken(JurParser.ID, 0); }
		public VariableAccessContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class NegationContext : ExpressionContext {
		public ITerminalNode NOT() { return GetToken(JurParser.NOT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NegationContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class AnonymusFunctionContext : ExpressionContext {
		public ITerminalNode ARROW() { return GetToken(JurParser.ARROW, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UninitializedVarDeclarationContext[] uninitializedVarDeclaration() {
			return GetRuleContexts<UninitializedVarDeclarationContext>();
		}
		public UninitializedVarDeclarationContext uninitializedVarDeclaration(int i) {
			return GetRuleContext<UninitializedVarDeclarationContext>(i);
		}
		public ITerminalNode LEFT_PARENT() { return GetToken(JurParser.LEFT_PARENT, 0); }
		public ITerminalNode RIGHT_PARENT() { return GetToken(JurParser.RIGHT_PARENT, 0); }
		public ITerminalNode[] COMA() { return GetTokens(JurParser.COMA); }
		public ITerminalNode COMA(int i) {
			return GetToken(JurParser.COMA, i);
		}
		public AnonymusFunctionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class DefaultValueContext : ExpressionContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(JurParser.DOT, 0); }
		public ITerminalNode DEFAULT_VALUE() { return GetToken(JurParser.DEFAULT_VALUE, 0); }
		public DefaultValueContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class PrimitiveValueContext : ExpressionContext {
		public IToken value;
		public ITerminalNode NUMBER_VALUE() { return GetToken(JurParser.NUMBER_VALUE, 0); }
		public ITerminalNode STRING_VALUE() { return GetToken(JurParser.STRING_VALUE, 0); }
		public ITerminalNode BOOL_VALUE() { return GetToken(JurParser.BOOL_VALUE, 0); }
		public ITerminalNode NULL_VALUE() { return GetToken(JurParser.NULL_VALUE, 0); }
		public PrimitiveValueContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class FunctionCallContext : ExpressionContext {
		public ITerminalNode ID() { return GetToken(JurParser.ID, 0); }
		public ITerminalNode LEFT_PARENT() { return GetToken(JurParser.LEFT_PARENT, 0); }
		public ITerminalNode RIGHT_PARENT() { return GetToken(JurParser.RIGHT_PARENT, 0); }
		public ITerminalNode[] LESS() { return GetTokens(JurParser.LESS); }
		public ITerminalNode LESS(int i) {
			return GetToken(JurParser.LESS, i);
		}
		public ITerminalNode POLY() { return GetToken(JurParser.POLY, 0); }
		public ITerminalNode[] GREATER() { return GetTokens(JurParser.GREATER); }
		public ITerminalNode GREATER(int i) {
			return GetToken(JurParser.GREATER, i);
		}
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMA() { return GetTokens(JurParser.COMA); }
		public ITerminalNode COMA(int i) {
			return GetToken(JurParser.COMA, i);
		}
		public ITerminalNode DOT() { return GetToken(JurParser.DOT, 0); }
		public FunctionCallContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class FieldAccessContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(JurParser.DOT, 0); }
		public ITerminalNode ID() { return GetToken(JurParser.ID, 0); }
		public FieldAccessContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class ArrayIndexAccessContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode LEFT_SQUARE_PARENT() { return GetToken(JurParser.LEFT_SQUARE_PARENT, 0); }
		public ITerminalNode RIGHT_SQUARE_PARENT() { return GetToken(JurParser.RIGHT_SQUARE_PARENT, 0); }
		public ArrayIndexAccessContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class ConstructorContext : ExpressionContext {
		public ITerminalNode NEW() { return GetToken(JurParser.NEW, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ConstructorContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class OperationContext : ExpressionContext {
		public IToken @operator;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TIMES() { return GetToken(JurParser.TIMES, 0); }
		public ITerminalNode DIVIDE() { return GetToken(JurParser.DIVIDE, 0); }
		public ITerminalNode ADD() { return GetToken(JurParser.ADD, 0); }
		public ITerminalNode SUBTRACT() { return GetToken(JurParser.SUBTRACT, 0); }
		public ITerminalNode LESS() { return GetToken(JurParser.LESS, 0); }
		public ITerminalNode GREATER() { return GetToken(JurParser.GREATER, 0); }
		public ITerminalNode LEQUAL() { return GetToken(JurParser.LEQUAL, 0); }
		public ITerminalNode GREQUAL() { return GetToken(JurParser.GREQUAL, 0); }
		public ITerminalNode EQUAL() { return GetToken(JurParser.EQUAL, 0); }
		public ITerminalNode NOT_EQUAL() { return GetToken(JurParser.NOT_EQUAL, 0); }
		public ITerminalNode LOGICAL_AND() { return GetToken(JurParser.LOGICAL_AND, 0); }
		public ITerminalNode OR() { return GetToken(JurParser.OR, 0); }
		public OperationContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class ParExpressionContext : ExpressionContext {
		public ITerminalNode LEFT_PARENT() { return GetToken(JurParser.LEFT_PARENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RIGHT_PARENT() { return GetToken(JurParser.RIGHT_PARENT, 0); }
		public ParExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class TypeExpressionContext : ExpressionContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(JurParser.DOT, 0); }
		public ITerminalNode TYPE() { return GetToken(JurParser.TYPE, 0); }
		public TypeExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 420;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				{
				_localctx = new PrimitiveValueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 346;
				((PrimitiveValueContext)_localctx).value = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_VALUE) | (1L << NUMBER_VALUE) | (1L << BOOL_VALUE) | (1L << NULL_VALUE))) != 0)) ) {
					((PrimitiveValueContext)_localctx).value = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				{
				_localctx = new AnonymusFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 348;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << ANY) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
					{
					State = 347; uninitializedVarDeclaration();
					}
				}

				State = 350; Match(ARROW);
				State = 353;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LEFT_CURLY:
					{
					State = 351; block();
					}
					break;
				case LEFT_PARENT:
				case NOT:
				case STRING_VALUE:
				case NUMBER_VALUE:
				case BOOL_VALUE:
				case NULL_VALUE:
				case VOID:
				case ANY:
				case NEW:
				case ARROW:
				case PRIMITIVE:
				case ID:
					{
					State = 352; expression(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				{
				_localctx = new AnonymusFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 355; Match(LEFT_PARENT);
				State = 364;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << ANY) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
					{
					State = 356; uninitializedVarDeclaration();
					State = 361;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 357; Match(COMA);
						State = 358; uninitializedVarDeclaration();
						}
						}
						State = 363;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 366; Match(RIGHT_PARENT);
				State = 367; Match(ARROW);
				State = 370;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LEFT_CURLY:
					{
					State = 368; block();
					}
					break;
				case LEFT_PARENT:
				case NOT:
				case STRING_VALUE:
				case NUMBER_VALUE:
				case BOOL_VALUE:
				case NULL_VALUE:
				case VOID:
				case ANY:
				case NEW:
				case ARROW:
				case PRIMITIVE:
				case ID:
					{
					State = 369; expression(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				{
				_localctx = new FunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 372; Match(ID);
				State = 376;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
				case 1:
					{
					State = 373; Match(LESS);
					State = 374; Match(POLY);
					State = 375; Match(GREATER);
					}
					break;
				}
				State = 389;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LESS) {
					{
					State = 378; Match(LESS);
					State = 379; type(0);
					State = 384;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 380; Match(COMA);
						State = 381; type(0);
						}
						}
						State = 386;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 387; Match(GREATER);
					}
				}

				State = 391; Match(LEFT_PARENT);
				State = 400;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT_PARENT) | (1L << NOT) | (1L << STRING_VALUE) | (1L << NUMBER_VALUE) | (1L << BOOL_VALUE) | (1L << NULL_VALUE) | (1L << VOID) | (1L << ANY) | (1L << NEW) | (1L << ARROW) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
					{
					State = 392; expression(0);
					State = 397;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 393; Match(COMA);
						State = 394; expression(0);
						}
						}
						State = 399;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 402; Match(RIGHT_PARENT);
				}
				break;
			case 5:
				{
				_localctx = new DefaultValueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 403; type(0);
				State = 404; Match(DOT);
				State = 405; Match(DEFAULT_VALUE);
				}
				break;
			case 6:
				{
				_localctx = new TypeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 407; type(0);
				State = 408; Match(DOT);
				State = 409; Match(TYPE);
				}
				break;
			case 7:
				{
				_localctx = new ConstructorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 411; Match(NEW);
				State = 412; type(0);
				}
				break;
			case 8:
				{
				_localctx = new VariableAccessContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 413; Match(ID);
				}
				break;
			case 9:
				{
				_localctx = new ParExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 414; Match(LEFT_PARENT);
				State = 415; expression(0);
				State = 416; Match(RIGHT_PARENT);
				}
				break;
			case 10:
				{
				_localctx = new NegationContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 418; Match(NOT);
				State = 419; expression(7);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 483;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 481;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
					case 1:
						{
						_localctx = new OperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 422;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 423;
						((OperationContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==TIMES || _la==DIVIDE) ) {
							((OperationContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 424; expression(7);
						}
						break;
					case 2:
						{
						_localctx = new OperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 425;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 426;
						((OperationContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ADD || _la==SUBTRACT) ) {
							((OperationContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 427; expression(6);
						}
						break;
					case 3:
						{
						_localctx = new OperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 428;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 429;
						((OperationContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LESS) | (1L << LEQUAL) | (1L << GREATER) | (1L << GREQUAL))) != 0)) ) {
							((OperationContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 430; expression(5);
						}
						break;
					case 4:
						{
						_localctx = new OperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 431;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 432;
						((OperationContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==EQUAL || _la==NOT_EQUAL) ) {
							((OperationContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 433; expression(4);
						}
						break;
					case 5:
						{
						_localctx = new OperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 434;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 435; Match(LOGICAL_AND);
						State = 436; expression(3);
						}
						break;
					case 6:
						{
						_localctx = new OperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 437;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 438; Match(OR);
						State = 439; expression(2);
						}
						break;
					case 7:
						{
						_localctx = new FunctionCallContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 440;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 441; Match(DOT);
						State = 442; Match(ID);
						State = 446;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
						case 1:
							{
							State = 443; Match(LESS);
							State = 444; Match(POLY);
							State = 445; Match(GREATER);
							}
							break;
						}
						State = 459;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==LESS) {
							{
							State = 448; Match(LESS);
							State = 449; type(0);
							State = 454;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==COMA) {
								{
								{
								State = 450; Match(COMA);
								State = 451; type(0);
								}
								}
								State = 456;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							State = 457; Match(GREATER);
							}
						}

						State = 461; Match(LEFT_PARENT);
						State = 470;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT_PARENT) | (1L << NOT) | (1L << STRING_VALUE) | (1L << NUMBER_VALUE) | (1L << BOOL_VALUE) | (1L << NULL_VALUE) | (1L << VOID) | (1L << ANY) | (1L << NEW) | (1L << ARROW) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
							{
							State = 462; expression(0);
							State = 467;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==COMA) {
								{
								{
								State = 463; Match(COMA);
								State = 464; expression(0);
								}
								}
								State = 469;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							}
						}

						State = 472; Match(RIGHT_PARENT);
						}
						break;
					case 8:
						{
						_localctx = new FieldAccessContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 473;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 474; Match(DOT);
						State = 475; Match(ID);
						}
						break;
					case 9:
						{
						_localctx = new ArrayIndexAccessContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 476;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 477; Match(LEFT_SQUARE_PARENT);
						State = 478; expression(0);
						State = 479; Match(RIGHT_SQUARE_PARENT);
						}
						break;
					}
					} 
				}
				State = 485;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 11: return type_sempred((TypeContext)_localctx, predIndex);
		case 14: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool type_sempred(TypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		case 5: return Precpred(Context, 3);
		case 6: return Precpred(Context, 2);
		case 7: return Precpred(Context, 1);
		case 8: return Precpred(Context, 15);
		case 9: return Precpred(Context, 12);
		case 10: return Precpred(Context, 9);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '<', '\x1E9', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x3', 
		'\x2', '\x3', '\x2', '\a', '\x2', '#', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '&', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\a', '\x4', '\x32', '\n', '\x4', '\f', '\x4', '\xE', 
		'\x4', '\x35', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\a', '\x5', '?', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x42', '\v', 
		'\x5', '\x3', '\x5', '\x5', '\x5', '\x45', '\n', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', 'L', 
		'\n', '\x5', '\f', '\x5', '\xE', '\x5', 'O', '\v', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x5', '\a', 'X', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', '\\', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\a', '\a', '\x63', '\n', '\a', '\f', '\a', '\xE', 
		'\a', '\x66', '\v', '\a', '\x3', '\a', '\x5', '\a', 'i', '\n', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 'o', '\n', '\a', 
		'\f', '\a', '\xE', '\a', 'r', '\v', '\a', '\x5', '\a', 't', '\n', '\a', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', 'x', '\n', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '|', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'\x80', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\a', '\a', '\x87', '\n', '\a', '\f', '\a', '\xE', '\a', 
		'\x8A', '\v', '\a', '\x3', '\a', '\x5', '\a', '\x8D', '\n', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\x93', '\n', 
		'\a', '\f', '\a', '\xE', '\a', '\x96', '\v', '\a', '\x5', '\a', '\x98', 
		'\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x9C', '\n', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', '\xA3', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\xA7', 
		'\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\xAB', '\n', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', 
		'\a', '\xB2', '\n', '\a', '\f', '\a', '\xE', '\a', '\xB5', '\v', '\a', 
		'\x3', '\a', '\x5', '\a', '\xB8', '\n', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\a', '\a', '\xBE', '\n', '\a', '\f', '\a', 
		'\xE', '\a', '\xC1', '\v', '\a', '\x5', '\a', '\xC3', '\n', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', '\xC7', '\n', '\a', '\x5', '\a', '\xC9', 
		'\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', 
		'\b', '\xCF', '\n', '\b', '\f', '\b', '\xE', '\b', '\xD2', '\v', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\xED', '\n', '\r', 
		'\f', '\r', '\xE', '\r', '\xF0', '\v', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', 
		'\r', '\xF9', '\n', '\r', '\f', '\r', '\xE', '\r', '\xFC', '\v', '\r', 
		'\x5', '\r', '\xFE', '\n', '\r', '\x3', '\r', '\x5', '\r', '\x101', '\n', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\a', '\r', '\x108', '\n', '\r', '\f', '\r', '\xE', '\r', '\x10B', '\v', 
		'\r', '\x5', '\r', '\x10D', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\a', '\r', '\x113', '\n', '\r', '\f', '\r', '\xE', 
		'\r', '\x116', '\v', '\r', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\x11A', 
		'\n', '\xE', '\f', '\xE', '\xE', '\xE', '\x11D', '\v', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x5', '\xE', '\x125', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x5', '\xE', '\x12A', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x5', '\xE', '\x12E', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x5', '\xE', '\x133', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x139', '\n', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x5', '\xE', '\x151', '\n', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\a', '\xF', '\x155', '\n', '\xF', '\f', '\xF', '\xE', '\xF', 
		'\x158', '\v', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x5', '\x10', '\x15F', '\n', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x164', '\n', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\x16A', 
		'\n', '\x10', '\f', '\x10', '\xE', '\x10', '\x16D', '\v', '\x10', '\x5', 
		'\x10', '\x16F', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x5', '\x10', '\x175', '\n', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x17B', '\n', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', 
		'\x181', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\x184', '\v', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x188', '\n', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\x18E', 
		'\n', '\x10', '\f', '\x10', '\xE', '\x10', '\x191', '\v', '\x10', '\x5', 
		'\x10', '\x193', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x5', '\x10', '\x1A7', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x5', '\x10', '\x1C1', '\n', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\x1C7', '\n', 
		'\x10', '\f', '\x10', '\xE', '\x10', '\x1CA', '\v', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x5', '\x10', '\x1CE', '\n', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\x1D4', '\n', '\x10', 
		'\f', '\x10', '\xE', '\x10', '\x1D7', '\v', '\x10', '\x5', '\x10', '\x1D9', 
		'\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\a', '\x10', '\x1E4', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\x1E7', 
		'\v', '\x10', '\x3', '\x10', '\x2', '\x4', '\x18', '\x1E', '\x11', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', '\x2', '\a', '\x3', '\x2', '\x1F', '\"', 
		'\x3', '\x2', '\r', '\xE', '\x3', '\x2', '\v', '\f', '\x3', '\x2', '\x15', 
		'\x18', '\x4', '\x2', '\x19', '\x19', '\x1B', '\x1B', '\x2', '\x237', 
		'\x2', '$', '\x3', '\x2', '\x2', '\x2', '\x4', ')', '\x3', '\x2', '\x2', 
		'\x2', '\x6', ',', '\x3', '\x2', '\x2', '\x2', '\b', '\x38', '\x3', '\x2', 
		'\x2', '\x2', '\n', 'R', '\x3', '\x2', '\x2', '\x2', '\f', '\xC8', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\xCA', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\xD3', '\x3', '\x2', '\x2', '\x2', '\x12', '\xD7', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\xDA', '\x3', '\x2', '\x2', '\x2', '\x16', '\xDF', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\x100', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x150', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x152', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x1A6', '\x3', '\x2', '\x2', '\x2', ' ', '#', '\x5', '\x4', 
		'\x3', '\x2', '!', '#', '\x5', '\x6', '\x4', '\x2', '\"', ' ', '\x3', 
		'\x2', '\x2', '\x2', '\"', '!', '\x3', '\x2', '\x2', '\x2', '#', '&', 
		'\x3', '\x2', '\x2', '\x2', '$', '\"', '\x3', '\x2', '\x2', '\x2', '$', 
		'%', '\x3', '\x2', '\x2', '\x2', '%', '\'', '\x3', '\x2', '\x2', '\x2', 
		'&', '$', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\a', '\x2', '\x2', '\x3', 
		'(', '\x3', '\x3', '\x2', '\x2', '\x2', ')', '*', '\a', ',', '\x2', '\x2', 
		'*', '+', '\x5', '\x1A', '\xE', '\x2', '+', '\x5', '\x3', '\x2', '\x2', 
		'\x2', ',', '-', '\a', '+', '\x2', '\x2', '-', '.', '\a', ' ', '\x2', 
		'\x2', '.', '\x33', '\a', '\xF', '\x2', '\x2', '/', '\x32', '\x5', '\f', 
		'\a', '\x2', '\x30', '\x32', '\x5', '\b', '\x5', '\x2', '\x31', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x31', '\x30', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x33', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x34', '\x3', '\x2', '\x2', '\x2', '\x34', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '\x35', '\x33', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x37', '\a', '\x10', '\x2', '\x2', '\x37', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\x39', '\a', '$', '\x2', '\x2', '\x39', '\x44', '\a', 
		'<', '\x2', '\x2', ':', ';', '\a', '\x15', '\x2', '\x2', ';', '@', '\a', 
		'<', '\x2', '\x2', '<', '=', '\a', '\a', '\x2', '\x2', '=', '?', '\a', 
		'<', '\x2', '\x2', '>', '<', '\x3', '\x2', '\x2', '\x2', '?', '\x42', 
		'\x3', '\x2', '\x2', '\x2', '@', '>', '\x3', '\x2', '\x2', '\x2', '@', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x41', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x42', '@', '\x3', '\x2', '\x2', '\x2', '\x43', '\x45', '\a', 
		'\x17', '\x2', '\x2', '\x44', ':', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x45', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\x3', '\x2', '\x2', 
		'\x2', '\x46', 'M', '\a', '\xF', '\x2', '\x2', 'G', 'H', '\x5', '\x12', 
		'\n', '\x2', 'H', 'I', '\a', '\t', '\x2', '\x2', 'I', 'L', '\x3', '\x2', 
		'\x2', '\x2', 'J', 'L', '\x5', '\n', '\x6', '\x2', 'K', 'G', '\x3', '\x2', 
		'\x2', '\x2', 'K', 'J', '\x3', '\x2', '\x2', '\x2', 'L', 'O', '\x3', '\x2', 
		'\x2', '\x2', 'M', 'K', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\x3', '\x2', 
		'\x2', '\x2', 'N', 'P', '\x3', '\x2', '\x2', '\x2', 'O', 'M', '\x3', '\x2', 
		'\x2', '\x2', 'P', 'Q', '\a', '\x10', '\x2', '\x2', 'Q', '\t', '\x3', 
		'\x2', '\x2', '\x2', 'R', 'S', '\a', '.', '\x2', '\x2', 'S', 'T', '\x5', 
		'\x18', '\r', '\x2', 'T', 'U', '\a', '\t', '\x2', '\x2', 'U', '\v', '\x3', 
		'\x2', '\x2', '\x2', 'V', 'X', '\a', '\x38', '\x2', '\x2', 'W', 'V', '\x3', 
		'\x2', '\x2', '\x2', 'W', 'X', '\x3', '\x2', '\x2', '\x2', 'X', '[', '\x3', 
		'\x2', '\x2', '\x2', 'Y', '\\', '\x5', '\x18', '\r', '\x2', 'Z', '\\', 
		'\a', '%', '\x2', '\x2', '[', 'Y', '\x3', '\x2', '\x2', '\x2', '[', 'Z', 
		'\x3', '\x2', '\x2', '\x2', '\\', ']', '\x3', '\x2', '\x2', '\x2', ']', 
		'h', '\a', '<', '\x2', '\x2', '^', '_', '\a', '\x15', '\x2', '\x2', '_', 
		'\x64', '\a', '<', '\x2', '\x2', '`', '\x61', '\a', '\a', '\x2', '\x2', 
		'\x61', '\x63', '\a', '<', '\x2', '\x2', '\x62', '`', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x66', '\x3', '\x2', '\x2', '\x2', '\x64', '\x62', '\x3', 
		'\x2', '\x2', '\x2', '\x64', '\x65', '\x3', '\x2', '\x2', '\x2', '\x65', 
		'g', '\x3', '\x2', '\x2', '\x2', '\x66', '\x64', '\x3', '\x2', '\x2', 
		'\x2', 'g', 'i', '\a', '\x17', '\x2', '\x2', 'h', '^', '\x3', '\x2', '\x2', 
		'\x2', 'h', 'i', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\x3', '\x2', '\x2', 
		'\x2', 'j', 's', '\a', '\x11', '\x2', '\x2', 'k', 'p', '\x5', '\x12', 
		'\n', '\x2', 'l', 'm', '\a', '\a', '\x2', '\x2', 'm', 'o', '\x5', '\x12', 
		'\n', '\x2', 'n', 'l', '\x3', '\x2', '\x2', '\x2', 'o', 'r', '\x3', '\x2', 
		'\x2', '\x2', 'p', 'n', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\x3', '\x2', 
		'\x2', '\x2', 'q', 't', '\x3', '\x2', '\x2', '\x2', 'r', 'p', '\x3', '\x2', 
		'\x2', '\x2', 's', 'k', '\x3', '\x2', '\x2', '\x2', 's', 't', '\x3', '\x2', 
		'\x2', '\x2', 't', 'u', '\x3', '\x2', '\x2', '\x2', 'u', 'w', '\a', '\x12', 
		'\x2', '\x2', 'v', 'x', '\x5', '\xE', '\b', '\x2', 'w', 'v', '\x3', '\x2', 
		'\x2', '\x2', 'w', 'x', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\x3', '\x2', 
		'\x2', '\x2', 'y', '\xC9', '\x5', '\x1C', '\xF', '\x2', 'z', '|', '\a', 
		'\x38', '\x2', '\x2', '{', 'z', '\x3', '\x2', '\x2', '\x2', '{', '|', 
		'\x3', '\x2', '\x2', '\x2', '|', '\x7F', '\x3', '\x2', '\x2', '\x2', '}', 
		'\x80', '\x5', '\x18', '\r', '\x2', '~', '\x80', '\a', '%', '\x2', '\x2', 
		'\x7F', '}', '\x3', '\x2', '\x2', '\x2', '\x7F', '~', '\x3', '\x2', '\x2', 
		'\x2', '\x80', '\x81', '\x3', '\x2', '\x2', '\x2', '\x81', '\x8C', '\a', 
		'<', '\x2', '\x2', '\x82', '\x83', '\a', '\x15', '\x2', '\x2', '\x83', 
		'\x88', '\a', '<', '\x2', '\x2', '\x84', '\x85', '\a', '\a', '\x2', '\x2', 
		'\x85', '\x87', '\a', '<', '\x2', '\x2', '\x86', '\x84', '\x3', '\x2', 
		'\x2', '\x2', '\x87', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x88', '\x86', 
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\x89', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x88', '\x3', '\x2', 
		'\x2', '\x2', '\x8B', '\x8D', '\a', '\x17', '\x2', '\x2', '\x8C', '\x82', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', '\x3', '\x2', '\x2', '\x2', 
		'\x8D', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x97', '\a', '\x11', 
		'\x2', '\x2', '\x8F', '\x94', '\x5', '\x12', '\n', '\x2', '\x90', '\x91', 
		'\a', '\a', '\x2', '\x2', '\x91', '\x93', '\x5', '\x12', '\n', '\x2', 
		'\x92', '\x90', '\x3', '\x2', '\x2', '\x2', '\x93', '\x96', '\x3', '\x2', 
		'\x2', '\x2', '\x94', '\x92', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', 
		'\x3', '\x2', '\x2', '\x2', '\x95', '\x98', '\x3', '\x2', '\x2', '\x2', 
		'\x96', '\x94', '\x3', '\x2', '\x2', '\x2', '\x97', '\x8F', '\x3', '\x2', 
		'\x2', '\x2', '\x97', '\x98', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', 
		'\x3', '\x2', '\x2', '\x2', '\x99', '\x9B', '\a', '\x12', '\x2', '\x2', 
		'\x9A', '\x9C', '\x5', '\xE', '\b', '\x2', '\x9B', '\x9A', '\x3', '\x2', 
		'\x2', '\x2', '\x9B', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', 
		'\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\a', '\x36', '\x2', '\x2', 
		'\x9E', '\x9F', '\x5', '\x1E', '\x10', '\x2', '\x9F', '\xA0', '\a', '\t', 
		'\x2', '\x2', '\xA0', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA3', 
		'\a', '\x38', '\x2', '\x2', '\xA2', '\xA1', '\x3', '\x2', '\x2', '\x2', 
		'\xA2', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\x3', '\x2', 
		'\x2', '\x2', '\xA4', '\xA6', '\a', '\x34', '\x2', '\x2', '\xA5', '\xA7', 
		'\a', '\x37', '\x2', '\x2', '\xA6', '\xA5', '\x3', '\x2', '\x2', '\x2', 
		'\xA6', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xAA', '\x3', '\x2', 
		'\x2', '\x2', '\xA8', '\xAB', '\x5', '\x18', '\r', '\x2', '\xA9', '\xAB', 
		'\a', '%', '\x2', '\x2', '\xAA', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xAA', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', '\x3', '\x2', '\x2', 
		'\x2', '\xAC', '\xB7', '\a', '<', '\x2', '\x2', '\xAD', '\xAE', '\a', 
		'\x15', '\x2', '\x2', '\xAE', '\xB3', '\a', '<', '\x2', '\x2', '\xAF', 
		'\xB0', '\a', '\a', '\x2', '\x2', '\xB0', '\xB2', '\a', '<', '\x2', '\x2', 
		'\xB1', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB5', '\x3', '\x2', 
		'\x2', '\x2', '\xB3', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', 
		'\x3', '\x2', '\x2', '\x2', '\xB4', '\xB6', '\x3', '\x2', '\x2', '\x2', 
		'\xB5', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB8', '\a', '\x17', 
		'\x2', '\x2', '\xB7', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB8', 
		'\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', '\x3', '\x2', '\x2', '\x2', 
		'\xB9', '\xC2', '\a', '\x11', '\x2', '\x2', '\xBA', '\xBF', '\x5', '\x12', 
		'\n', '\x2', '\xBB', '\xBC', '\a', '\a', '\x2', '\x2', '\xBC', '\xBE', 
		'\x5', '\x12', '\n', '\x2', '\xBD', '\xBB', '\x3', '\x2', '\x2', '\x2', 
		'\xBE', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xBD', '\x3', '\x2', 
		'\x2', '\x2', '\xBF', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC3', 
		'\x3', '\x2', '\x2', '\x2', '\xC1', '\xBF', '\x3', '\x2', '\x2', '\x2', 
		'\xC2', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', '\x3', '\x2', 
		'\x2', '\x2', '\xC3', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC6', 
		'\a', '\x12', '\x2', '\x2', '\xC5', '\xC7', '\x5', '\xE', '\b', '\x2', 
		'\xC6', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', '\x3', '\x2', 
		'\x2', '\x2', '\xC7', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xC8', 'W', 
		'\x3', '\x2', '\x2', '\x2', '\xC8', '{', '\x3', '\x2', '\x2', '\x2', '\xC8', 
		'\xA2', '\x3', '\x2', '\x2', '\x2', '\xC9', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\xCA', '\xCB', '\a', '\x1A', '\x2', '\x2', '\xCB', '\xD0', '\x5', 
		'\x10', '\t', '\x2', '\xCC', '\xCD', '\a', '/', '\x2', '\x2', '\xCD', 
		'\xCF', '\x5', '\x10', '\t', '\x2', '\xCE', '\xCC', '\x3', '\x2', '\x2', 
		'\x2', '\xCF', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xCE', '\x3', 
		'\x2', '\x2', '\x2', '\xD0', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD0', '\x3', '\x2', '\x2', 
		'\x2', '\xD3', '\xD4', '\x5', '\x18', '\r', '\x2', '\xD4', '\xD5', '\a', 
		'.', '\x2', '\x2', '\xD5', '\xD6', '\x5', '\x18', '\r', '\x2', '\xD6', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD8', '\x5', '\x18', '\r', 
		'\x2', '\xD8', '\xD9', '\a', '<', '\x2', '\x2', '\xD9', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\xDA', '\xDB', '\x5', '\x18', '\r', '\x2', '\xDB', 
		'\xDC', '\a', '<', '\x2', '\x2', '\xDC', '\xDD', '\a', '\n', '\x2', '\x2', 
		'\xDD', '\xDE', '\x5', '\x1E', '\x10', '\x2', '\xDE', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '\xDF', '\xE0', '\a', '<', '\x2', '\x2', '\xE0', '\xE1', 
		'\a', '\x3', '\x2', '\x2', '\xE1', '\xE2', '\x5', '\x1E', '\x10', '\x2', 
		'\xE2', '\x17', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', '\b', '\r', 
		'\x1', '\x2', '\xE4', '\x101', '\a', '&', '\x2', '\x2', '\xE5', '\x101', 
		'\a', '\x39', '\x2', '\x2', '\xE6', '\x101', '\a', '<', '\x2', '\x2', 
		'\xE7', '\xE8', '\a', '<', '\x2', '\x2', '\xE8', '\xE9', '\a', '\x15', 
		'\x2', '\x2', '\xE9', '\xEE', '\x5', '\x18', '\r', '\x2', '\xEA', '\xEB', 
		'\a', '\a', '\x2', '\x2', '\xEB', '\xED', '\x5', '\x18', '\r', '\x2', 
		'\xEC', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xED', '\xF0', '\x3', '\x2', 
		'\x2', '\x2', '\xEE', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEF', 
		'\x3', '\x2', '\x2', '\x2', '\xEF', '\xF1', '\x3', '\x2', '\x2', '\x2', 
		'\xF0', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF2', '\a', '\x17', 
		'\x2', '\x2', '\xF2', '\x101', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF4', 
		'\a', '%', '\x2', '\x2', '\xF4', '\xFD', '\a', '\x11', '\x2', '\x2', '\xF5', 
		'\xFA', '\x5', '\x18', '\r', '\x2', '\xF6', '\xF7', '\a', '\a', '\x2', 
		'\x2', '\xF7', '\xF9', '\x5', '\x18', '\r', '\x2', '\xF8', '\xF6', '\x3', 
		'\x2', '\x2', '\x2', '\xF9', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFA', 
		'\xF8', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFB', '\x3', '\x2', '\x2', 
		'\x2', '\xFB', '\xFE', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFA', '\x3', 
		'\x2', '\x2', '\x2', '\xFD', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xFD', 
		'\xFE', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', '\x3', '\x2', '\x2', 
		'\x2', '\xFF', '\x101', '\a', '\x12', '\x2', '\x2', '\x100', '\xE3', '\x3', 
		'\x2', '\x2', '\x2', '\x100', '\xE5', '\x3', '\x2', '\x2', '\x2', '\x100', 
		'\xE6', '\x3', '\x2', '\x2', '\x2', '\x100', '\xE7', '\x3', '\x2', '\x2', 
		'\x2', '\x100', '\xF3', '\x3', '\x2', '\x2', '\x2', '\x101', '\x114', 
		'\x3', '\x2', '\x2', '\x2', '\x102', '\x103', '\f', '\x5', '\x2', '\x2', 
		'\x103', '\x10C', '\a', '\x11', '\x2', '\x2', '\x104', '\x109', '\x5', 
		'\x18', '\r', '\x2', '\x105', '\x106', '\a', '\a', '\x2', '\x2', '\x106', 
		'\x108', '\x5', '\x18', '\r', '\x2', '\x107', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\x108', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x109', '\x107', 
		'\x3', '\x2', '\x2', '\x2', '\x109', '\x10A', '\x3', '\x2', '\x2', '\x2', 
		'\x10A', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x109', '\x3', 
		'\x2', '\x2', '\x2', '\x10C', '\x104', '\x3', '\x2', '\x2', '\x2', '\x10C', 
		'\x10D', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', '\x3', '\x2', '\x2', 
		'\x2', '\x10E', '\x113', '\a', '\x12', '\x2', '\x2', '\x10F', '\x110', 
		'\f', '\x3', '\x2', '\x2', '\x110', '\x111', '\a', '\x13', '\x2', '\x2', 
		'\x111', '\x113', '\a', '\x14', '\x2', '\x2', '\x112', '\x102', '\x3', 
		'\x2', '\x2', '\x2', '\x112', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x113', 
		'\x116', '\x3', '\x2', '\x2', '\x2', '\x114', '\x112', '\x3', '\x2', '\x2', 
		'\x2', '\x114', '\x115', '\x3', '\x2', '\x2', '\x2', '\x115', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x116', '\x114', '\x3', '\x2', '\x2', '\x2', 
		'\x117', '\x11B', '\a', '\xF', '\x2', '\x2', '\x118', '\x11A', '\x5', 
		'\x1A', '\xE', '\x2', '\x119', '\x118', '\x3', '\x2', '\x2', '\x2', '\x11A', 
		'\x11D', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x119', '\x3', '\x2', '\x2', 
		'\x2', '\x11B', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11E', 
		'\x3', '\x2', '\x2', '\x2', '\x11D', '\x11B', '\x3', '\x2', '\x2', '\x2', 
		'\x11E', '\x151', '\a', '\x10', '\x2', '\x2', '\x11F', '\x120', '\a', 
		'*', '\x2', '\x2', '\x120', '\x121', '\x5', '\x1E', '\x10', '\x2', '\x121', 
		'\x124', '\x5', '\x1A', '\xE', '\x2', '\x122', '\x123', '\a', '\x32', 
		'\x2', '\x2', '\x123', '\x125', '\x5', '\x1A', '\xE', '\x2', '\x124', 
		'\x122', '\x3', '\x2', '\x2', '\x2', '\x124', '\x125', '\x3', '\x2', '\x2', 
		'\x2', '\x125', '\x151', '\x3', '\x2', '\x2', '\x2', '\x126', '\x12D', 
		'\a', '\x33', '\x2', '\x2', '\x127', '\x12A', '\x5', '\x14', '\v', '\x2', 
		'\x128', '\x12A', '\x5', '\x16', '\f', '\x2', '\x129', '\x127', '\x3', 
		'\x2', '\x2', '\x2', '\x129', '\x128', '\x3', '\x2', '\x2', '\x2', '\x12A', 
		'\x12B', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x12C', '\a', '\t', '\x2', 
		'\x2', '\x12C', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x129', 
		'\x3', '\x2', '\x2', '\x2', '\x12D', '\x12E', '\x3', '\x2', '\x2', '\x2', 
		'\x12E', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x132', '\x5', 
		'\x1E', '\x10', '\x2', '\x130', '\x131', '\a', '\t', '\x2', '\x2', '\x131', 
		'\x133', '\x5', '\x1E', '\x10', '\x2', '\x132', '\x130', '\x3', '\x2', 
		'\x2', '\x2', '\x132', '\x133', '\x3', '\x2', '\x2', '\x2', '\x133', '\x134', 
		'\x3', '\x2', '\x2', '\x2', '\x134', '\x135', '\x5', '\x1A', '\xE', '\x2', 
		'\x135', '\x151', '\x3', '\x2', '\x2', '\x2', '\x136', '\x138', '\a', 
		'\'', '\x2', '\x2', '\x137', '\x139', '\x5', '\x1E', '\x10', '\x2', '\x138', 
		'\x137', '\x3', '\x2', '\x2', '\x2', '\x138', '\x139', '\x3', '\x2', '\x2', 
		'\x2', '\x139', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x151', 
		'\a', '\t', '\x2', '\x2', '\x13B', '\x13C', '\a', '(', '\x2', '\x2', '\x13C', 
		'\x151', '\a', '\t', '\x2', '\x2', '\x13D', '\x13E', '\a', ')', '\x2', 
		'\x2', '\x13E', '\x151', '\a', '\t', '\x2', '\x2', '\x13F', '\x140', '\x5', 
		'\x16', '\f', '\x2', '\x140', '\x141', '\a', '\t', '\x2', '\x2', '\x141', 
		'\x151', '\x3', '\x2', '\x2', '\x2', '\x142', '\x143', '\x5', '\x14', 
		'\v', '\x2', '\x143', '\x144', '\a', '\t', '\x2', '\x2', '\x144', '\x151', 
		'\x3', '\x2', '\x2', '\x2', '\x145', '\x146', '\x5', '\x12', '\n', '\x2', 
		'\x146', '\x147', '\a', '\t', '\x2', '\x2', '\x147', '\x151', '\x3', '\x2', 
		'\x2', '\x2', '\x148', '\x149', '\x5', '\x1E', '\x10', '\x2', '\x149', 
		'\x14A', '\a', '\n', '\x2', '\x2', '\x14A', '\x14B', '\x5', '\x1E', '\x10', 
		'\x2', '\x14B', '\x14C', '\a', '\t', '\x2', '\x2', '\x14C', '\x151', '\x3', 
		'\x2', '\x2', '\x2', '\x14D', '\x14E', '\x5', '\x1E', '\x10', '\x2', '\x14E', 
		'\x14F', '\a', '\t', '\x2', '\x2', '\x14F', '\x151', '\x3', '\x2', '\x2', 
		'\x2', '\x150', '\x117', '\x3', '\x2', '\x2', '\x2', '\x150', '\x11F', 
		'\x3', '\x2', '\x2', '\x2', '\x150', '\x126', '\x3', '\x2', '\x2', '\x2', 
		'\x150', '\x136', '\x3', '\x2', '\x2', '\x2', '\x150', '\x13B', '\x3', 
		'\x2', '\x2', '\x2', '\x150', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x150', 
		'\x13F', '\x3', '\x2', '\x2', '\x2', '\x150', '\x142', '\x3', '\x2', '\x2', 
		'\x2', '\x150', '\x145', '\x3', '\x2', '\x2', '\x2', '\x150', '\x148', 
		'\x3', '\x2', '\x2', '\x2', '\x150', '\x14D', '\x3', '\x2', '\x2', '\x2', 
		'\x151', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x152', '\x156', '\a', '\xF', 
		'\x2', '\x2', '\x153', '\x155', '\x5', '\x1A', '\xE', '\x2', '\x154', 
		'\x153', '\x3', '\x2', '\x2', '\x2', '\x155', '\x158', '\x3', '\x2', '\x2', 
		'\x2', '\x156', '\x154', '\x3', '\x2', '\x2', '\x2', '\x156', '\x157', 
		'\x3', '\x2', '\x2', '\x2', '\x157', '\x159', '\x3', '\x2', '\x2', '\x2', 
		'\x158', '\x156', '\x3', '\x2', '\x2', '\x2', '\x159', '\x15A', '\a', 
		'\x10', '\x2', '\x2', '\x15A', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x15B', 
		'\x15C', '\b', '\x10', '\x1', '\x2', '\x15C', '\x1A7', '\t', '\x2', '\x2', 
		'\x2', '\x15D', '\x15F', '\x5', '\x12', '\n', '\x2', '\x15E', '\x15D', 
		'\x3', '\x2', '\x2', '\x2', '\x15E', '\x15F', '\x3', '\x2', '\x2', '\x2', 
		'\x15F', '\x160', '\x3', '\x2', '\x2', '\x2', '\x160', '\x163', '\a', 
		'\x36', '\x2', '\x2', '\x161', '\x164', '\x5', '\x1C', '\xF', '\x2', '\x162', 
		'\x164', '\x5', '\x1E', '\x10', '\x2', '\x163', '\x161', '\x3', '\x2', 
		'\x2', '\x2', '\x163', '\x162', '\x3', '\x2', '\x2', '\x2', '\x164', '\x1A7', 
		'\x3', '\x2', '\x2', '\x2', '\x165', '\x16E', '\a', '\x11', '\x2', '\x2', 
		'\x166', '\x16B', '\x5', '\x12', '\n', '\x2', '\x167', '\x168', '\a', 
		'\a', '\x2', '\x2', '\x168', '\x16A', '\x5', '\x12', '\n', '\x2', '\x169', 
		'\x167', '\x3', '\x2', '\x2', '\x2', '\x16A', '\x16D', '\x3', '\x2', '\x2', 
		'\x2', '\x16B', '\x169', '\x3', '\x2', '\x2', '\x2', '\x16B', '\x16C', 
		'\x3', '\x2', '\x2', '\x2', '\x16C', '\x16F', '\x3', '\x2', '\x2', '\x2', 
		'\x16D', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x166', '\x3', 
		'\x2', '\x2', '\x2', '\x16E', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x16F', 
		'\x170', '\x3', '\x2', '\x2', '\x2', '\x170', '\x171', '\a', '\x12', '\x2', 
		'\x2', '\x171', '\x174', '\a', '\x36', '\x2', '\x2', '\x172', '\x175', 
		'\x5', '\x1C', '\xF', '\x2', '\x173', '\x175', '\x5', '\x1E', '\x10', 
		'\x2', '\x174', '\x172', '\x3', '\x2', '\x2', '\x2', '\x174', '\x173', 
		'\x3', '\x2', '\x2', '\x2', '\x175', '\x1A7', '\x3', '\x2', '\x2', '\x2', 
		'\x176', '\x17A', '\a', '<', '\x2', '\x2', '\x177', '\x178', '\a', '\x15', 
		'\x2', '\x2', '\x178', '\x179', '\a', '\x35', '\x2', '\x2', '\x179', '\x17B', 
		'\a', '\x17', '\x2', '\x2', '\x17A', '\x177', '\x3', '\x2', '\x2', '\x2', 
		'\x17A', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x17B', '\x187', '\x3', 
		'\x2', '\x2', '\x2', '\x17C', '\x17D', '\a', '\x15', '\x2', '\x2', '\x17D', 
		'\x182', '\x5', '\x18', '\r', '\x2', '\x17E', '\x17F', '\a', '\a', '\x2', 
		'\x2', '\x17F', '\x181', '\x5', '\x18', '\r', '\x2', '\x180', '\x17E', 
		'\x3', '\x2', '\x2', '\x2', '\x181', '\x184', '\x3', '\x2', '\x2', '\x2', 
		'\x182', '\x180', '\x3', '\x2', '\x2', '\x2', '\x182', '\x183', '\x3', 
		'\x2', '\x2', '\x2', '\x183', '\x185', '\x3', '\x2', '\x2', '\x2', '\x184', 
		'\x182', '\x3', '\x2', '\x2', '\x2', '\x185', '\x186', '\a', '\x17', '\x2', 
		'\x2', '\x186', '\x188', '\x3', '\x2', '\x2', '\x2', '\x187', '\x17C', 
		'\x3', '\x2', '\x2', '\x2', '\x187', '\x188', '\x3', '\x2', '\x2', '\x2', 
		'\x188', '\x189', '\x3', '\x2', '\x2', '\x2', '\x189', '\x192', '\a', 
		'\x11', '\x2', '\x2', '\x18A', '\x18F', '\x5', '\x1E', '\x10', '\x2', 
		'\x18B', '\x18C', '\a', '\a', '\x2', '\x2', '\x18C', '\x18E', '\x5', '\x1E', 
		'\x10', '\x2', '\x18D', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x18E', 
		'\x191', '\x3', '\x2', '\x2', '\x2', '\x18F', '\x18D', '\x3', '\x2', '\x2', 
		'\x2', '\x18F', '\x190', '\x3', '\x2', '\x2', '\x2', '\x190', '\x193', 
		'\x3', '\x2', '\x2', '\x2', '\x191', '\x18F', '\x3', '\x2', '\x2', '\x2', 
		'\x192', '\x18A', '\x3', '\x2', '\x2', '\x2', '\x192', '\x193', '\x3', 
		'\x2', '\x2', '\x2', '\x193', '\x194', '\x3', '\x2', '\x2', '\x2', '\x194', 
		'\x1A7', '\a', '\x12', '\x2', '\x2', '\x195', '\x196', '\x5', '\x18', 
		'\r', '\x2', '\x196', '\x197', '\a', '\b', '\x2', '\x2', '\x197', '\x198', 
		'\a', '\x30', '\x2', '\x2', '\x198', '\x1A7', '\x3', '\x2', '\x2', '\x2', 
		'\x199', '\x19A', '\x5', '\x18', '\r', '\x2', '\x19A', '\x19B', '\a', 
		'\b', '\x2', '\x2', '\x19B', '\x19C', '\a', '\x31', '\x2', '\x2', '\x19C', 
		'\x1A7', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x19E', '\a', '-', '\x2', 
		'\x2', '\x19E', '\x1A7', '\x5', '\x18', '\r', '\x2', '\x19F', '\x1A7', 
		'\a', '<', '\x2', '\x2', '\x1A0', '\x1A1', '\a', '\x11', '\x2', '\x2', 
		'\x1A1', '\x1A2', '\x5', '\x1E', '\x10', '\x2', '\x1A2', '\x1A3', '\a', 
		'\x12', '\x2', '\x2', '\x1A3', '\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1A4', 
		'\x1A5', '\a', '\x1C', '\x2', '\x2', '\x1A5', '\x1A7', '\x5', '\x1E', 
		'\x10', '\t', '\x1A6', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\x15E', 
		'\x3', '\x2', '\x2', '\x2', '\x1A6', '\x165', '\x3', '\x2', '\x2', '\x2', 
		'\x1A6', '\x176', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\x195', '\x3', 
		'\x2', '\x2', '\x2', '\x1A6', '\x199', '\x3', '\x2', '\x2', '\x2', '\x1A6', 
		'\x19D', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\x19F', '\x3', '\x2', '\x2', 
		'\x2', '\x1A6', '\x1A0', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\x1A4', 
		'\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1E5', '\x3', '\x2', '\x2', '\x2', 
		'\x1A8', '\x1A9', '\f', '\b', '\x2', '\x2', '\x1A9', '\x1AA', '\t', '\x3', 
		'\x2', '\x2', '\x1AA', '\x1E4', '\x5', '\x1E', '\x10', '\t', '\x1AB', 
		'\x1AC', '\f', '\a', '\x2', '\x2', '\x1AC', '\x1AD', '\t', '\x4', '\x2', 
		'\x2', '\x1AD', '\x1E4', '\x5', '\x1E', '\x10', '\b', '\x1AE', '\x1AF', 
		'\f', '\x6', '\x2', '\x2', '\x1AF', '\x1B0', '\t', '\x5', '\x2', '\x2', 
		'\x1B0', '\x1E4', '\x5', '\x1E', '\x10', '\a', '\x1B1', '\x1B2', '\f', 
		'\x5', '\x2', '\x2', '\x1B2', '\x1B3', '\t', '\x6', '\x2', '\x2', '\x1B3', 
		'\x1E4', '\x5', '\x1E', '\x10', '\x6', '\x1B4', '\x1B5', '\f', '\x4', 
		'\x2', '\x2', '\x1B5', '\x1B6', '\a', '\x1D', '\x2', '\x2', '\x1B6', '\x1E4', 
		'\x5', '\x1E', '\x10', '\x5', '\x1B7', '\x1B8', '\f', '\x3', '\x2', '\x2', 
		'\x1B8', '\x1B9', '\a', '\x1E', '\x2', '\x2', '\x1B9', '\x1E4', '\x5', 
		'\x1E', '\x10', '\x4', '\x1BA', '\x1BB', '\f', '\x11', '\x2', '\x2', '\x1BB', 
		'\x1BC', '\a', '\b', '\x2', '\x2', '\x1BC', '\x1C0', '\a', '<', '\x2', 
		'\x2', '\x1BD', '\x1BE', '\a', '\x15', '\x2', '\x2', '\x1BE', '\x1BF', 
		'\a', '\x35', '\x2', '\x2', '\x1BF', '\x1C1', '\a', '\x17', '\x2', '\x2', 
		'\x1C0', '\x1BD', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\x1C1', '\x3', 
		'\x2', '\x2', '\x2', '\x1C1', '\x1CD', '\x3', '\x2', '\x2', '\x2', '\x1C2', 
		'\x1C3', '\a', '\x15', '\x2', '\x2', '\x1C3', '\x1C8', '\x5', '\x18', 
		'\r', '\x2', '\x1C4', '\x1C5', '\a', '\a', '\x2', '\x2', '\x1C5', '\x1C7', 
		'\x5', '\x18', '\r', '\x2', '\x1C6', '\x1C4', '\x3', '\x2', '\x2', '\x2', 
		'\x1C7', '\x1CA', '\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1C6', '\x3', 
		'\x2', '\x2', '\x2', '\x1C8', '\x1C9', '\x3', '\x2', '\x2', '\x2', '\x1C9', 
		'\x1CB', '\x3', '\x2', '\x2', '\x2', '\x1CA', '\x1C8', '\x3', '\x2', '\x2', 
		'\x2', '\x1CB', '\x1CC', '\a', '\x17', '\x2', '\x2', '\x1CC', '\x1CE', 
		'\x3', '\x2', '\x2', '\x2', '\x1CD', '\x1C2', '\x3', '\x2', '\x2', '\x2', 
		'\x1CD', '\x1CE', '\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1CF', '\x3', 
		'\x2', '\x2', '\x2', '\x1CF', '\x1D8', '\a', '\x11', '\x2', '\x2', '\x1D0', 
		'\x1D5', '\x5', '\x1E', '\x10', '\x2', '\x1D1', '\x1D2', '\a', '\a', '\x2', 
		'\x2', '\x1D2', '\x1D4', '\x5', '\x1E', '\x10', '\x2', '\x1D3', '\x1D1', 
		'\x3', '\x2', '\x2', '\x2', '\x1D4', '\x1D7', '\x3', '\x2', '\x2', '\x2', 
		'\x1D5', '\x1D3', '\x3', '\x2', '\x2', '\x2', '\x1D5', '\x1D6', '\x3', 
		'\x2', '\x2', '\x2', '\x1D6', '\x1D9', '\x3', '\x2', '\x2', '\x2', '\x1D7', 
		'\x1D5', '\x3', '\x2', '\x2', '\x2', '\x1D8', '\x1D0', '\x3', '\x2', '\x2', 
		'\x2', '\x1D8', '\x1D9', '\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1DA', 
		'\x3', '\x2', '\x2', '\x2', '\x1DA', '\x1E4', '\a', '\x12', '\x2', '\x2', 
		'\x1DB', '\x1DC', '\f', '\xE', '\x2', '\x2', '\x1DC', '\x1DD', '\a', '\b', 
		'\x2', '\x2', '\x1DD', '\x1E4', '\a', '<', '\x2', '\x2', '\x1DE', '\x1DF', 
		'\f', '\v', '\x2', '\x2', '\x1DF', '\x1E0', '\a', '\x13', '\x2', '\x2', 
		'\x1E0', '\x1E1', '\x5', '\x1E', '\x10', '\x2', '\x1E1', '\x1E2', '\a', 
		'\x14', '\x2', '\x2', '\x1E2', '\x1E4', '\x3', '\x2', '\x2', '\x2', '\x1E3', 
		'\x1A8', '\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1AB', '\x3', '\x2', '\x2', 
		'\x2', '\x1E3', '\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1B1', 
		'\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1B4', '\x3', '\x2', '\x2', '\x2', 
		'\x1E3', '\x1B7', '\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1BA', '\x3', 
		'\x2', '\x2', '\x2', '\x1E3', '\x1DB', '\x3', '\x2', '\x2', '\x2', '\x1E3', 
		'\x1DE', '\x3', '\x2', '\x2', '\x2', '\x1E4', '\x1E7', '\x3', '\x2', '\x2', 
		'\x2', '\x1E5', '\x1E3', '\x3', '\x2', '\x2', '\x2', '\x1E5', '\x1E6', 
		'\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x1E7', '\x1E5', '\x3', '\x2', '\x2', '\x2', '\x44', '\"', '$', '\x31', 
		'\x33', '@', '\x44', 'K', 'M', 'W', '[', '\x64', 'h', 'p', 's', 'w', '{', 
		'\x7F', '\x88', '\x8C', '\x94', '\x97', '\x9B', '\xA2', '\xA6', '\xAA', 
		'\xB3', '\xB7', '\xBF', '\xC2', '\xC6', '\xC8', '\xD0', '\xEE', '\xFA', 
		'\xFD', '\x100', '\x109', '\x10C', '\x112', '\x114', '\x11B', '\x124', 
		'\x129', '\x12D', '\x132', '\x138', '\x150', '\x156', '\x15E', '\x163', 
		'\x16B', '\x16E', '\x174', '\x17A', '\x182', '\x187', '\x18F', '\x192', 
		'\x1A6', '\x1C0', '\x1C8', '\x1CD', '\x1D5', '\x1D8', '\x1E3', '\x1E5',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
