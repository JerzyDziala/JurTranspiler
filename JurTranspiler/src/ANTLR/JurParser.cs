//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/strator/Documents/GitHub/JurTranspiler/JurTranspiler/src/ANTLR/Jur.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class JurParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, LINE_COMMENT=3, WHITESPACE=4, NEWLINE=5, COMA=6, DOT=7, 
		SEMICOLON=8, DOLLAR=9, ASSIGN=10, ADD=11, SUBTRACT=12, TIMES=13, DIVIDE=14, 
		LEFT_CURLY=15, RIGHT_CURLY=16, LEFT_PARENT=17, RIGHT_PARENT=18, LEFT_SQUARE_PARENT=19, 
		RIGHT_SQUARE_PARENT=20, LESS=21, LEQUAL=22, GREATER=23, GREQUAL=24, EQUAL=25, 
		IS=26, WHERE=27, NOT_EQUAL=28, AND=29, OR=30, STRING_VALUE=31, NUMBER_VALUE=32, 
		BOOL_VALUE=33, NULL_VALUE=34, VALUE=35, STRUCT=36, VOID=37, RETURN=38, 
		BREAK=39, CONTINUE=40, EXIT=41, IF=42, WHILE=43, ABSTRACTION=44, MAIN=45, 
		NEW=46, IN=47, ELSE=48, FOR=49, EXTERN=50, LET=51, POLY=52, ARROW=53, 
		PRIMITIVE=54, ARITHMETIC=55, LOGIC=56, ID=57;
	public const int
		RULE_program = 0, RULE_main = 1, RULE_abstraction = 2, RULE_structDeclaration = 3, 
		RULE_inlinedType = 4, RULE_functionDeclaration = 5, RULE_constraints = 6, 
		RULE_constrain = 7, RULE_uninitializedVarDeclaration = 8, RULE_initializedVariableDeclaration = 9, 
		RULE_inferedVariableDeclaration = 10, RULE_type = 11, RULE_statement = 12, 
		RULE_block = 13, RULE_expression = 14;
	public static readonly string[] ruleNames = {
		"program", "main", "abstraction", "structDeclaration", "inlinedType", 
		"functionDeclaration", "constraints", "constrain", "uninitializedVarDeclaration", 
		"initializedVariableDeclaration", "inferedVariableDeclaration", "type", 
		"statement", "block", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "':='", "':'", null, null, null, "','", "'.'", "';'", "'$'", "'='", 
		"'+'", "'-'", "'*'", "'/'", "'{'", "'}'", "'('", "')'", "'['", "']'", 
		"'<'", "'<='", "'>'", "'>='", "'=='", "'is'", "'where'", "'!='", null, 
		null, null, null, null, "'null'", null, "'struct'", "'void'", "'return'", 
		"'break'", "'continue'", "'exit'", "'if'", "'while'", "'abstraction'", 
		"'main'", "'new'", "'in'", "'else'", "'for'", "'extern'", "'let'", "'poly'", 
		"'->'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "LINE_COMMENT", "WHITESPACE", "NEWLINE", "COMA", "DOT", 
		"SEMICOLON", "DOLLAR", "ASSIGN", "ADD", "SUBTRACT", "TIMES", "DIVIDE", 
		"LEFT_CURLY", "RIGHT_CURLY", "LEFT_PARENT", "RIGHT_PARENT", "LEFT_SQUARE_PARENT", 
		"RIGHT_SQUARE_PARENT", "LESS", "LEQUAL", "GREATER", "GREQUAL", "EQUAL", 
		"IS", "WHERE", "NOT_EQUAL", "AND", "OR", "STRING_VALUE", "NUMBER_VALUE", 
		"BOOL_VALUE", "NULL_VALUE", "VALUE", "STRUCT", "VOID", "RETURN", "BREAK", 
		"CONTINUE", "EXIT", "IF", "WHILE", "ABSTRACTION", "MAIN", "NEW", "IN", 
		"ELSE", "FOR", "EXTERN", "LET", "POLY", "ARROW", "PRIMITIVE", "ARITHMETIC", 
		"LOGIC", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Jur.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JurParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JurParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JurParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(JurParser.Eof, 0); }
		public MainContext[] main() {
			return GetRuleContexts<MainContext>();
		}
		public MainContext main(int i) {
			return GetRuleContext<MainContext>(i);
		}
		public AbstractionContext[] abstraction() {
			return GetRuleContexts<AbstractionContext>();
		}
		public AbstractionContext abstraction(int i) {
			return GetRuleContext<AbstractionContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ABSTRACTION || _la==MAIN) {
				{
				State = 32;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case MAIN:
					{
					State = 30; main();
					}
					break;
				case ABSTRACTION:
					{
					State = 31; abstraction();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 36;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 37; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainContext : ParserRuleContext {
		public ITerminalNode MAIN() { return GetToken(JurParser.MAIN, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 2, RULE_main);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39; Match(MAIN);
			State = 40; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractionContext : ParserRuleContext {
		public ITerminalNode ABSTRACTION() { return GetToken(JurParser.ABSTRACTION, 0); }
		public ITerminalNode NUMBER_VALUE() { return GetToken(JurParser.NUMBER_VALUE, 0); }
		public ITerminalNode LEFT_CURLY() { return GetToken(JurParser.LEFT_CURLY, 0); }
		public ITerminalNode RIGHT_CURLY() { return GetToken(JurParser.RIGHT_CURLY, 0); }
		public FunctionDeclarationContext[] functionDeclaration() {
			return GetRuleContexts<FunctionDeclarationContext>();
		}
		public FunctionDeclarationContext functionDeclaration(int i) {
			return GetRuleContext<FunctionDeclarationContext>(i);
		}
		public StructDeclarationContext[] structDeclaration() {
			return GetRuleContexts<StructDeclarationContext>();
		}
		public StructDeclarationContext structDeclaration(int i) {
			return GetRuleContext<StructDeclarationContext>(i);
		}
		public AbstractionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstraction; } }
	}

	[RuleVersion(0)]
	public AbstractionContext abstraction() {
		AbstractionContext _localctx = new AbstractionContext(Context, State);
		EnterRule(_localctx, 4, RULE_abstraction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42; Match(ABSTRACTION);
			State = 43; Match(NUMBER_VALUE);
			State = 44; Match(LEFT_CURLY);
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRUCT) | (1L << VOID) | (1L << EXTERN) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
				{
				State = 47;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 45; functionDeclaration();
					}
					break;
				case 2:
					{
					State = 46; structDeclaration();
					}
					break;
				}
				}
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 52; Match(RIGHT_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationContext : ParserRuleContext {
		public ITerminalNode STRUCT() { return GetToken(JurParser.STRUCT, 0); }
		public ITerminalNode[] ID() { return GetTokens(JurParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(JurParser.ID, i);
		}
		public ITerminalNode LEFT_CURLY() { return GetToken(JurParser.LEFT_CURLY, 0); }
		public ITerminalNode RIGHT_CURLY() { return GetToken(JurParser.RIGHT_CURLY, 0); }
		public ITerminalNode EXTERN() { return GetToken(JurParser.EXTERN, 0); }
		public ITerminalNode LESS() { return GetToken(JurParser.LESS, 0); }
		public ITerminalNode GREATER() { return GetToken(JurParser.GREATER, 0); }
		public InlinedTypeContext[] inlinedType() {
			return GetRuleContexts<InlinedTypeContext>();
		}
		public InlinedTypeContext inlinedType(int i) {
			return GetRuleContext<InlinedTypeContext>(i);
		}
		public UninitializedVarDeclarationContext[] uninitializedVarDeclaration() {
			return GetRuleContexts<UninitializedVarDeclarationContext>();
		}
		public UninitializedVarDeclarationContext uninitializedVarDeclaration(int i) {
			return GetRuleContext<UninitializedVarDeclarationContext>(i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(JurParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(JurParser.SEMICOLON, i);
		}
		public ITerminalNode[] COMA() { return GetTokens(JurParser.COMA); }
		public ITerminalNode COMA(int i) {
			return GetToken(JurParser.COMA, i);
		}
		public StructDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaration; } }
	}

	[RuleVersion(0)]
	public StructDeclarationContext structDeclaration() {
		StructDeclarationContext _localctx = new StructDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_structDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTERN) {
				{
				State = 54; Match(EXTERN);
				}
			}

			State = 57; Match(STRUCT);
			State = 58; Match(ID);
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LESS) {
				{
				State = 59; Match(LESS);
				State = 60; Match(ID);
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMA) {
					{
					{
					State = 61; Match(COMA);
					State = 62; Match(ID);
					}
					}
					State = 67;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 68; Match(GREATER);
				}
			}

			State = 71; Match(LEFT_CURLY);
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IS) | (1L << VOID) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
				{
				State = 76;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VOID:
				case PRIMITIVE:
				case ID:
					{
					{
					State = 72; uninitializedVarDeclaration();
					State = 73; Match(SEMICOLON);
					}
					}
					break;
				case IS:
					{
					State = 75; inlinedType();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 81; Match(RIGHT_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlinedTypeContext : ParserRuleContext {
		public ITerminalNode IS() { return GetToken(JurParser.IS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(JurParser.SEMICOLON, 0); }
		public InlinedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlinedType; } }
	}

	[RuleVersion(0)]
	public InlinedTypeContext inlinedType() {
		InlinedTypeContext _localctx = new InlinedTypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_inlinedType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83; Match(IS);
			State = 84; type(0);
			State = 85; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(JurParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(JurParser.ID, i);
		}
		public ITerminalNode LEFT_PARENT() { return GetToken(JurParser.LEFT_PARENT, 0); }
		public ITerminalNode RIGHT_PARENT() { return GetToken(JurParser.RIGHT_PARENT, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(JurParser.VOID, 0); }
		public ITerminalNode LESS() { return GetToken(JurParser.LESS, 0); }
		public ITerminalNode GREATER() { return GetToken(JurParser.GREATER, 0); }
		public UninitializedVarDeclarationContext[] uninitializedVarDeclaration() {
			return GetRuleContexts<UninitializedVarDeclarationContext>();
		}
		public UninitializedVarDeclarationContext uninitializedVarDeclaration(int i) {
			return GetRuleContext<UninitializedVarDeclarationContext>(i);
		}
		public ConstraintsContext constraints() {
			return GetRuleContext<ConstraintsContext>(0);
		}
		public ITerminalNode[] COMA() { return GetTokens(JurParser.COMA); }
		public ITerminalNode COMA(int i) {
			return GetToken(JurParser.COMA, i);
		}
		public ITerminalNode EXTERN() { return GetToken(JurParser.EXTERN, 0); }
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_functionDeclaration);
		int _la;
		try {
			State = 153;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VOID:
			case PRIMITIVE:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 89;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
				case 1:
					{
					State = 87; type(0);
					}
					break;
				case 2:
					{
					State = 88; Match(VOID);
					}
					break;
				}
				State = 91; Match(ID);
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LESS) {
					{
					State = 92; Match(LESS);
					State = 93; Match(ID);
					State = 98;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 94; Match(COMA);
						State = 95; Match(ID);
						}
						}
						State = 100;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 101; Match(GREATER);
					}
				}

				State = 104; Match(LEFT_PARENT);
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
					{
					State = 105; uninitializedVarDeclaration();
					State = 110;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 106; Match(COMA);
						State = 107; uninitializedVarDeclaration();
						}
						}
						State = 112;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 115; Match(RIGHT_PARENT);
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 116; constraints();
					}
				}

				State = 119; statement();
				}
				}
				break;
			case EXTERN:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 120; Match(EXTERN);
				State = 123;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
				case 1:
					{
					State = 121; type(0);
					}
					break;
				case 2:
					{
					State = 122; Match(VOID);
					}
					break;
				}
				State = 125; Match(ID);
				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LESS) {
					{
					State = 126; Match(LESS);
					State = 127; Match(ID);
					State = 132;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 128; Match(COMA);
						State = 129; Match(ID);
						}
						}
						State = 134;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 135; Match(GREATER);
					}
				}

				State = 138; Match(LEFT_PARENT);
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
					{
					State = 139; uninitializedVarDeclaration();
					State = 144;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 140; Match(COMA);
						State = 141; uninitializedVarDeclaration();
						}
						}
						State = 146;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 149; Match(RIGHT_PARENT);
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 150; constraints();
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintsContext : ParserRuleContext {
		public ITerminalNode WHERE() { return GetToken(JurParser.WHERE, 0); }
		public ConstrainContext[] constrain() {
			return GetRuleContexts<ConstrainContext>();
		}
		public ConstrainContext constrain(int i) {
			return GetRuleContext<ConstrainContext>(i);
		}
		public ITerminalNode[] AND() { return GetTokens(JurParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(JurParser.AND, i);
		}
		public ConstraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraints; } }
	}

	[RuleVersion(0)]
	public ConstraintsContext constraints() {
		ConstraintsContext _localctx = new ConstraintsContext(Context, State);
		EnterRule(_localctx, 12, RULE_constraints);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155; Match(WHERE);
			State = 156; constrain();
			State = 161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 157; Match(AND);
				State = 158; constrain();
				}
				}
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstrainContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode IS() { return GetToken(JurParser.IS, 0); }
		public ConstrainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constrain; } }
	}

	[RuleVersion(0)]
	public ConstrainContext constrain() {
		ConstrainContext _localctx = new ConstrainContext(Context, State);
		EnterRule(_localctx, 14, RULE_constrain);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164; type(0);
			State = 165; Match(IS);
			State = 166; type(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UninitializedVarDeclarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(JurParser.ID, 0); }
		public UninitializedVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uninitializedVarDeclaration; } }
	}

	[RuleVersion(0)]
	public UninitializedVarDeclarationContext uninitializedVarDeclaration() {
		UninitializedVarDeclarationContext _localctx = new UninitializedVarDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_uninitializedVarDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168; type(0);
			State = 169; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializedVariableDeclarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(JurParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(JurParser.ASSIGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InitializedVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializedVariableDeclaration; } }
	}

	[RuleVersion(0)]
	public InitializedVariableDeclarationContext initializedVariableDeclaration() {
		InitializedVariableDeclarationContext _localctx = new InitializedVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_initializedVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171; type(0);
			State = 172; Match(ID);
			State = 173; Match(ASSIGN);
			State = 174; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InferedVariableDeclarationContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(JurParser.ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode LET() { return GetToken(JurParser.LET, 0); }
		public ITerminalNode ASSIGN() { return GetToken(JurParser.ASSIGN, 0); }
		public InferedVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inferedVariableDeclaration; } }
	}

	[RuleVersion(0)]
	public InferedVariableDeclarationContext inferedVariableDeclaration() {
		InferedVariableDeclarationContext _localctx = new InferedVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_inferedVariableDeclaration);
		try {
			State = 183;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 176; Match(ID);
				State = 177; Match(T__0);
				State = 178; expression(0);
				}
				break;
			case LET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 179; Match(LET);
				State = 180; Match(ID);
				State = 181; Match(ASSIGN);
				State = 182; expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArrayTypeContext : TypeContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode LEFT_SQUARE_PARENT() { return GetToken(JurParser.LEFT_SQUARE_PARENT, 0); }
		public ITerminalNode RIGHT_SQUARE_PARENT() { return GetToken(JurParser.RIGHT_SQUARE_PARENT, 0); }
		public ArrayTypeContext(TypeContext context) { CopyFrom(context); }
	}
	public partial class TypeParameterOrStructTypeContext : TypeContext {
		public ITerminalNode ID() { return GetToken(JurParser.ID, 0); }
		public TypeParameterOrStructTypeContext(TypeContext context) { CopyFrom(context); }
	}
	public partial class FunctionPointerTypeContext : TypeContext {
		public ITerminalNode VOID() { return GetToken(JurParser.VOID, 0); }
		public ITerminalNode LEFT_PARENT() { return GetToken(JurParser.LEFT_PARENT, 0); }
		public ITerminalNode RIGHT_PARENT() { return GetToken(JurParser.RIGHT_PARENT, 0); }
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode[] COMA() { return GetTokens(JurParser.COMA); }
		public ITerminalNode COMA(int i) {
			return GetToken(JurParser.COMA, i);
		}
		public FunctionPointerTypeContext(TypeContext context) { CopyFrom(context); }
	}
	public partial class GenericStructTypeContext : TypeContext {
		public ITerminalNode ID() { return GetToken(JurParser.ID, 0); }
		public ITerminalNode LESS() { return GetToken(JurParser.LESS, 0); }
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode GREATER() { return GetToken(JurParser.GREATER, 0); }
		public ITerminalNode[] COMA() { return GetTokens(JurParser.COMA); }
		public ITerminalNode COMA(int i) {
			return GetToken(JurParser.COMA, i);
		}
		public GenericStructTypeContext(TypeContext context) { CopyFrom(context); }
	}
	public partial class PrimitiveTypeContext : TypeContext {
		public ITerminalNode PRIMITIVE() { return GetToken(JurParser.PRIMITIVE, 0); }
		public PrimitiveTypeContext(TypeContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public TypeContext type() {
		return type(0);
	}

	private TypeContext type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeContext _localctx = new TypeContext(Context, _parentState);
		TypeContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_type, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				_localctx = new PrimitiveTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 186; Match(PRIMITIVE);
				}
				break;
			case 2:
				{
				_localctx = new TypeParameterOrStructTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 187; Match(ID);
				}
				break;
			case 3:
				{
				_localctx = new GenericStructTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 188; Match(ID);
				{
				State = 189; Match(LESS);
				State = 190; type(0);
				State = 195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMA) {
					{
					{
					State = 191; Match(COMA);
					State = 192; type(0);
					}
					}
					State = 197;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 198; Match(GREATER);
				}
				}
				break;
			case 4:
				{
				_localctx = new FunctionPointerTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 200; Match(VOID);
				State = 201; Match(LEFT_PARENT);
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
					{
					State = 202; type(0);
					State = 207;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 203; Match(COMA);
						State = 204; type(0);
						}
						}
						State = 209;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 212; Match(RIGHT_PARENT);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 233;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 231;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
					case 1:
						{
						_localctx = new FunctionPointerTypeContext(new TypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 215;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 216; Match(LEFT_PARENT);
						State = 225;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
							{
							State = 217; type(0);
							State = 222;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==COMA) {
								{
								{
								State = 218; Match(COMA);
								State = 219; type(0);
								}
								}
								State = 224;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							}
						}

						State = 227; Match(RIGHT_PARENT);
						}
						break;
					case 2:
						{
						_localctx = new ArrayTypeContext(new TypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 228;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 229; Match(LEFT_SQUARE_PARENT);
						State = 230; Match(RIGHT_SQUARE_PARENT);
						}
						break;
					}
					} 
				}
				State = 235;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlockStatementContext : StatementContext {
		public ITerminalNode LEFT_CURLY() { return GetToken(JurParser.LEFT_CURLY, 0); }
		public ITerminalNode RIGHT_CURLY() { return GetToken(JurParser.RIGHT_CURLY, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class ExitStatementContext : StatementContext {
		public ITerminalNode EXIT() { return GetToken(JurParser.EXIT, 0); }
		public ITerminalNode LEFT_PARENT() { return GetToken(JurParser.LEFT_PARENT, 0); }
		public ITerminalNode STRING_VALUE() { return GetToken(JurParser.STRING_VALUE, 0); }
		public ITerminalNode RIGHT_PARENT() { return GetToken(JurParser.RIGHT_PARENT, 0); }
		public ExitStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class AssignmentStatementContext : StatementContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ASSIGN() { return GetToken(JurParser.ASSIGN, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(JurParser.SEMICOLON, 0); }
		public AssignmentStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class UninitializedVarDeclarationStatementContext : StatementContext {
		public UninitializedVarDeclarationContext uninitializedVarDeclaration() {
			return GetRuleContext<UninitializedVarDeclarationContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(JurParser.SEMICOLON, 0); }
		public UninitializedVarDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class ForStatementContext : StatementContext {
		public ITerminalNode FOR() { return GetToken(JurParser.FOR, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(JurParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(JurParser.SEMICOLON, i);
		}
		public InitializedVariableDeclarationContext initializedVariableDeclaration() {
			return GetRuleContext<InitializedVariableDeclarationContext>(0);
		}
		public InferedVariableDeclarationContext inferedVariableDeclaration() {
			return GetRuleContext<InferedVariableDeclarationContext>(0);
		}
		public ForStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class BreakStatementContext : StatementContext {
		public ITerminalNode BREAK() { return GetToken(JurParser.BREAK, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(JurParser.SEMICOLON, 0); }
		public BreakStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class IfStatementContext : StatementContext {
		public ITerminalNode IF() { return GetToken(JurParser.IF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(JurParser.ELSE, 0); }
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class ReturnStatementContext : StatementContext {
		public ITerminalNode RETURN() { return GetToken(JurParser.RETURN, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(JurParser.SEMICOLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class InferedVariableDeclarationStatementContext : StatementContext {
		public InferedVariableDeclarationContext inferedVariableDeclaration() {
			return GetRuleContext<InferedVariableDeclarationContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(JurParser.SEMICOLON, 0); }
		public InferedVariableDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class InitializedVariableDeclarationStatementContext : StatementContext {
		public InitializedVariableDeclarationContext initializedVariableDeclaration() {
			return GetRuleContext<InitializedVariableDeclarationContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(JurParser.SEMICOLON, 0); }
		public InitializedVariableDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class ForeachStatementContext : StatementContext {
		public ITerminalNode FOR() { return GetToken(JurParser.FOR, 0); }
		public UninitializedVarDeclarationContext uninitializedVarDeclaration() {
			return GetRuleContext<UninitializedVarDeclarationContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode IN() { return GetToken(JurParser.IN, 0); }
		public ForeachStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class ContinueStatementContext : StatementContext {
		public ITerminalNode CONTINUE() { return GetToken(JurParser.CONTINUE, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(JurParser.SEMICOLON, 0); }
		public ContinueStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class ExpressionStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(JurParser.SEMICOLON, 0); }
		public ExpressionStatementContext(StatementContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_statement);
		int _la;
		try {
			State = 303;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				_localctx = new BlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 236; Match(LEFT_CURLY);
				State = 240;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT_CURLY) | (1L << LEFT_PARENT) | (1L << STRING_VALUE) | (1L << NUMBER_VALUE) | (1L << BOOL_VALUE) | (1L << NULL_VALUE) | (1L << VOID) | (1L << RETURN) | (1L << BREAK) | (1L << CONTINUE) | (1L << EXIT) | (1L << IF) | (1L << NEW) | (1L << FOR) | (1L << LET) | (1L << ARROW) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
					{
					{
					State = 237; statement();
					}
					}
					State = 242;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 243; Match(RIGHT_CURLY);
				}
				break;
			case 2:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 244; Match(IF);
				State = 245; expression(0);
				State = 246; statement();
				State = 249;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
				case 1:
					{
					State = 247; Match(ELSE);
					State = 248; statement();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 251; Match(FOR);
				State = 258;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
				case 1:
					{
					State = 254;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
					case 1:
						{
						State = 252; initializedVariableDeclaration();
						}
						break;
					case 2:
						{
						State = 253; inferedVariableDeclaration();
						}
						break;
					}
					State = 256; Match(SEMICOLON);
					}
					break;
				}
				State = 260; expression(0);
				State = 263;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 261; Match(SEMICOLON);
					State = 262; expression(0);
					}
				}

				State = 265; statement();
				}
				break;
			case 4:
				_localctx = new ForeachStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 267; Match(FOR);
				State = 268; uninitializedVarDeclaration();
				State = 269;
				_la = TokenStream.LA(1);
				if ( !(_la==T__1 || _la==IN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 270; expression(0);
				State = 271; statement();
				}
				break;
			case 5:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 273; Match(RETURN);
				State = 275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT_PARENT) | (1L << STRING_VALUE) | (1L << NUMBER_VALUE) | (1L << BOOL_VALUE) | (1L << NULL_VALUE) | (1L << VOID) | (1L << NEW) | (1L << ARROW) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
					{
					State = 274; expression(0);
					}
				}

				State = 277; Match(SEMICOLON);
				}
				break;
			case 6:
				_localctx = new BreakStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 278; Match(BREAK);
				State = 279; Match(SEMICOLON);
				}
				break;
			case 7:
				_localctx = new ContinueStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 280; Match(CONTINUE);
				State = 281; Match(SEMICOLON);
				}
				break;
			case 8:
				_localctx = new InferedVariableDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 282; inferedVariableDeclaration();
				State = 283; Match(SEMICOLON);
				}
				break;
			case 9:
				_localctx = new InitializedVariableDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 285; initializedVariableDeclaration();
				State = 286; Match(SEMICOLON);
				}
				break;
			case 10:
				_localctx = new UninitializedVarDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 288; uninitializedVarDeclaration();
				State = 289; Match(SEMICOLON);
				}
				break;
			case 11:
				_localctx = new AssignmentStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 291; expression(0);
				State = 292; Match(ASSIGN);
				State = 293; expression(0);
				State = 294; Match(SEMICOLON);
				}
				break;
			case 12:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 296; expression(0);
				State = 297; Match(SEMICOLON);
				}
				break;
			case 13:
				_localctx = new ExitStatementContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 299; Match(EXIT);
				State = 300; Match(LEFT_PARENT);
				State = 301; Match(STRING_VALUE);
				State = 302; Match(RIGHT_PARENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode LEFT_CURLY() { return GetToken(JurParser.LEFT_CURLY, 0); }
		public ITerminalNode RIGHT_CURLY() { return GetToken(JurParser.RIGHT_CURLY, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 26, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305; Match(LEFT_CURLY);
			State = 309;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT_CURLY) | (1L << LEFT_PARENT) | (1L << STRING_VALUE) | (1L << NUMBER_VALUE) | (1L << BOOL_VALUE) | (1L << NULL_VALUE) | (1L << VOID) | (1L << RETURN) | (1L << BREAK) | (1L << CONTINUE) | (1L << EXIT) | (1L << IF) | (1L << NEW) | (1L << FOR) | (1L << LET) | (1L << ARROW) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
				{
				{
				State = 306; statement();
				}
				}
				State = 311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 312; Match(RIGHT_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariableAccessContext : ExpressionContext {
		public ITerminalNode ID() { return GetToken(JurParser.ID, 0); }
		public VariableAccessContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class AnonymusFunctionContext : ExpressionContext {
		public ITerminalNode ARROW() { return GetToken(JurParser.ARROW, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UninitializedVarDeclarationContext[] uninitializedVarDeclaration() {
			return GetRuleContexts<UninitializedVarDeclarationContext>();
		}
		public UninitializedVarDeclarationContext uninitializedVarDeclaration(int i) {
			return GetRuleContext<UninitializedVarDeclarationContext>(i);
		}
		public ITerminalNode LEFT_PARENT() { return GetToken(JurParser.LEFT_PARENT, 0); }
		public ITerminalNode RIGHT_PARENT() { return GetToken(JurParser.RIGHT_PARENT, 0); }
		public ITerminalNode[] COMA() { return GetTokens(JurParser.COMA); }
		public ITerminalNode COMA(int i) {
			return GetToken(JurParser.COMA, i);
		}
		public AnonymusFunctionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class PrimitiveValueContext : ExpressionContext {
		public IToken value;
		public ITerminalNode NUMBER_VALUE() { return GetToken(JurParser.NUMBER_VALUE, 0); }
		public ITerminalNode STRING_VALUE() { return GetToken(JurParser.STRING_VALUE, 0); }
		public ITerminalNode BOOL_VALUE() { return GetToken(JurParser.BOOL_VALUE, 0); }
		public ITerminalNode NULL_VALUE() { return GetToken(JurParser.NULL_VALUE, 0); }
		public PrimitiveValueContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class FunctionCallContext : ExpressionContext {
		public ITerminalNode ID() { return GetToken(JurParser.ID, 0); }
		public ITerminalNode LEFT_PARENT() { return GetToken(JurParser.LEFT_PARENT, 0); }
		public ITerminalNode RIGHT_PARENT() { return GetToken(JurParser.RIGHT_PARENT, 0); }
		public ITerminalNode[] LESS() { return GetTokens(JurParser.LESS); }
		public ITerminalNode LESS(int i) {
			return GetToken(JurParser.LESS, i);
		}
		public ITerminalNode POLY() { return GetToken(JurParser.POLY, 0); }
		public ITerminalNode[] GREATER() { return GetTokens(JurParser.GREATER); }
		public ITerminalNode GREATER(int i) {
			return GetToken(JurParser.GREATER, i);
		}
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMA() { return GetTokens(JurParser.COMA); }
		public ITerminalNode COMA(int i) {
			return GetToken(JurParser.COMA, i);
		}
		public ITerminalNode DOT() { return GetToken(JurParser.DOT, 0); }
		public FunctionCallContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class FieldAccessContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(JurParser.DOT, 0); }
		public ITerminalNode ID() { return GetToken(JurParser.ID, 0); }
		public FieldAccessContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class ArrayIndexAccessContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode LEFT_SQUARE_PARENT() { return GetToken(JurParser.LEFT_SQUARE_PARENT, 0); }
		public ITerminalNode RIGHT_SQUARE_PARENT() { return GetToken(JurParser.RIGHT_SQUARE_PARENT, 0); }
		public ArrayIndexAccessContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class ConstructorContext : ExpressionContext {
		public ITerminalNode NEW() { return GetToken(JurParser.NEW, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ConstructorContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class OperationContext : ExpressionContext {
		public IToken @operator;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TIMES() { return GetToken(JurParser.TIMES, 0); }
		public ITerminalNode DIVIDE() { return GetToken(JurParser.DIVIDE, 0); }
		public ITerminalNode ADD() { return GetToken(JurParser.ADD, 0); }
		public ITerminalNode SUBTRACT() { return GetToken(JurParser.SUBTRACT, 0); }
		public ITerminalNode LESS() { return GetToken(JurParser.LESS, 0); }
		public ITerminalNode GREATER() { return GetToken(JurParser.GREATER, 0); }
		public ITerminalNode LEQUAL() { return GetToken(JurParser.LEQUAL, 0); }
		public ITerminalNode GREQUAL() { return GetToken(JurParser.GREQUAL, 0); }
		public ITerminalNode EQUAL() { return GetToken(JurParser.EQUAL, 0); }
		public ITerminalNode IS() { return GetToken(JurParser.IS, 0); }
		public ITerminalNode NOT_EQUAL() { return GetToken(JurParser.NOT_EQUAL, 0); }
		public ITerminalNode AND() { return GetToken(JurParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(JurParser.OR, 0); }
		public OperationContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class ParExpressionContext : ExpressionContext {
		public ITerminalNode LEFT_PARENT() { return GetToken(JurParser.LEFT_PARENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RIGHT_PARENT() { return GetToken(JurParser.RIGHT_PARENT, 0); }
		public ParExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 379;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				_localctx = new VariableAccessContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 315; Match(ID);
				}
				break;
			case 2:
				{
				_localctx = new PrimitiveValueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 316;
				((PrimitiveValueContext)_localctx).value = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_VALUE) | (1L << NUMBER_VALUE) | (1L << BOOL_VALUE) | (1L << NULL_VALUE))) != 0)) ) {
					((PrimitiveValueContext)_localctx).value = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 3:
				{
				_localctx = new AnonymusFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 318;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
					{
					State = 317; uninitializedVarDeclaration();
					}
				}

				State = 320; Match(ARROW);
				State = 323;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LEFT_CURLY:
					{
					State = 321; block();
					}
					break;
				case LEFT_PARENT:
				case STRING_VALUE:
				case NUMBER_VALUE:
				case BOOL_VALUE:
				case NULL_VALUE:
				case VOID:
				case NEW:
				case ARROW:
				case PRIMITIVE:
				case ID:
					{
					State = 322; expression(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				{
				_localctx = new AnonymusFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 325; Match(LEFT_PARENT);
				State = 334;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
					{
					State = 326; uninitializedVarDeclaration();
					State = 331;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 327; Match(COMA);
						State = 328; uninitializedVarDeclaration();
						}
						}
						State = 333;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 336; Match(RIGHT_PARENT);
				State = 337; Match(ARROW);
				State = 340;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LEFT_CURLY:
					{
					State = 338; block();
					}
					break;
				case LEFT_PARENT:
				case STRING_VALUE:
				case NUMBER_VALUE:
				case BOOL_VALUE:
				case NULL_VALUE:
				case VOID:
				case NEW:
				case ARROW:
				case PRIMITIVE:
				case ID:
					{
					State = 339; expression(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 5:
				{
				_localctx = new FunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 342; Match(ID);
				State = 346;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
				case 1:
					{
					State = 343; Match(LESS);
					State = 344; Match(POLY);
					State = 345; Match(GREATER);
					}
					break;
				}
				State = 359;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LESS) {
					{
					State = 348; Match(LESS);
					State = 349; type(0);
					State = 354;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 350; Match(COMA);
						State = 351; type(0);
						}
						}
						State = 356;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 357; Match(GREATER);
					}
				}

				State = 361; Match(LEFT_PARENT);
				State = 370;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT_PARENT) | (1L << STRING_VALUE) | (1L << NUMBER_VALUE) | (1L << BOOL_VALUE) | (1L << NULL_VALUE) | (1L << VOID) | (1L << NEW) | (1L << ARROW) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
					{
					State = 362; expression(0);
					State = 367;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 363; Match(COMA);
						State = 364; expression(0);
						}
						}
						State = 369;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 372; Match(RIGHT_PARENT);
				}
				break;
			case 6:
				{
				_localctx = new ConstructorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 373; Match(NEW);
				State = 374; type(0);
				}
				break;
			case 7:
				{
				_localctx = new ParExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 375; Match(LEFT_PARENT);
				State = 376; expression(0);
				State = 377; Match(RIGHT_PARENT);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 442;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 440;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
					case 1:
						{
						_localctx = new OperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 381;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 382;
						((OperationContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==TIMES || _la==DIVIDE) ) {
							((OperationContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 383; expression(7);
						}
						break;
					case 2:
						{
						_localctx = new OperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 384;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 385;
						((OperationContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ADD || _la==SUBTRACT) ) {
							((OperationContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 386; expression(6);
						}
						break;
					case 3:
						{
						_localctx = new OperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 387;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 388;
						((OperationContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LESS) | (1L << LEQUAL) | (1L << GREATER) | (1L << GREQUAL))) != 0)) ) {
							((OperationContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 389; expression(5);
						}
						break;
					case 4:
						{
						_localctx = new OperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 390;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 391;
						((OperationContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQUAL) | (1L << IS) | (1L << NOT_EQUAL))) != 0)) ) {
							((OperationContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 392; expression(4);
						}
						break;
					case 5:
						{
						_localctx = new OperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 393;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 394; Match(AND);
						State = 395; expression(3);
						}
						break;
					case 6:
						{
						_localctx = new OperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 396;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 397; Match(OR);
						State = 398; expression(2);
						}
						break;
					case 7:
						{
						_localctx = new FunctionCallContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 399;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 400; Match(DOT);
						State = 401; Match(ID);
						State = 405;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
						case 1:
							{
							State = 402; Match(LESS);
							State = 403; Match(POLY);
							State = 404; Match(GREATER);
							}
							break;
						}
						State = 418;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==LESS) {
							{
							State = 407; Match(LESS);
							State = 408; type(0);
							State = 413;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==COMA) {
								{
								{
								State = 409; Match(COMA);
								State = 410; type(0);
								}
								}
								State = 415;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							State = 416; Match(GREATER);
							}
						}

						State = 420; Match(LEFT_PARENT);
						State = 429;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT_PARENT) | (1L << STRING_VALUE) | (1L << NUMBER_VALUE) | (1L << BOOL_VALUE) | (1L << NULL_VALUE) | (1L << VOID) | (1L << NEW) | (1L << ARROW) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
							{
							State = 421; expression(0);
							State = 426;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==COMA) {
								{
								{
								State = 422; Match(COMA);
								State = 423; expression(0);
								}
								}
								State = 428;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							}
						}

						State = 431; Match(RIGHT_PARENT);
						}
						break;
					case 8:
						{
						_localctx = new FieldAccessContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 432;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 433; Match(DOT);
						State = 434; Match(ID);
						}
						break;
					case 9:
						{
						_localctx = new ArrayIndexAccessContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 435;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 436; Match(LEFT_SQUARE_PARENT);
						State = 437; expression(0);
						State = 438; Match(RIGHT_SQUARE_PARENT);
						}
						break;
					}
					} 
				}
				State = 444;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 11: return type_sempred((TypeContext)_localctx, predIndex);
		case 14: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool type_sempred(TypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		case 5: return Precpred(Context, 3);
		case 6: return Precpred(Context, 2);
		case 7: return Precpred(Context, 1);
		case 8: return Precpred(Context, 11);
		case 9: return Precpred(Context, 10);
		case 10: return Precpred(Context, 8);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ';', '\x1C0', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x3', 
		'\x2', '\x3', '\x2', '\a', '\x2', '#', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '&', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\a', '\x4', '\x32', '\n', '\x4', '\f', '\x4', '\xE', 
		'\x4', '\x35', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x5', '\x5', ':', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x42', '\n', '\x5', 
		'\f', '\x5', '\xE', '\x5', '\x45', '\v', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'H', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\a', '\x5', 'O', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 
		'R', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\\', 
		'\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\a', '\a', '\x63', '\n', '\a', '\f', '\a', '\xE', '\a', '\x66', 
		'\v', '\a', '\x3', '\a', '\x5', '\a', 'i', '\n', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 'o', '\n', '\a', '\f', '\a', 
		'\xE', '\a', 'r', '\v', '\a', '\x5', '\a', 't', '\n', '\a', '\x3', '\a', 
		'\x3', '\a', '\x5', '\a', 'x', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', '~', '\n', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\x85', '\n', '\a', 
		'\f', '\a', '\xE', '\a', '\x88', '\v', '\a', '\x3', '\a', '\x5', '\a', 
		'\x8B', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\a', '\a', '\x91', '\n', '\a', '\f', '\a', '\xE', '\a', '\x94', '\v', 
		'\a', '\x5', '\a', '\x96', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', '\x9A', '\n', '\a', '\x5', '\a', '\x9C', '\n', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '\xA2', '\n', '\b', 
		'\f', '\b', '\xE', '\b', '\xA5', '\v', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x5', '\f', '\xBA', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\a', '\r', '\xC4', '\n', '\r', '\f', '\r', '\xE', '\r', '\xC7', '\v', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\a', '\r', '\xD0', '\n', '\r', '\f', '\r', 
		'\xE', '\r', '\xD3', '\v', '\r', '\x5', '\r', '\xD5', '\n', '\r', '\x3', 
		'\r', '\x5', '\r', '\xD8', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\xDF', '\n', '\r', '\f', 
		'\r', '\xE', '\r', '\xE2', '\v', '\r', '\x5', '\r', '\xE4', '\n', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\xEA', 
		'\n', '\r', '\f', '\r', '\xE', '\r', '\xED', '\v', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\a', '\xE', '\xF1', '\n', '\xE', '\f', '\xE', '\xE', '\xE', 
		'\xF4', '\v', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xFC', '\n', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x101', '\n', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x105', '\n', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x10A', '\n', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x5', '\xE', '\x116', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 
		'\x132', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\x136', 
		'\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x139', '\v', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x5', '\x10', '\x141', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x5', '\x10', '\x146', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\x14C', '\n', '\x10', '\f', 
		'\x10', '\xE', '\x10', '\x14F', '\v', '\x10', '\x5', '\x10', '\x151', 
		'\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x5', '\x10', '\x157', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x5', '\x10', '\x15D', '\n', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\x163', '\n', 
		'\x10', '\f', '\x10', '\xE', '\x10', '\x166', '\v', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x5', '\x10', '\x16A', '\n', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\x170', '\n', '\x10', 
		'\f', '\x10', '\xE', '\x10', '\x173', '\v', '\x10', '\x5', '\x10', '\x175', 
		'\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x17E', '\n', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', 
		'\x10', '\x198', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\a', '\x10', '\x19E', '\n', '\x10', '\f', '\x10', '\xE', 
		'\x10', '\x1A1', '\v', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\x1A5', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\a', '\x10', '\x1AB', '\n', '\x10', '\f', '\x10', '\xE', '\x10', 
		'\x1AE', '\v', '\x10', '\x5', '\x10', '\x1B0', '\n', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\x1BB', '\n', 
		'\x10', '\f', '\x10', '\xE', '\x10', '\x1BE', '\v', '\x10', '\x3', '\x10', 
		'\x2', '\x4', '\x18', '\x1E', '\x11', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		'\x2', '\b', '\x4', '\x2', '\x4', '\x4', '\x31', '\x31', '\x3', '\x2', 
		'!', '$', '\x3', '\x2', '\xF', '\x10', '\x3', '\x2', '\r', '\xE', '\x3', 
		'\x2', '\x17', '\x1A', '\x4', '\x2', '\x1B', '\x1C', '\x1E', '\x1E', '\x2', 
		'\x203', '\x2', '$', '\x3', '\x2', '\x2', '\x2', '\x4', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x6', ',', '\x3', '\x2', '\x2', '\x2', '\b', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\n', 'U', '\x3', '\x2', '\x2', '\x2', '\f', '\x9B', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\x9D', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\xA6', '\x3', '\x2', '\x2', '\x2', '\x12', '\xAA', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\xAD', '\x3', '\x2', '\x2', '\x2', '\x16', '\xB9', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\xD7', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x131', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x133', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x17D', '\x3', '\x2', '\x2', '\x2', ' ', '#', '\x5', 
		'\x4', '\x3', '\x2', '!', '#', '\x5', '\x6', '\x4', '\x2', '\"', ' ', 
		'\x3', '\x2', '\x2', '\x2', '\"', '!', '\x3', '\x2', '\x2', '\x2', '#', 
		'&', '\x3', '\x2', '\x2', '\x2', '$', '\"', '\x3', '\x2', '\x2', '\x2', 
		'$', '%', '\x3', '\x2', '\x2', '\x2', '%', '\'', '\x3', '\x2', '\x2', 
		'\x2', '&', '$', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\a', '\x2', '\x2', 
		'\x3', '(', '\x3', '\x3', '\x2', '\x2', '\x2', ')', '*', '\a', '/', '\x2', 
		'\x2', '*', '+', '\x5', '\x1A', '\xE', '\x2', '+', '\x5', '\x3', '\x2', 
		'\x2', '\x2', ',', '-', '\a', '.', '\x2', '\x2', '-', '.', '\a', '\"', 
		'\x2', '\x2', '.', '\x33', '\a', '\x11', '\x2', '\x2', '/', '\x32', '\x5', 
		'\f', '\a', '\x2', '\x30', '\x32', '\x5', '\b', '\x5', '\x2', '\x31', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x31', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\x35', '\x3', '\x2', '\x2', '\x2', '\x33', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '\x34', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x36', '\x3', '\x2', '\x2', '\x2', '\x35', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x36', '\x37', '\a', '\x12', '\x2', '\x2', '\x37', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x38', ':', '\a', '\x34', '\x2', '\x2', '\x39', 
		'\x38', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\x3', '\x2', '\x2', 
		'\x2', ':', ';', '\x3', '\x2', '\x2', '\x2', ';', '<', '\a', '&', '\x2', 
		'\x2', '<', 'G', '\a', ';', '\x2', '\x2', '=', '>', '\a', '\x17', '\x2', 
		'\x2', '>', '\x43', '\a', ';', '\x2', '\x2', '?', '@', '\a', '\b', '\x2', 
		'\x2', '@', '\x42', '\a', ';', '\x2', '\x2', '\x41', '?', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x45', '\x3', '\x2', '\x2', '\x2', '\x43', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x46', '\x3', '\x2', '\x2', '\x2', '\x45', '\x43', '\x3', '\x2', 
		'\x2', '\x2', '\x46', 'H', '\a', '\x19', '\x2', '\x2', 'G', '=', '\x3', 
		'\x2', '\x2', '\x2', 'G', 'H', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\x3', 
		'\x2', '\x2', '\x2', 'I', 'P', '\a', '\x11', '\x2', '\x2', 'J', 'K', '\x5', 
		'\x12', '\n', '\x2', 'K', 'L', '\a', '\n', '\x2', '\x2', 'L', 'O', '\x3', 
		'\x2', '\x2', '\x2', 'M', 'O', '\x5', '\n', '\x6', '\x2', 'N', 'J', '\x3', 
		'\x2', '\x2', '\x2', 'N', 'M', '\x3', '\x2', '\x2', '\x2', 'O', 'R', '\x3', 
		'\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\x3', 
		'\x2', '\x2', '\x2', 'Q', 'S', '\x3', '\x2', '\x2', '\x2', 'R', 'P', '\x3', 
		'\x2', '\x2', '\x2', 'S', 'T', '\a', '\x12', '\x2', '\x2', 'T', '\t', 
		'\x3', '\x2', '\x2', '\x2', 'U', 'V', '\a', '\x1C', '\x2', '\x2', 'V', 
		'W', '\x5', '\x18', '\r', '\x2', 'W', 'X', '\a', '\n', '\x2', '\x2', 'X', 
		'\v', '\x3', '\x2', '\x2', '\x2', 'Y', '\\', '\x5', '\x18', '\r', '\x2', 
		'Z', '\\', '\a', '\'', '\x2', '\x2', '[', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'[', 'Z', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\x3', '\x2', '\x2', 
		'\x2', ']', 'h', '\a', ';', '\x2', '\x2', '^', '_', '\a', '\x17', '\x2', 
		'\x2', '_', '\x64', '\a', ';', '\x2', '\x2', '`', '\x61', '\a', '\b', 
		'\x2', '\x2', '\x61', '\x63', '\a', ';', '\x2', '\x2', '\x62', '`', '\x3', 
		'\x2', '\x2', '\x2', '\x63', '\x66', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\x3', '\x2', '\x2', 
		'\x2', '\x65', 'g', '\x3', '\x2', '\x2', '\x2', '\x66', '\x64', '\x3', 
		'\x2', '\x2', '\x2', 'g', 'i', '\a', '\x19', '\x2', '\x2', 'h', '^', '\x3', 
		'\x2', '\x2', '\x2', 'h', 'i', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\x3', 
		'\x2', '\x2', '\x2', 'j', 's', '\a', '\x13', '\x2', '\x2', 'k', 'p', '\x5', 
		'\x12', '\n', '\x2', 'l', 'm', '\a', '\b', '\x2', '\x2', 'm', 'o', '\x5', 
		'\x12', '\n', '\x2', 'n', 'l', '\x3', '\x2', '\x2', '\x2', 'o', 'r', '\x3', 
		'\x2', '\x2', '\x2', 'p', 'n', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\x3', 
		'\x2', '\x2', '\x2', 'q', 't', '\x3', '\x2', '\x2', '\x2', 'r', 'p', '\x3', 
		'\x2', '\x2', '\x2', 's', 'k', '\x3', '\x2', '\x2', '\x2', 's', 't', '\x3', 
		'\x2', '\x2', '\x2', 't', 'u', '\x3', '\x2', '\x2', '\x2', 'u', 'w', '\a', 
		'\x14', '\x2', '\x2', 'v', 'x', '\x5', '\xE', '\b', '\x2', 'w', 'v', '\x3', 
		'\x2', '\x2', '\x2', 'w', 'x', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\x3', 
		'\x2', '\x2', '\x2', 'y', '\x9C', '\x5', '\x1A', '\xE', '\x2', 'z', '}', 
		'\a', '\x34', '\x2', '\x2', '{', '~', '\x5', '\x18', '\r', '\x2', '|', 
		'~', '\a', '\'', '\x2', '\x2', '}', '{', '\x3', '\x2', '\x2', '\x2', '}', 
		'|', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\x3', '\x2', '\x2', '\x2', 
		'\x7F', '\x8A', '\a', ';', '\x2', '\x2', '\x80', '\x81', '\a', '\x17', 
		'\x2', '\x2', '\x81', '\x86', '\a', ';', '\x2', '\x2', '\x82', '\x83', 
		'\a', '\b', '\x2', '\x2', '\x83', '\x85', '\a', ';', '\x2', '\x2', '\x84', 
		'\x82', '\x3', '\x2', '\x2', '\x2', '\x85', '\x88', '\x3', '\x2', '\x2', 
		'\x2', '\x86', '\x84', '\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\x3', 
		'\x2', '\x2', '\x2', '\x87', '\x89', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x86', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8B', '\a', '\x19', '\x2', 
		'\x2', '\x8A', '\x80', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\x8B', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\x95', '\a', '\x13', '\x2', '\x2', '\x8D', '\x92', '\x5', '\x12', '\n', 
		'\x2', '\x8E', '\x8F', '\a', '\b', '\x2', '\x2', '\x8F', '\x91', '\x5', 
		'\x12', '\n', '\x2', '\x90', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x91', 
		'\x94', '\x3', '\x2', '\x2', '\x2', '\x92', '\x90', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x93', '\x3', '\x2', '\x2', '\x2', '\x93', '\x96', '\x3', 
		'\x2', '\x2', '\x2', '\x94', '\x92', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\x3', '\x2', '\x2', 
		'\x2', '\x96', '\x97', '\x3', '\x2', '\x2', '\x2', '\x97', '\x99', '\a', 
		'\x14', '\x2', '\x2', '\x98', '\x9A', '\x5', '\xE', '\b', '\x2', '\x99', 
		'\x98', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\x3', '\x2', '\x2', 
		'\x2', '\x9A', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9B', '[', '\x3', 
		'\x2', '\x2', '\x2', '\x9B', 'z', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\a', '\x1D', '\x2', 
		'\x2', '\x9E', '\xA3', '\x5', '\x10', '\t', '\x2', '\x9F', '\xA0', '\a', 
		'\x1F', '\x2', '\x2', '\xA0', '\xA2', '\x5', '\x10', '\t', '\x2', '\xA1', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA5', '\x3', '\x2', '\x2', 
		'\x2', '\xA3', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\x3', 
		'\x2', '\x2', '\x2', '\xA4', '\xF', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\x5', '\x18', '\r', 
		'\x2', '\xA7', '\xA8', '\a', '\x1C', '\x2', '\x2', '\xA8', '\xA9', '\x5', 
		'\x18', '\r', '\x2', '\xA9', '\x11', '\x3', '\x2', '\x2', '\x2', '\xAA', 
		'\xAB', '\x5', '\x18', '\r', '\x2', '\xAB', '\xAC', '\a', ';', '\x2', 
		'\x2', '\xAC', '\x13', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\x5', 
		'\x18', '\r', '\x2', '\xAE', '\xAF', '\a', ';', '\x2', '\x2', '\xAF', 
		'\xB0', '\a', '\f', '\x2', '\x2', '\xB0', '\xB1', '\x5', '\x1E', '\x10', 
		'\x2', '\xB1', '\x15', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB3', '\a', 
		';', '\x2', '\x2', '\xB3', '\xB4', '\a', '\x3', '\x2', '\x2', '\xB4', 
		'\xBA', '\x5', '\x1E', '\x10', '\x2', '\xB5', '\xB6', '\a', '\x35', '\x2', 
		'\x2', '\xB6', '\xB7', '\a', ';', '\x2', '\x2', '\xB7', '\xB8', '\a', 
		'\f', '\x2', '\x2', '\xB8', '\xBA', '\x5', '\x1E', '\x10', '\x2', '\xB9', 
		'\xB2', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xB5', '\x3', '\x2', '\x2', 
		'\x2', '\xBA', '\x17', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBC', '\b', 
		'\r', '\x1', '\x2', '\xBC', '\xD8', '\a', '\x38', '\x2', '\x2', '\xBD', 
		'\xD8', '\a', ';', '\x2', '\x2', '\xBE', '\xBF', '\a', ';', '\x2', '\x2', 
		'\xBF', '\xC0', '\a', '\x17', '\x2', '\x2', '\xC0', '\xC5', '\x5', '\x18', 
		'\r', '\x2', '\xC1', '\xC2', '\a', '\b', '\x2', '\x2', '\xC2', '\xC4', 
		'\x5', '\x18', '\r', '\x2', '\xC3', '\xC1', '\x3', '\x2', '\x2', '\x2', 
		'\xC4', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC3', '\x3', '\x2', 
		'\x2', '\x2', '\xC5', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC8', 
		'\x3', '\x2', '\x2', '\x2', '\xC7', '\xC5', '\x3', '\x2', '\x2', '\x2', 
		'\xC8', '\xC9', '\a', '\x19', '\x2', '\x2', '\xC9', '\xD8', '\x3', '\x2', 
		'\x2', '\x2', '\xCA', '\xCB', '\a', '\'', '\x2', '\x2', '\xCB', '\xD4', 
		'\a', '\x13', '\x2', '\x2', '\xCC', '\xD1', '\x5', '\x18', '\r', '\x2', 
		'\xCD', '\xCE', '\a', '\b', '\x2', '\x2', '\xCE', '\xD0', '\x5', '\x18', 
		'\r', '\x2', '\xCF', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD3', 
		'\x3', '\x2', '\x2', '\x2', '\xD1', '\xCF', '\x3', '\x2', '\x2', '\x2', 
		'\xD1', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD5', '\x3', '\x2', 
		'\x2', '\x2', '\xD3', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xCC', 
		'\x3', '\x2', '\x2', '\x2', '\xD4', '\xD5', '\x3', '\x2', '\x2', '\x2', 
		'\xD5', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD8', '\a', '\x14', 
		'\x2', '\x2', '\xD7', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xBD', 
		'\x3', '\x2', '\x2', '\x2', '\xD7', '\xBE', '\x3', '\x2', '\x2', '\x2', 
		'\xD7', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xEB', '\x3', '\x2', 
		'\x2', '\x2', '\xD9', '\xDA', '\f', '\x5', '\x2', '\x2', '\xDA', '\xE3', 
		'\a', '\x13', '\x2', '\x2', '\xDB', '\xE0', '\x5', '\x18', '\r', '\x2', 
		'\xDC', '\xDD', '\a', '\b', '\x2', '\x2', '\xDD', '\xDF', '\x5', '\x18', 
		'\r', '\x2', '\xDE', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE2', 
		'\x3', '\x2', '\x2', '\x2', '\xE0', '\xDE', '\x3', '\x2', '\x2', '\x2', 
		'\xE0', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE4', '\x3', '\x2', 
		'\x2', '\x2', '\xE2', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xDB', 
		'\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', '\x3', '\x2', '\x2', '\x2', 
		'\xE4', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xEA', '\a', '\x14', 
		'\x2', '\x2', '\xE6', '\xE7', '\f', '\x3', '\x2', '\x2', '\xE7', '\xE8', 
		'\a', '\x15', '\x2', '\x2', '\xE8', '\xEA', '\a', '\x16', '\x2', '\x2', 
		'\xE9', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xE6', '\x3', '\x2', 
		'\x2', '\x2', '\xEA', '\xED', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xE9', 
		'\x3', '\x2', '\x2', '\x2', '\xEB', '\xEC', '\x3', '\x2', '\x2', '\x2', 
		'\xEC', '\x19', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEB', '\x3', '\x2', 
		'\x2', '\x2', '\xEE', '\xF2', '\a', '\x11', '\x2', '\x2', '\xEF', '\xF1', 
		'\x5', '\x1A', '\xE', '\x2', '\xF0', '\xEF', '\x3', '\x2', '\x2', '\x2', 
		'\xF1', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF0', '\x3', '\x2', 
		'\x2', '\x2', '\xF2', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF5', 
		'\x3', '\x2', '\x2', '\x2', '\xF4', '\xF2', '\x3', '\x2', '\x2', '\x2', 
		'\xF5', '\x132', '\a', '\x12', '\x2', '\x2', '\xF6', '\xF7', '\a', ',', 
		'\x2', '\x2', '\xF7', '\xF8', '\x5', '\x1E', '\x10', '\x2', '\xF8', '\xFB', 
		'\x5', '\x1A', '\xE', '\x2', '\xF9', '\xFA', '\a', '\x32', '\x2', '\x2', 
		'\xFA', '\xFC', '\x5', '\x1A', '\xE', '\x2', '\xFB', '\xF9', '\x3', '\x2', 
		'\x2', '\x2', '\xFB', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFC', '\x132', 
		'\x3', '\x2', '\x2', '\x2', '\xFD', '\x104', '\a', '\x33', '\x2', '\x2', 
		'\xFE', '\x101', '\x5', '\x14', '\v', '\x2', '\xFF', '\x101', '\x5', '\x16', 
		'\f', '\x2', '\x100', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x100', '\xFF', 
		'\x3', '\x2', '\x2', '\x2', '\x101', '\x102', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\x103', '\a', '\n', '\x2', '\x2', '\x103', '\x105', '\x3', '\x2', 
		'\x2', '\x2', '\x104', '\x100', '\x3', '\x2', '\x2', '\x2', '\x104', '\x105', 
		'\x3', '\x2', '\x2', '\x2', '\x105', '\x106', '\x3', '\x2', '\x2', '\x2', 
		'\x106', '\x109', '\x5', '\x1E', '\x10', '\x2', '\x107', '\x108', '\a', 
		'\n', '\x2', '\x2', '\x108', '\x10A', '\x5', '\x1E', '\x10', '\x2', '\x109', 
		'\x107', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10A', '\x3', '\x2', '\x2', 
		'\x2', '\x10A', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10C', 
		'\x5', '\x1A', '\xE', '\x2', '\x10C', '\x132', '\x3', '\x2', '\x2', '\x2', 
		'\x10D', '\x10E', '\a', '\x33', '\x2', '\x2', '\x10E', '\x10F', '\x5', 
		'\x12', '\n', '\x2', '\x10F', '\x110', '\t', '\x2', '\x2', '\x2', '\x110', 
		'\x111', '\x5', '\x1E', '\x10', '\x2', '\x111', '\x112', '\x5', '\x1A', 
		'\xE', '\x2', '\x112', '\x132', '\x3', '\x2', '\x2', '\x2', '\x113', '\x115', 
		'\a', '(', '\x2', '\x2', '\x114', '\x116', '\x5', '\x1E', '\x10', '\x2', 
		'\x115', '\x114', '\x3', '\x2', '\x2', '\x2', '\x115', '\x116', '\x3', 
		'\x2', '\x2', '\x2', '\x116', '\x117', '\x3', '\x2', '\x2', '\x2', '\x117', 
		'\x132', '\a', '\n', '\x2', '\x2', '\x118', '\x119', '\a', ')', '\x2', 
		'\x2', '\x119', '\x132', '\a', '\n', '\x2', '\x2', '\x11A', '\x11B', '\a', 
		'*', '\x2', '\x2', '\x11B', '\x132', '\a', '\n', '\x2', '\x2', '\x11C', 
		'\x11D', '\x5', '\x16', '\f', '\x2', '\x11D', '\x11E', '\a', '\n', '\x2', 
		'\x2', '\x11E', '\x132', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x120', 
		'\x5', '\x14', '\v', '\x2', '\x120', '\x121', '\a', '\n', '\x2', '\x2', 
		'\x121', '\x132', '\x3', '\x2', '\x2', '\x2', '\x122', '\x123', '\x5', 
		'\x12', '\n', '\x2', '\x123', '\x124', '\a', '\n', '\x2', '\x2', '\x124', 
		'\x132', '\x3', '\x2', '\x2', '\x2', '\x125', '\x126', '\x5', '\x1E', 
		'\x10', '\x2', '\x126', '\x127', '\a', '\f', '\x2', '\x2', '\x127', '\x128', 
		'\x5', '\x1E', '\x10', '\x2', '\x128', '\x129', '\a', '\n', '\x2', '\x2', 
		'\x129', '\x132', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x12B', '\x5', 
		'\x1E', '\x10', '\x2', '\x12B', '\x12C', '\a', '\n', '\x2', '\x2', '\x12C', 
		'\x132', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12E', '\a', '+', '\x2', 
		'\x2', '\x12E', '\x12F', '\a', '\x13', '\x2', '\x2', '\x12F', '\x130', 
		'\a', '!', '\x2', '\x2', '\x130', '\x132', '\a', '\x14', '\x2', '\x2', 
		'\x131', '\xEE', '\x3', '\x2', '\x2', '\x2', '\x131', '\xF6', '\x3', '\x2', 
		'\x2', '\x2', '\x131', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x131', '\x10D', 
		'\x3', '\x2', '\x2', '\x2', '\x131', '\x113', '\x3', '\x2', '\x2', '\x2', 
		'\x131', '\x118', '\x3', '\x2', '\x2', '\x2', '\x131', '\x11A', '\x3', 
		'\x2', '\x2', '\x2', '\x131', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x131', 
		'\x11F', '\x3', '\x2', '\x2', '\x2', '\x131', '\x122', '\x3', '\x2', '\x2', 
		'\x2', '\x131', '\x125', '\x3', '\x2', '\x2', '\x2', '\x131', '\x12A', 
		'\x3', '\x2', '\x2', '\x2', '\x131', '\x12D', '\x3', '\x2', '\x2', '\x2', 
		'\x132', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x133', '\x137', '\a', '\x11', 
		'\x2', '\x2', '\x134', '\x136', '\x5', '\x1A', '\xE', '\x2', '\x135', 
		'\x134', '\x3', '\x2', '\x2', '\x2', '\x136', '\x139', '\x3', '\x2', '\x2', 
		'\x2', '\x137', '\x135', '\x3', '\x2', '\x2', '\x2', '\x137', '\x138', 
		'\x3', '\x2', '\x2', '\x2', '\x138', '\x13A', '\x3', '\x2', '\x2', '\x2', 
		'\x139', '\x137', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x13B', '\a', 
		'\x12', '\x2', '\x2', '\x13B', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x13C', 
		'\x13D', '\b', '\x10', '\x1', '\x2', '\x13D', '\x17E', '\a', ';', '\x2', 
		'\x2', '\x13E', '\x17E', '\t', '\x3', '\x2', '\x2', '\x13F', '\x141', 
		'\x5', '\x12', '\n', '\x2', '\x140', '\x13F', '\x3', '\x2', '\x2', '\x2', 
		'\x140', '\x141', '\x3', '\x2', '\x2', '\x2', '\x141', '\x142', '\x3', 
		'\x2', '\x2', '\x2', '\x142', '\x145', '\a', '\x37', '\x2', '\x2', '\x143', 
		'\x146', '\x5', '\x1C', '\xF', '\x2', '\x144', '\x146', '\x5', '\x1E', 
		'\x10', '\x2', '\x145', '\x143', '\x3', '\x2', '\x2', '\x2', '\x145', 
		'\x144', '\x3', '\x2', '\x2', '\x2', '\x146', '\x17E', '\x3', '\x2', '\x2', 
		'\x2', '\x147', '\x150', '\a', '\x13', '\x2', '\x2', '\x148', '\x14D', 
		'\x5', '\x12', '\n', '\x2', '\x149', '\x14A', '\a', '\b', '\x2', '\x2', 
		'\x14A', '\x14C', '\x5', '\x12', '\n', '\x2', '\x14B', '\x149', '\x3', 
		'\x2', '\x2', '\x2', '\x14C', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x14D', 
		'\x14B', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x14E', '\x3', '\x2', '\x2', 
		'\x2', '\x14E', '\x151', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x14D', 
		'\x3', '\x2', '\x2', '\x2', '\x150', '\x148', '\x3', '\x2', '\x2', '\x2', 
		'\x150', '\x151', '\x3', '\x2', '\x2', '\x2', '\x151', '\x152', '\x3', 
		'\x2', '\x2', '\x2', '\x152', '\x153', '\a', '\x14', '\x2', '\x2', '\x153', 
		'\x156', '\a', '\x37', '\x2', '\x2', '\x154', '\x157', '\x5', '\x1C', 
		'\xF', '\x2', '\x155', '\x157', '\x5', '\x1E', '\x10', '\x2', '\x156', 
		'\x154', '\x3', '\x2', '\x2', '\x2', '\x156', '\x155', '\x3', '\x2', '\x2', 
		'\x2', '\x157', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x158', '\x15C', 
		'\a', ';', '\x2', '\x2', '\x159', '\x15A', '\a', '\x17', '\x2', '\x2', 
		'\x15A', '\x15B', '\a', '\x36', '\x2', '\x2', '\x15B', '\x15D', '\a', 
		'\x19', '\x2', '\x2', '\x15C', '\x159', '\x3', '\x2', '\x2', '\x2', '\x15C', 
		'\x15D', '\x3', '\x2', '\x2', '\x2', '\x15D', '\x169', '\x3', '\x2', '\x2', 
		'\x2', '\x15E', '\x15F', '\a', '\x17', '\x2', '\x2', '\x15F', '\x164', 
		'\x5', '\x18', '\r', '\x2', '\x160', '\x161', '\a', '\b', '\x2', '\x2', 
		'\x161', '\x163', '\x5', '\x18', '\r', '\x2', '\x162', '\x160', '\x3', 
		'\x2', '\x2', '\x2', '\x163', '\x166', '\x3', '\x2', '\x2', '\x2', '\x164', 
		'\x162', '\x3', '\x2', '\x2', '\x2', '\x164', '\x165', '\x3', '\x2', '\x2', 
		'\x2', '\x165', '\x167', '\x3', '\x2', '\x2', '\x2', '\x166', '\x164', 
		'\x3', '\x2', '\x2', '\x2', '\x167', '\x168', '\a', '\x19', '\x2', '\x2', 
		'\x168', '\x16A', '\x3', '\x2', '\x2', '\x2', '\x169', '\x15E', '\x3', 
		'\x2', '\x2', '\x2', '\x169', '\x16A', '\x3', '\x2', '\x2', '\x2', '\x16A', 
		'\x16B', '\x3', '\x2', '\x2', '\x2', '\x16B', '\x174', '\a', '\x13', '\x2', 
		'\x2', '\x16C', '\x171', '\x5', '\x1E', '\x10', '\x2', '\x16D', '\x16E', 
		'\a', '\b', '\x2', '\x2', '\x16E', '\x170', '\x5', '\x1E', '\x10', '\x2', 
		'\x16F', '\x16D', '\x3', '\x2', '\x2', '\x2', '\x170', '\x173', '\x3', 
		'\x2', '\x2', '\x2', '\x171', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x171', 
		'\x172', '\x3', '\x2', '\x2', '\x2', '\x172', '\x175', '\x3', '\x2', '\x2', 
		'\x2', '\x173', '\x171', '\x3', '\x2', '\x2', '\x2', '\x174', '\x16C', 
		'\x3', '\x2', '\x2', '\x2', '\x174', '\x175', '\x3', '\x2', '\x2', '\x2', 
		'\x175', '\x176', '\x3', '\x2', '\x2', '\x2', '\x176', '\x17E', '\a', 
		'\x14', '\x2', '\x2', '\x177', '\x178', '\a', '\x30', '\x2', '\x2', '\x178', 
		'\x17E', '\x5', '\x18', '\r', '\x2', '\x179', '\x17A', '\a', '\x13', '\x2', 
		'\x2', '\x17A', '\x17B', '\x5', '\x1E', '\x10', '\x2', '\x17B', '\x17C', 
		'\a', '\x14', '\x2', '\x2', '\x17C', '\x17E', '\x3', '\x2', '\x2', '\x2', 
		'\x17D', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x13E', '\x3', 
		'\x2', '\x2', '\x2', '\x17D', '\x140', '\x3', '\x2', '\x2', '\x2', '\x17D', 
		'\x147', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x158', '\x3', '\x2', '\x2', 
		'\x2', '\x17D', '\x177', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x179', 
		'\x3', '\x2', '\x2', '\x2', '\x17E', '\x1BC', '\x3', '\x2', '\x2', '\x2', 
		'\x17F', '\x180', '\f', '\b', '\x2', '\x2', '\x180', '\x181', '\t', '\x4', 
		'\x2', '\x2', '\x181', '\x1BB', '\x5', '\x1E', '\x10', '\t', '\x182', 
		'\x183', '\f', '\a', '\x2', '\x2', '\x183', '\x184', '\t', '\x5', '\x2', 
		'\x2', '\x184', '\x1BB', '\x5', '\x1E', '\x10', '\b', '\x185', '\x186', 
		'\f', '\x6', '\x2', '\x2', '\x186', '\x187', '\t', '\x6', '\x2', '\x2', 
		'\x187', '\x1BB', '\x5', '\x1E', '\x10', '\a', '\x188', '\x189', '\f', 
		'\x5', '\x2', '\x2', '\x189', '\x18A', '\t', '\a', '\x2', '\x2', '\x18A', 
		'\x1BB', '\x5', '\x1E', '\x10', '\x6', '\x18B', '\x18C', '\f', '\x4', 
		'\x2', '\x2', '\x18C', '\x18D', '\a', '\x1F', '\x2', '\x2', '\x18D', '\x1BB', 
		'\x5', '\x1E', '\x10', '\x5', '\x18E', '\x18F', '\f', '\x3', '\x2', '\x2', 
		'\x18F', '\x190', '\a', ' ', '\x2', '\x2', '\x190', '\x1BB', '\x5', '\x1E', 
		'\x10', '\x4', '\x191', '\x192', '\f', '\r', '\x2', '\x2', '\x192', '\x193', 
		'\a', '\t', '\x2', '\x2', '\x193', '\x197', '\a', ';', '\x2', '\x2', '\x194', 
		'\x195', '\a', '\x17', '\x2', '\x2', '\x195', '\x196', '\a', '\x36', '\x2', 
		'\x2', '\x196', '\x198', '\a', '\x19', '\x2', '\x2', '\x197', '\x194', 
		'\x3', '\x2', '\x2', '\x2', '\x197', '\x198', '\x3', '\x2', '\x2', '\x2', 
		'\x198', '\x1A4', '\x3', '\x2', '\x2', '\x2', '\x199', '\x19A', '\a', 
		'\x17', '\x2', '\x2', '\x19A', '\x19F', '\x5', '\x18', '\r', '\x2', '\x19B', 
		'\x19C', '\a', '\b', '\x2', '\x2', '\x19C', '\x19E', '\x5', '\x18', '\r', 
		'\x2', '\x19D', '\x19B', '\x3', '\x2', '\x2', '\x2', '\x19E', '\x1A1', 
		'\x3', '\x2', '\x2', '\x2', '\x19F', '\x19D', '\x3', '\x2', '\x2', '\x2', 
		'\x19F', '\x1A0', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x1A2', '\x3', 
		'\x2', '\x2', '\x2', '\x1A1', '\x19F', '\x3', '\x2', '\x2', '\x2', '\x1A2', 
		'\x1A3', '\a', '\x19', '\x2', '\x2', '\x1A3', '\x1A5', '\x3', '\x2', '\x2', 
		'\x2', '\x1A4', '\x199', '\x3', '\x2', '\x2', '\x2', '\x1A4', '\x1A5', 
		'\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A6', '\x3', '\x2', '\x2', '\x2', 
		'\x1A6', '\x1AF', '\a', '\x13', '\x2', '\x2', '\x1A7', '\x1AC', '\x5', 
		'\x1E', '\x10', '\x2', '\x1A8', '\x1A9', '\a', '\b', '\x2', '\x2', '\x1A9', 
		'\x1AB', '\x5', '\x1E', '\x10', '\x2', '\x1AA', '\x1A8', '\x3', '\x2', 
		'\x2', '\x2', '\x1AB', '\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1AA', 
		'\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1AD', '\x3', '\x2', '\x2', '\x2', 
		'\x1AD', '\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1AC', '\x3', 
		'\x2', '\x2', '\x2', '\x1AF', '\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1AF', 
		'\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\x1B1', '\x3', '\x2', '\x2', 
		'\x2', '\x1B1', '\x1BB', '\a', '\x14', '\x2', '\x2', '\x1B2', '\x1B3', 
		'\f', '\f', '\x2', '\x2', '\x1B3', '\x1B4', '\a', '\t', '\x2', '\x2', 
		'\x1B4', '\x1BB', '\a', ';', '\x2', '\x2', '\x1B5', '\x1B6', '\f', '\n', 
		'\x2', '\x2', '\x1B6', '\x1B7', '\a', '\x15', '\x2', '\x2', '\x1B7', '\x1B8', 
		'\x5', '\x1E', '\x10', '\x2', '\x1B8', '\x1B9', '\a', '\x16', '\x2', '\x2', 
		'\x1B9', '\x1BB', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x17F', '\x3', 
		'\x2', '\x2', '\x2', '\x1BA', '\x182', '\x3', '\x2', '\x2', '\x2', '\x1BA', 
		'\x185', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x188', '\x3', '\x2', '\x2', 
		'\x2', '\x1BA', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x18E', 
		'\x3', '\x2', '\x2', '\x2', '\x1BA', '\x191', '\x3', '\x2', '\x2', '\x2', 
		'\x1BA', '\x1B2', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1B5', '\x3', 
		'\x2', '\x2', '\x2', '\x1BB', '\x1BE', '\x3', '\x2', '\x2', '\x2', '\x1BC', 
		'\x1BA', '\x3', '\x2', '\x2', '\x2', '\x1BC', '\x1BD', '\x3', '\x2', '\x2', 
		'\x2', '\x1BD', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1BC', 
		'\x3', '\x2', '\x2', '\x2', '<', '\"', '$', '\x31', '\x33', '\x39', '\x43', 
		'G', 'N', 'P', '[', '\x64', 'h', 'p', 's', 'w', '}', '\x86', '\x8A', '\x92', 
		'\x95', '\x99', '\x9B', '\xA3', '\xB9', '\xC5', '\xD1', '\xD4', '\xD7', 
		'\xE0', '\xE3', '\xE9', '\xEB', '\xF2', '\xFB', '\x100', '\x104', '\x109', 
		'\x115', '\x131', '\x137', '\x140', '\x145', '\x14D', '\x150', '\x156', 
		'\x15C', '\x164', '\x169', '\x171', '\x174', '\x17D', '\x197', '\x19F', 
		'\x1A4', '\x1AC', '\x1AF', '\x1BA', '\x1BC',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
