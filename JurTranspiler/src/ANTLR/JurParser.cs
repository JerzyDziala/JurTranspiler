//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/jerzydziala/Documents/repos/JurTranspiler/JurTranspiler/src/ANTLR/Jur.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class JurParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, LINE_COMMENT=2, WHITESPACE=3, NEWLINE=4, COMA=5, DOT=6, SEMICOLON=7, 
		ASSIGN=8, ADD=9, SUBTRACT=10, TIMES=11, DIVIDE=12, LEFT_CURLY=13, RIGHT_CURLY=14, 
		LEFT_PARENT=15, RIGHT_PARENT=16, LEFT_SQUARE_PARENT=17, RIGHT_SQUARE_PARENT=18, 
		LESS=19, LEQUAL=20, GREATER=21, GREQUAL=22, EQUAL=23, WHERE=24, NOT_EQUAL=25, 
		NOT=26, LOGICAL_AND=27, OR=28, DECREMENT=29, INCREMENT=30, STRING_VALUE=31, 
		CHAR_VALUE=32, NUMBER_VALUE=33, BOOL_VALUE=34, VALUE=35, NOMINAL=36, STRUCT=37, 
		VOID=38, ANY=39, RETURN=40, IF=41, ABSTRACTION=42, MAIN=43, NEW=44, MUTABLE=45, 
		IS=46, AND=47, DEFAULT_VALUE=48, TYPE=49, ELSE=50, FOR=51, EXTERN=52, 
		POLY=53, ARROW=54, MEMBER=55, STATIC=56, PRIVATE=57, PRIMITIVE=58, ARITHMETIC=59, 
		LOGIC=60, ID=61;
	public const int
		RULE_program = 0, RULE_main = 1, RULE_abstraction = 2, RULE_structDeclaration = 3, 
		RULE_inlinedType = 4, RULE_functionDeclaration = 5, RULE_constraints = 6, 
		RULE_constrain = 7, RULE_uninitializedVarDeclaration = 8, RULE_initializedVariableDeclaration = 9, 
		RULE_inferedVariableDeclaration = 10, RULE_type = 11, RULE_statement = 12, 
		RULE_block = 13, RULE_expression = 14;
	public static readonly string[] ruleNames = {
		"program", "main", "abstraction", "structDeclaration", "inlinedType", 
		"functionDeclaration", "constraints", "constrain", "uninitializedVarDeclaration", 
		"initializedVariableDeclaration", "inferedVariableDeclaration", "type", 
		"statement", "block", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "':='", null, null, null, "','", "'.'", "';'", "'='", "'+'", "'-'", 
		"'*'", "'/'", "'{'", "'}'", "'('", "')'", "'['", "']'", "'<'", "'<='", 
		"'>'", "'>='", "'=='", "'where'", "'!='", "'!'", "'&&'", "'||'", "'--'", 
		"'++'", null, null, null, null, null, "'nominal'", "'struct'", "'void'", 
		"'any'", "'return'", "'if'", "'abstraction'", "'main'", "'new'", "'mutable'", 
		"'is'", "'and'", "'default'", "'typeof'", "'else'", "'for'", "'extern'", 
		"'poly'", "'->'", "'member'", "'static'", "'private'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "LINE_COMMENT", "WHITESPACE", "NEWLINE", "COMA", "DOT", "SEMICOLON", 
		"ASSIGN", "ADD", "SUBTRACT", "TIMES", "DIVIDE", "LEFT_CURLY", "RIGHT_CURLY", 
		"LEFT_PARENT", "RIGHT_PARENT", "LEFT_SQUARE_PARENT", "RIGHT_SQUARE_PARENT", 
		"LESS", "LEQUAL", "GREATER", "GREQUAL", "EQUAL", "WHERE", "NOT_EQUAL", 
		"NOT", "LOGICAL_AND", "OR", "DECREMENT", "INCREMENT", "STRING_VALUE", 
		"CHAR_VALUE", "NUMBER_VALUE", "BOOL_VALUE", "VALUE", "NOMINAL", "STRUCT", 
		"VOID", "ANY", "RETURN", "IF", "ABSTRACTION", "MAIN", "NEW", "MUTABLE", 
		"IS", "AND", "DEFAULT_VALUE", "TYPE", "ELSE", "FOR", "EXTERN", "POLY", 
		"ARROW", "MEMBER", "STATIC", "PRIVATE", "PRIMITIVE", "ARITHMETIC", "LOGIC", 
		"ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Jur.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JurParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JurParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JurParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(JurParser.Eof, 0); }
		public MainContext[] main() {
			return GetRuleContexts<MainContext>();
		}
		public MainContext main(int i) {
			return GetRuleContext<MainContext>(i);
		}
		public AbstractionContext[] abstraction() {
			return GetRuleContexts<AbstractionContext>();
		}
		public AbstractionContext abstraction(int i) {
			return GetRuleContext<AbstractionContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ABSTRACTION || _la==MAIN) {
				{
				State = 32;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case MAIN:
					{
					State = 30; main();
					}
					break;
				case ABSTRACTION:
					{
					State = 31; abstraction();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 36;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 37; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainContext : ParserRuleContext {
		public ITerminalNode MAIN() { return GetToken(JurParser.MAIN, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 2, RULE_main);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39; Match(MAIN);
			State = 40; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractionContext : ParserRuleContext {
		public ITerminalNode ABSTRACTION() { return GetToken(JurParser.ABSTRACTION, 0); }
		public ITerminalNode NUMBER_VALUE() { return GetToken(JurParser.NUMBER_VALUE, 0); }
		public ITerminalNode LEFT_CURLY() { return GetToken(JurParser.LEFT_CURLY, 0); }
		public ITerminalNode RIGHT_CURLY() { return GetToken(JurParser.RIGHT_CURLY, 0); }
		public FunctionDeclarationContext[] functionDeclaration() {
			return GetRuleContexts<FunctionDeclarationContext>();
		}
		public FunctionDeclarationContext functionDeclaration(int i) {
			return GetRuleContext<FunctionDeclarationContext>(i);
		}
		public StructDeclarationContext[] structDeclaration() {
			return GetRuleContexts<StructDeclarationContext>();
		}
		public StructDeclarationContext structDeclaration(int i) {
			return GetRuleContext<StructDeclarationContext>(i);
		}
		public AbstractionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstraction; } }
	}

	[RuleVersion(0)]
	public AbstractionContext abstraction() {
		AbstractionContext _localctx = new AbstractionContext(Context, State);
		EnterRule(_localctx, 4, RULE_abstraction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42; Match(ABSTRACTION);
			State = 43; Match(NUMBER_VALUE);
			State = 44; Match(LEFT_CURLY);
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NOMINAL) | (1L << STRUCT) | (1L << VOID) | (1L << ANY) | (1L << EXTERN) | (1L << STATIC) | (1L << PRIVATE) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
				{
				State = 47;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VOID:
				case ANY:
				case EXTERN:
				case STATIC:
				case PRIVATE:
				case PRIMITIVE:
				case ID:
					{
					State = 45; functionDeclaration();
					}
					break;
				case NOMINAL:
				case STRUCT:
					{
					State = 46; structDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 52; Match(RIGHT_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationContext : ParserRuleContext {
		public ITerminalNode STRUCT() { return GetToken(JurParser.STRUCT, 0); }
		public ITerminalNode[] ID() { return GetTokens(JurParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(JurParser.ID, i);
		}
		public ITerminalNode LEFT_CURLY() { return GetToken(JurParser.LEFT_CURLY, 0); }
		public ITerminalNode RIGHT_CURLY() { return GetToken(JurParser.RIGHT_CURLY, 0); }
		public ITerminalNode NOMINAL() { return GetToken(JurParser.NOMINAL, 0); }
		public ITerminalNode LESS() { return GetToken(JurParser.LESS, 0); }
		public ITerminalNode GREATER() { return GetToken(JurParser.GREATER, 0); }
		public InlinedTypeContext[] inlinedType() {
			return GetRuleContexts<InlinedTypeContext>();
		}
		public InlinedTypeContext inlinedType(int i) {
			return GetRuleContext<InlinedTypeContext>(i);
		}
		public UninitializedVarDeclarationContext[] uninitializedVarDeclaration() {
			return GetRuleContexts<UninitializedVarDeclarationContext>();
		}
		public UninitializedVarDeclarationContext uninitializedVarDeclaration(int i) {
			return GetRuleContext<UninitializedVarDeclarationContext>(i);
		}
		public ITerminalNode[] COMA() { return GetTokens(JurParser.COMA); }
		public ITerminalNode COMA(int i) {
			return GetToken(JurParser.COMA, i);
		}
		public ITerminalNode[] PRIVATE() { return GetTokens(JurParser.PRIVATE); }
		public ITerminalNode PRIVATE(int i) {
			return GetToken(JurParser.PRIVATE, i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(JurParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(JurParser.SEMICOLON, i);
		}
		public StructDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaration; } }
	}

	[RuleVersion(0)]
	public StructDeclarationContext structDeclaration() {
		StructDeclarationContext _localctx = new StructDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_structDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOMINAL) {
				{
				State = 54; Match(NOMINAL);
				}
			}

			State = 57; Match(STRUCT);
			State = 58; Match(ID);
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LESS) {
				{
				State = 59; Match(LESS);
				State = 60; Match(ID);
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMA) {
					{
					{
					State = 61; Match(COMA);
					State = 62; Match(ID);
					}
					}
					State = 67;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 68; Match(GREATER);
				}
			}

			State = 71; Match(LEFT_CURLY);
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << ANY) | (1L << MUTABLE) | (1L << IS) | (1L << PRIVATE) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
				{
				State = 80;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VOID:
				case ANY:
				case MUTABLE:
				case PRIVATE:
				case PRIMITIVE:
				case ID:
					{
					{
					State = 73;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==PRIVATE) {
						{
						State = 72; Match(PRIVATE);
						}
					}

					State = 75; uninitializedVarDeclaration();
					State = 77;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==SEMICOLON) {
						{
						State = 76; Match(SEMICOLON);
						}
					}

					}
					}
					break;
				case IS:
					{
					State = 79; inlinedType();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 85; Match(RIGHT_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlinedTypeContext : ParserRuleContext {
		public ITerminalNode IS() { return GetToken(JurParser.IS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(JurParser.SEMICOLON, 0); }
		public InlinedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlinedType; } }
	}

	[RuleVersion(0)]
	public InlinedTypeContext inlinedType() {
		InlinedTypeContext _localctx = new InlinedTypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_inlinedType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87; Match(IS);
			State = 88; type(0);
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 89; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(JurParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(JurParser.ID, i);
		}
		public ITerminalNode LEFT_PARENT() { return GetToken(JurParser.LEFT_PARENT, 0); }
		public ITerminalNode RIGHT_PARENT() { return GetToken(JurParser.RIGHT_PARENT, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(JurParser.VOID, 0); }
		public ITerminalNode PRIVATE() { return GetToken(JurParser.PRIVATE, 0); }
		public ITerminalNode LESS() { return GetToken(JurParser.LESS, 0); }
		public ITerminalNode GREATER() { return GetToken(JurParser.GREATER, 0); }
		public UninitializedVarDeclarationContext[] uninitializedVarDeclaration() {
			return GetRuleContexts<UninitializedVarDeclarationContext>();
		}
		public UninitializedVarDeclarationContext uninitializedVarDeclaration(int i) {
			return GetRuleContext<UninitializedVarDeclarationContext>(i);
		}
		public ConstraintsContext constraints() {
			return GetRuleContext<ConstraintsContext>(0);
		}
		public ITerminalNode[] COMA() { return GetTokens(JurParser.COMA); }
		public ITerminalNode COMA(int i) {
			return GetToken(JurParser.COMA, i);
		}
		public ITerminalNode ARROW() { return GetToken(JurParser.ARROW, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(JurParser.SEMICOLON, 0); }
		public ITerminalNode EXTERN() { return GetToken(JurParser.EXTERN, 0); }
		public ITerminalNode MEMBER() { return GetToken(JurParser.MEMBER, 0); }
		public ITerminalNode STATIC() { return GetToken(JurParser.STATIC, 0); }
		public ITerminalNode DOT() { return GetToken(JurParser.DOT, 0); }
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_functionDeclaration);
		int _la;
		try {
			State = 246;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 93;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIVATE) {
					{
					State = 92; Match(PRIVATE);
					}
				}

				State = 97;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
				case 1:
					{
					State = 95; type(0);
					}
					break;
				case 2:
					{
					State = 96; Match(VOID);
					}
					break;
				}
				State = 99; Match(ID);
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LESS) {
					{
					State = 100; Match(LESS);
					State = 101; Match(ID);
					State = 106;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 102; Match(COMA);
						State = 103; Match(ID);
						}
						}
						State = 108;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 109; Match(GREATER);
					}
				}

				State = 112; Match(LEFT_PARENT);
				State = 121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << ANY) | (1L << MUTABLE) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
					{
					State = 113; uninitializedVarDeclaration();
					State = 118;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 114; Match(COMA);
						State = 115; uninitializedVarDeclaration();
						}
						}
						State = 120;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 123; Match(RIGHT_PARENT);
				State = 125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 124; constraints();
					}
				}

				State = 127; block();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIVATE) {
					{
					State = 128; Match(PRIVATE);
					}
				}

				State = 133;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
				case 1:
					{
					State = 131; type(0);
					}
					break;
				case 2:
					{
					State = 132; Match(VOID);
					}
					break;
				}
				State = 135; Match(ID);
				State = 146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LESS) {
					{
					State = 136; Match(LESS);
					State = 137; Match(ID);
					State = 142;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 138; Match(COMA);
						State = 139; Match(ID);
						}
						}
						State = 144;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 145; Match(GREATER);
					}
				}

				State = 148; Match(LEFT_PARENT);
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << ANY) | (1L << MUTABLE) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
					{
					State = 149; uninitializedVarDeclaration();
					State = 154;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 150; Match(COMA);
						State = 151; uninitializedVarDeclaration();
						}
						}
						State = 156;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 159; Match(RIGHT_PARENT);
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 160; constraints();
					}
				}

				State = 163; Match(ARROW);
				State = 164; expression(0);
				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 165; Match(SEMICOLON);
					}
				}

				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 169;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIVATE) {
					{
					State = 168; Match(PRIVATE);
					}
				}

				State = 171; Match(EXTERN);
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MEMBER) {
					{
					State = 172; Match(MEMBER);
					}
				}

				State = 177;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
				case 1:
					{
					State = 175; type(0);
					}
					break;
				case 2:
					{
					State = 176; Match(VOID);
					}
					break;
				}
				State = 179; Match(ID);
				State = 190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LESS) {
					{
					State = 180; Match(LESS);
					State = 181; Match(ID);
					State = 186;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 182; Match(COMA);
						State = 183; Match(ID);
						}
						}
						State = 188;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 189; Match(GREATER);
					}
				}

				State = 192; Match(LEFT_PARENT);
				State = 201;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << ANY) | (1L << MUTABLE) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
					{
					State = 193; uninitializedVarDeclaration();
					State = 198;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 194; Match(COMA);
						State = 195; uninitializedVarDeclaration();
						}
						}
						State = 200;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 203; Match(RIGHT_PARENT);
				State = 205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 204; constraints();
					}
				}

				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIVATE) {
					{
					State = 207; Match(PRIVATE);
					}
				}

				State = 210; Match(STATIC);
				State = 211; Match(EXTERN);
				State = 214;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
				case 1:
					{
					State = 212; type(0);
					}
					break;
				case 2:
					{
					State = 213; Match(VOID);
					}
					break;
				}
				State = 216; Match(ID);
				State = 217; Match(DOT);
				State = 218; Match(ID);
				State = 229;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LESS) {
					{
					State = 219; Match(LESS);
					State = 220; Match(ID);
					State = 225;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 221; Match(COMA);
						State = 222; Match(ID);
						}
						}
						State = 227;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 228; Match(GREATER);
					}
				}

				State = 231; Match(LEFT_PARENT);
				State = 240;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << ANY) | (1L << MUTABLE) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
					{
					State = 232; uninitializedVarDeclaration();
					State = 237;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 233; Match(COMA);
						State = 234; uninitializedVarDeclaration();
						}
						}
						State = 239;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 242; Match(RIGHT_PARENT);
				State = 244;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 243; constraints();
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintsContext : ParserRuleContext {
		public ITerminalNode WHERE() { return GetToken(JurParser.WHERE, 0); }
		public ConstrainContext[] constrain() {
			return GetRuleContexts<ConstrainContext>();
		}
		public ConstrainContext constrain(int i) {
			return GetRuleContext<ConstrainContext>(i);
		}
		public ITerminalNode[] AND() { return GetTokens(JurParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(JurParser.AND, i);
		}
		public ConstraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraints; } }
	}

	[RuleVersion(0)]
	public ConstraintsContext constraints() {
		ConstraintsContext _localctx = new ConstraintsContext(Context, State);
		EnterRule(_localctx, 12, RULE_constraints);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248; Match(WHERE);
			State = 249; constrain();
			State = 254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 250; Match(AND);
				State = 251; constrain();
				}
				}
				State = 256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstrainContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode IS() { return GetToken(JurParser.IS, 0); }
		public ConstrainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constrain; } }
	}

	[RuleVersion(0)]
	public ConstrainContext constrain() {
		ConstrainContext _localctx = new ConstrainContext(Context, State);
		EnterRule(_localctx, 14, RULE_constrain);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257; type(0);
			State = 258; Match(IS);
			State = 259; type(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UninitializedVarDeclarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(JurParser.ID, 0); }
		public ITerminalNode MUTABLE() { return GetToken(JurParser.MUTABLE, 0); }
		public UninitializedVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uninitializedVarDeclaration; } }
	}

	[RuleVersion(0)]
	public UninitializedVarDeclarationContext uninitializedVarDeclaration() {
		UninitializedVarDeclarationContext _localctx = new UninitializedVarDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_uninitializedVarDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MUTABLE) {
				{
				State = 261; Match(MUTABLE);
				}
			}

			State = 264; type(0);
			State = 265; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializedVariableDeclarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(JurParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(JurParser.ASSIGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode MUTABLE() { return GetToken(JurParser.MUTABLE, 0); }
		public InitializedVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializedVariableDeclaration; } }
	}

	[RuleVersion(0)]
	public InitializedVariableDeclarationContext initializedVariableDeclaration() {
		InitializedVariableDeclarationContext _localctx = new InitializedVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_initializedVariableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MUTABLE) {
				{
				State = 267; Match(MUTABLE);
				}
			}

			State = 270; type(0);
			State = 271; Match(ID);
			State = 272; Match(ASSIGN);
			State = 273; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InferedVariableDeclarationContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(JurParser.ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode MUTABLE() { return GetToken(JurParser.MUTABLE, 0); }
		public InferedVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inferedVariableDeclaration; } }
	}

	[RuleVersion(0)]
	public InferedVariableDeclarationContext inferedVariableDeclaration() {
		InferedVariableDeclarationContext _localctx = new InferedVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_inferedVariableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MUTABLE) {
				{
				State = 275; Match(MUTABLE);
				}
			}

			State = 278; Match(ID);
			State = 279; Match(T__0);
			State = 280; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArrayTypeContext : TypeContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode LEFT_SQUARE_PARENT() { return GetToken(JurParser.LEFT_SQUARE_PARENT, 0); }
		public ITerminalNode RIGHT_SQUARE_PARENT() { return GetToken(JurParser.RIGHT_SQUARE_PARENT, 0); }
		public ArrayTypeContext(TypeContext context) { CopyFrom(context); }
	}
	public partial class AnyTypeContext : TypeContext {
		public ITerminalNode ANY() { return GetToken(JurParser.ANY, 0); }
		public AnyTypeContext(TypeContext context) { CopyFrom(context); }
	}
	public partial class TypeParameterOrStructTypeContext : TypeContext {
		public ITerminalNode ID() { return GetToken(JurParser.ID, 0); }
		public TypeParameterOrStructTypeContext(TypeContext context) { CopyFrom(context); }
	}
	public partial class FunctionPointerTypeContext : TypeContext {
		public ITerminalNode VOID() { return GetToken(JurParser.VOID, 0); }
		public ITerminalNode LEFT_PARENT() { return GetToken(JurParser.LEFT_PARENT, 0); }
		public ITerminalNode RIGHT_PARENT() { return GetToken(JurParser.RIGHT_PARENT, 0); }
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode[] COMA() { return GetTokens(JurParser.COMA); }
		public ITerminalNode COMA(int i) {
			return GetToken(JurParser.COMA, i);
		}
		public FunctionPointerTypeContext(TypeContext context) { CopyFrom(context); }
	}
	public partial class GenericStructTypeContext : TypeContext {
		public ITerminalNode ID() { return GetToken(JurParser.ID, 0); }
		public ITerminalNode LESS() { return GetToken(JurParser.LESS, 0); }
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode GREATER() { return GetToken(JurParser.GREATER, 0); }
		public ITerminalNode[] COMA() { return GetTokens(JurParser.COMA); }
		public ITerminalNode COMA(int i) {
			return GetToken(JurParser.COMA, i);
		}
		public GenericStructTypeContext(TypeContext context) { CopyFrom(context); }
	}
	public partial class PrimitiveTypeContext : TypeContext {
		public ITerminalNode PRIMITIVE() { return GetToken(JurParser.PRIMITIVE, 0); }
		public PrimitiveTypeContext(TypeContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public TypeContext type() {
		return type(0);
	}

	private TypeContext type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeContext _localctx = new TypeContext(Context, _parentState);
		TypeContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_type, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				_localctx = new AnyTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 283; Match(ANY);
				}
				break;
			case 2:
				{
				_localctx = new PrimitiveTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 284; Match(PRIMITIVE);
				}
				break;
			case 3:
				{
				_localctx = new TypeParameterOrStructTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 285; Match(ID);
				}
				break;
			case 4:
				{
				_localctx = new GenericStructTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 286; Match(ID);
				{
				State = 287; Match(LESS);
				State = 288; type(0);
				State = 293;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMA) {
					{
					{
					State = 289; Match(COMA);
					State = 290; type(0);
					}
					}
					State = 295;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 296; Match(GREATER);
				}
				}
				break;
			case 5:
				{
				_localctx = new FunctionPointerTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 298; Match(VOID);
				State = 299; Match(LEFT_PARENT);
				State = 308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << ANY) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
					{
					State = 300; type(0);
					State = 305;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 301; Match(COMA);
						State = 302; type(0);
						}
						}
						State = 307;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 310; Match(RIGHT_PARENT);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 331;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 329;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
					case 1:
						{
						_localctx = new FunctionPointerTypeContext(new TypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 313;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 314; Match(LEFT_PARENT);
						State = 323;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << ANY) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
							{
							State = 315; type(0);
							State = 320;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==COMA) {
								{
								{
								State = 316; Match(COMA);
								State = 317; type(0);
								}
								}
								State = 322;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							}
						}

						State = 325; Match(RIGHT_PARENT);
						}
						break;
					case 2:
						{
						_localctx = new ArrayTypeContext(new TypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 326;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 327; Match(LEFT_SQUARE_PARENT);
						State = 328; Match(RIGHT_SQUARE_PARENT);
						}
						break;
					}
					} 
				}
				State = 333;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlockStatementContext : StatementContext {
		public ITerminalNode LEFT_CURLY() { return GetToken(JurParser.LEFT_CURLY, 0); }
		public ITerminalNode RIGHT_CURLY() { return GetToken(JurParser.RIGHT_CURLY, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class AssignmentStatementContext : StatementContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ASSIGN() { return GetToken(JurParser.ASSIGN, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(JurParser.SEMICOLON, 0); }
		public AssignmentStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class UninitializedVarDeclarationStatementContext : StatementContext {
		public UninitializedVarDeclarationContext uninitializedVarDeclaration() {
			return GetRuleContext<UninitializedVarDeclarationContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(JurParser.SEMICOLON, 0); }
		public UninitializedVarDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class ForStatementContext : StatementContext {
		public ITerminalNode FOR() { return GetToken(JurParser.FOR, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(JurParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(JurParser.SEMICOLON, i);
		}
		public InitializedVariableDeclarationContext initializedVariableDeclaration() {
			return GetRuleContext<InitializedVariableDeclarationContext>(0);
		}
		public InferedVariableDeclarationContext inferedVariableDeclaration() {
			return GetRuleContext<InferedVariableDeclarationContext>(0);
		}
		public ForStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class ExpressionStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(JurParser.SEMICOLON, 0); }
		public ExpressionStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class IfStatementContext : StatementContext {
		public ITerminalNode IF() { return GetToken(JurParser.IF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(JurParser.ELSE, 0); }
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class ReturnStatementContext : StatementContext {
		public ITerminalNode RETURN() { return GetToken(JurParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(JurParser.SEMICOLON, 0); }
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class InferedVariableDeclarationStatementContext : StatementContext {
		public InferedVariableDeclarationContext inferedVariableDeclaration() {
			return GetRuleContext<InferedVariableDeclarationContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(JurParser.SEMICOLON, 0); }
		public InferedVariableDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class InitializedVariableDeclarationStatementContext : StatementContext {
		public InitializedVariableDeclarationContext initializedVariableDeclaration() {
			return GetRuleContext<InitializedVariableDeclarationContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(JurParser.SEMICOLON, 0); }
		public InitializedVariableDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_statement);
		int _la;
		try {
			State = 394;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				_localctx = new BlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 334; Match(LEFT_CURLY);
				State = 338;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SUBTRACT) | (1L << LEFT_CURLY) | (1L << LEFT_PARENT) | (1L << NOT) | (1L << STRING_VALUE) | (1L << CHAR_VALUE) | (1L << NUMBER_VALUE) | (1L << BOOL_VALUE) | (1L << VOID) | (1L << ANY) | (1L << RETURN) | (1L << IF) | (1L << NEW) | (1L << MUTABLE) | (1L << FOR) | (1L << ARROW) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
					{
					{
					State = 335; statement();
					}
					}
					State = 340;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 341; Match(RIGHT_CURLY);
				}
				break;
			case 2:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 342; Match(IF);
				State = 343; expression(0);
				State = 344; statement();
				State = 347;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
				case 1:
					{
					State = 345; Match(ELSE);
					State = 346; statement();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 349; Match(FOR);
				State = 356;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
				case 1:
					{
					State = 352;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
					case 1:
						{
						State = 350; initializedVariableDeclaration();
						}
						break;
					case 2:
						{
						State = 351; inferedVariableDeclaration();
						}
						break;
					}
					State = 354; Match(SEMICOLON);
					}
					break;
				}
				State = 358; expression(0);
				State = 361;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 359; Match(SEMICOLON);
					State = 360; expression(0);
					}
				}

				State = 363; statement();
				}
				break;
			case 4:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 365; Match(RETURN);
				State = 367;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
				case 1:
					{
					State = 366; expression(0);
					}
					break;
				}
				State = 370;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 369; Match(SEMICOLON);
					}
				}

				}
				break;
			case 5:
				_localctx = new InferedVariableDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 372; inferedVariableDeclaration();
				State = 374;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 373; Match(SEMICOLON);
					}
				}

				}
				break;
			case 6:
				_localctx = new InitializedVariableDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 376; initializedVariableDeclaration();
				State = 378;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 377; Match(SEMICOLON);
					}
				}

				}
				break;
			case 7:
				_localctx = new UninitializedVarDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 380; uninitializedVarDeclaration();
				State = 382;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 381; Match(SEMICOLON);
					}
				}

				}
				break;
			case 8:
				_localctx = new AssignmentStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 384; expression(0);
				State = 385; Match(ASSIGN);
				State = 386; expression(0);
				State = 388;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 387; Match(SEMICOLON);
					}
				}

				}
				break;
			case 9:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 390; expression(0);
				State = 392;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 391; Match(SEMICOLON);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode LEFT_CURLY() { return GetToken(JurParser.LEFT_CURLY, 0); }
		public ITerminalNode RIGHT_CURLY() { return GetToken(JurParser.RIGHT_CURLY, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 26, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396; Match(LEFT_CURLY);
			State = 400;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SUBTRACT) | (1L << LEFT_CURLY) | (1L << LEFT_PARENT) | (1L << NOT) | (1L << STRING_VALUE) | (1L << CHAR_VALUE) | (1L << NUMBER_VALUE) | (1L << BOOL_VALUE) | (1L << VOID) | (1L << ANY) | (1L << RETURN) | (1L << IF) | (1L << NEW) | (1L << MUTABLE) | (1L << FOR) | (1L << ARROW) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
				{
				{
				State = 397; statement();
				}
				}
				State = 402;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 403; Match(RIGHT_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariableAccessContext : ExpressionContext {
		public ITerminalNode ID() { return GetToken(JurParser.ID, 0); }
		public VariableAccessContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class ArithmeticNegationContext : ExpressionContext {
		public ITerminalNode SUBTRACT() { return GetToken(JurParser.SUBTRACT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArithmeticNegationContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class NegationContext : ExpressionContext {
		public ITerminalNode NOT() { return GetToken(JurParser.NOT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NegationContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class AnonymusFunctionContext : ExpressionContext {
		public ITerminalNode ARROW() { return GetToken(JurParser.ARROW, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UninitializedVarDeclarationContext[] uninitializedVarDeclaration() {
			return GetRuleContexts<UninitializedVarDeclarationContext>();
		}
		public UninitializedVarDeclarationContext uninitializedVarDeclaration(int i) {
			return GetRuleContext<UninitializedVarDeclarationContext>(i);
		}
		public ITerminalNode LEFT_PARENT() { return GetToken(JurParser.LEFT_PARENT, 0); }
		public ITerminalNode RIGHT_PARENT() { return GetToken(JurParser.RIGHT_PARENT, 0); }
		public ITerminalNode[] COMA() { return GetTokens(JurParser.COMA); }
		public ITerminalNode COMA(int i) {
			return GetToken(JurParser.COMA, i);
		}
		public AnonymusFunctionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class DefaultValueContext : ExpressionContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(JurParser.DOT, 0); }
		public ITerminalNode DEFAULT_VALUE() { return GetToken(JurParser.DEFAULT_VALUE, 0); }
		public DefaultValueContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class PrimitiveValueContext : ExpressionContext {
		public IToken value;
		public ITerminalNode NUMBER_VALUE() { return GetToken(JurParser.NUMBER_VALUE, 0); }
		public ITerminalNode STRING_VALUE() { return GetToken(JurParser.STRING_VALUE, 0); }
		public ITerminalNode BOOL_VALUE() { return GetToken(JurParser.BOOL_VALUE, 0); }
		public ITerminalNode CHAR_VALUE() { return GetToken(JurParser.CHAR_VALUE, 0); }
		public PrimitiveValueContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class FunctionCallContext : ExpressionContext {
		public ITerminalNode ID() { return GetToken(JurParser.ID, 0); }
		public ITerminalNode LEFT_PARENT() { return GetToken(JurParser.LEFT_PARENT, 0); }
		public ITerminalNode RIGHT_PARENT() { return GetToken(JurParser.RIGHT_PARENT, 0); }
		public ITerminalNode[] LESS() { return GetTokens(JurParser.LESS); }
		public ITerminalNode LESS(int i) {
			return GetToken(JurParser.LESS, i);
		}
		public ITerminalNode POLY() { return GetToken(JurParser.POLY, 0); }
		public ITerminalNode[] GREATER() { return GetTokens(JurParser.GREATER); }
		public ITerminalNode GREATER(int i) {
			return GetToken(JurParser.GREATER, i);
		}
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMA() { return GetTokens(JurParser.COMA); }
		public ITerminalNode COMA(int i) {
			return GetToken(JurParser.COMA, i);
		}
		public ITerminalNode DOT() { return GetToken(JurParser.DOT, 0); }
		public FunctionCallContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class FieldAccessContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(JurParser.DOT, 0); }
		public ITerminalNode ID() { return GetToken(JurParser.ID, 0); }
		public FieldAccessContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class ConstructorContext : ExpressionContext {
		public ITerminalNode NEW() { return GetToken(JurParser.NEW, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode[] LEFT_CURLY() { return GetTokens(JurParser.LEFT_CURLY); }
		public ITerminalNode LEFT_CURLY(int i) {
			return GetToken(JurParser.LEFT_CURLY, i);
		}
		public ITerminalNode[] RIGHT_CURLY() { return GetTokens(JurParser.RIGHT_CURLY); }
		public ITerminalNode RIGHT_CURLY(int i) {
			return GetToken(JurParser.RIGHT_CURLY, i);
		}
		public ITerminalNode[] ID() { return GetTokens(JurParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(JurParser.ID, i);
		}
		public ITerminalNode[] ASSIGN() { return GetTokens(JurParser.ASSIGN); }
		public ITerminalNode ASSIGN(int i) {
			return GetToken(JurParser.ASSIGN, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMA() { return GetTokens(JurParser.COMA); }
		public ITerminalNode COMA(int i) {
			return GetToken(JurParser.COMA, i);
		}
		public ConstructorContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class OperationContext : ExpressionContext {
		public IToken @operator;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TIMES() { return GetToken(JurParser.TIMES, 0); }
		public ITerminalNode DIVIDE() { return GetToken(JurParser.DIVIDE, 0); }
		public ITerminalNode ADD() { return GetToken(JurParser.ADD, 0); }
		public ITerminalNode SUBTRACT() { return GetToken(JurParser.SUBTRACT, 0); }
		public ITerminalNode LESS() { return GetToken(JurParser.LESS, 0); }
		public ITerminalNode GREATER() { return GetToken(JurParser.GREATER, 0); }
		public ITerminalNode LEQUAL() { return GetToken(JurParser.LEQUAL, 0); }
		public ITerminalNode GREQUAL() { return GetToken(JurParser.GREQUAL, 0); }
		public ITerminalNode EQUAL() { return GetToken(JurParser.EQUAL, 0); }
		public ITerminalNode NOT_EQUAL() { return GetToken(JurParser.NOT_EQUAL, 0); }
		public ITerminalNode LOGICAL_AND() { return GetToken(JurParser.LOGICAL_AND, 0); }
		public ITerminalNode OR() { return GetToken(JurParser.OR, 0); }
		public OperationContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class ParExpressionContext : ExpressionContext {
		public ITerminalNode LEFT_PARENT() { return GetToken(JurParser.LEFT_PARENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RIGHT_PARENT() { return GetToken(JurParser.RIGHT_PARENT, 0); }
		public ParExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class TypeExpressionContext : ExpressionContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(JurParser.DOT, 0); }
		public ITerminalNode TYPE() { return GetToken(JurParser.TYPE, 0); }
		public TypeExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 503;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				{
				_localctx = new PrimitiveValueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 406;
				((PrimitiveValueContext)_localctx).value = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_VALUE) | (1L << CHAR_VALUE) | (1L << NUMBER_VALUE) | (1L << BOOL_VALUE))) != 0)) ) {
					((PrimitiveValueContext)_localctx).value = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				{
				_localctx = new AnonymusFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 408;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << ANY) | (1L << MUTABLE) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
					{
					State = 407; uninitializedVarDeclaration();
					}
				}

				State = 410; Match(ARROW);
				State = 413;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LEFT_CURLY:
					{
					State = 411; block();
					}
					break;
				case SUBTRACT:
				case LEFT_PARENT:
				case NOT:
				case STRING_VALUE:
				case CHAR_VALUE:
				case NUMBER_VALUE:
				case BOOL_VALUE:
				case VOID:
				case ANY:
				case NEW:
				case MUTABLE:
				case ARROW:
				case PRIMITIVE:
				case ID:
					{
					State = 412; expression(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				{
				_localctx = new AnonymusFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 415; Match(LEFT_PARENT);
				State = 424;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << ANY) | (1L << MUTABLE) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
					{
					State = 416; uninitializedVarDeclaration();
					State = 421;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 417; Match(COMA);
						State = 418; uninitializedVarDeclaration();
						}
						}
						State = 423;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 426; Match(RIGHT_PARENT);
				State = 427; Match(ARROW);
				State = 430;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LEFT_CURLY:
					{
					State = 428; block();
					}
					break;
				case SUBTRACT:
				case LEFT_PARENT:
				case NOT:
				case STRING_VALUE:
				case CHAR_VALUE:
				case NUMBER_VALUE:
				case BOOL_VALUE:
				case VOID:
				case ANY:
				case NEW:
				case MUTABLE:
				case ARROW:
				case PRIMITIVE:
				case ID:
					{
					State = 429; expression(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				{
				_localctx = new FunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 432; Match(ID);
				State = 436;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
				case 1:
					{
					State = 433; Match(LESS);
					State = 434; Match(POLY);
					State = 435; Match(GREATER);
					}
					break;
				}
				State = 449;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LESS) {
					{
					State = 438; Match(LESS);
					State = 439; type(0);
					State = 444;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 440; Match(COMA);
						State = 441; type(0);
						}
						}
						State = 446;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 447; Match(GREATER);
					}
				}

				State = 451; Match(LEFT_PARENT);
				State = 460;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SUBTRACT) | (1L << LEFT_PARENT) | (1L << NOT) | (1L << STRING_VALUE) | (1L << CHAR_VALUE) | (1L << NUMBER_VALUE) | (1L << BOOL_VALUE) | (1L << VOID) | (1L << ANY) | (1L << NEW) | (1L << MUTABLE) | (1L << ARROW) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
					{
					State = 452; expression(0);
					State = 457;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 453; Match(COMA);
						State = 454; expression(0);
						}
						}
						State = 459;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 462; Match(RIGHT_PARENT);
				}
				break;
			case 5:
				{
				_localctx = new DefaultValueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 463; type(0);
				State = 464; Match(DOT);
				State = 465; Match(DEFAULT_VALUE);
				}
				break;
			case 6:
				{
				_localctx = new TypeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 467; type(0);
				State = 468; Match(DOT);
				State = 469; Match(TYPE);
				}
				break;
			case 7:
				{
				_localctx = new ConstructorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 471; Match(NEW);
				State = 472; type(0);
				State = 491;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,80,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 473; Match(LEFT_CURLY);
						{
						State = 474; Match(ID);
						State = 475; Match(ASSIGN);
						State = 476; expression(0);
						}
						State = 484;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==COMA) {
							{
							{
							State = 478; Match(COMA);
							State = 479; Match(ID);
							State = 480; Match(ASSIGN);
							State = 481; expression(0);
							}
							}
							State = 486;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 487; Match(RIGHT_CURLY);
						}
						} 
					}
					State = 493;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,80,Context);
				}
				}
				break;
			case 8:
				{
				_localctx = new VariableAccessContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 494; Match(ID);
				}
				break;
			case 9:
				{
				_localctx = new ParExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 495; Match(LEFT_PARENT);
				State = 496; expression(0);
				State = 497; Match(RIGHT_PARENT);
				}
				break;
			case 10:
				{
				_localctx = new NegationContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 499; Match(NOT);
				State = 500; expression(8);
				}
				break;
			case 11:
				{
				_localctx = new ArithmeticNegationContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 501; Match(SUBTRACT);
				State = 502; expression(7);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 561;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,88,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 559;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
					case 1:
						{
						_localctx = new OperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 505;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 506;
						((OperationContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==TIMES || _la==DIVIDE) ) {
							((OperationContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 507; expression(7);
						}
						break;
					case 2:
						{
						_localctx = new OperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 508;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 509;
						((OperationContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ADD || _la==SUBTRACT) ) {
							((OperationContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 510; expression(6);
						}
						break;
					case 3:
						{
						_localctx = new OperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 511;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 512;
						((OperationContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LESS) | (1L << LEQUAL) | (1L << GREATER) | (1L << GREQUAL))) != 0)) ) {
							((OperationContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 513; expression(5);
						}
						break;
					case 4:
						{
						_localctx = new OperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 514;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 515;
						((OperationContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==EQUAL || _la==NOT_EQUAL) ) {
							((OperationContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 516; expression(4);
						}
						break;
					case 5:
						{
						_localctx = new OperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 517;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 518; Match(LOGICAL_AND);
						State = 519; expression(3);
						}
						break;
					case 6:
						{
						_localctx = new OperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 520;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 521; Match(OR);
						State = 522; expression(2);
						}
						break;
					case 7:
						{
						_localctx = new FunctionCallContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 523;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 524; Match(DOT);
						State = 525; Match(ID);
						State = 529;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
						case 1:
							{
							State = 526; Match(LESS);
							State = 527; Match(POLY);
							State = 528; Match(GREATER);
							}
							break;
						}
						State = 542;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==LESS) {
							{
							State = 531; Match(LESS);
							State = 532; type(0);
							State = 537;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==COMA) {
								{
								{
								State = 533; Match(COMA);
								State = 534; type(0);
								}
								}
								State = 539;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							State = 540; Match(GREATER);
							}
						}

						State = 544; Match(LEFT_PARENT);
						State = 553;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SUBTRACT) | (1L << LEFT_PARENT) | (1L << NOT) | (1L << STRING_VALUE) | (1L << CHAR_VALUE) | (1L << NUMBER_VALUE) | (1L << BOOL_VALUE) | (1L << VOID) | (1L << ANY) | (1L << NEW) | (1L << MUTABLE) | (1L << ARROW) | (1L << PRIMITIVE) | (1L << ID))) != 0)) {
							{
							State = 545; expression(0);
							State = 550;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==COMA) {
								{
								{
								State = 546; Match(COMA);
								State = 547; expression(0);
								}
								}
								State = 552;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							}
						}

						State = 555; Match(RIGHT_PARENT);
						}
						break;
					case 8:
						{
						_localctx = new FieldAccessContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 556;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 557; Match(DOT);
						State = 558; Match(ID);
						}
						break;
					}
					} 
				}
				State = 563;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,88,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 11: return type_sempred((TypeContext)_localctx, predIndex);
		case 14: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool type_sempred(TypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		case 5: return Precpred(Context, 3);
		case 6: return Precpred(Context, 2);
		case 7: return Precpred(Context, 1);
		case 8: return Precpred(Context, 15);
		case 9: return Precpred(Context, 12);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '?', '\x237', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x3', 
		'\x2', '\x3', '\x2', '\a', '\x2', '#', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '&', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\a', '\x4', '\x32', '\n', '\x4', '\f', '\x4', '\xE', 
		'\x4', '\x35', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x5', '\x5', ':', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x42', '\n', '\x5', 
		'\f', '\x5', '\xE', '\x5', '\x45', '\v', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'H', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'L', '\n', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'P', '\n', '\x5', '\x3', 
		'\x5', '\a', '\x5', 'S', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 'V', 
		'\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x5', '\x6', ']', '\n', '\x6', '\x3', '\a', '\x5', '\a', '`', 
		'\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x64', '\n', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', 
		'\a', 'k', '\n', '\a', '\f', '\a', '\xE', '\a', 'n', '\v', '\a', '\x3', 
		'\a', '\x5', '\a', 'q', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\a', '\a', 'w', '\n', '\a', '\f', '\a', '\xE', '\a', 'z', 
		'\v', '\a', '\x5', '\a', '|', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', '\x80', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x84', 
		'\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x88', '\n', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', 
		'\a', '\x8F', '\n', '\a', '\f', '\a', '\xE', '\a', '\x92', '\v', '\a', 
		'\x3', '\a', '\x5', '\a', '\x95', '\n', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\a', '\a', '\x9B', '\n', '\a', '\f', '\a', 
		'\xE', '\a', '\x9E', '\v', '\a', '\x5', '\a', '\xA0', '\n', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', '\xA4', '\n', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', '\xA9', '\n', '\a', '\x3', '\a', '\x5', 
		'\a', '\xAC', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\xB0', 
		'\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\xB4', '\n', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', 
		'\a', '\xBB', '\n', '\a', '\f', '\a', '\xE', '\a', '\xBE', '\v', '\a', 
		'\x3', '\a', '\x5', '\a', '\xC1', '\n', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\a', '\a', '\xC7', '\n', '\a', '\f', '\a', 
		'\xE', '\a', '\xCA', '\v', '\a', '\x5', '\a', '\xCC', '\n', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', '\xD0', '\n', '\a', '\x3', '\a', '\x5', 
		'\a', '\xD3', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\xD9', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 
		'\xE2', '\n', '\a', '\f', '\a', '\xE', '\a', '\xE5', '\v', '\a', '\x3', 
		'\a', '\x5', '\a', '\xE8', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\a', '\a', '\xEE', '\n', '\a', '\f', '\a', '\xE', 
		'\a', '\xF1', '\v', '\a', '\x5', '\a', '\xF3', '\n', '\a', '\x3', '\a', 
		'\x3', '\a', '\x5', '\a', '\xF7', '\n', '\a', '\x5', '\a', '\xF9', '\n', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 
		'\xFF', '\n', '\b', '\f', '\b', '\xE', '\b', '\x102', '\v', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x5', '\n', 
		'\x109', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', 
		'\x5', '\v', '\x10F', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\f', '\x5', '\f', '\x117', '\n', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\a', '\r', '\x126', '\n', '\r', '\f', '\r', 
		'\xE', '\r', '\x129', '\v', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\x132', 
		'\n', '\r', '\f', '\r', '\xE', '\r', '\x135', '\v', '\r', '\x5', '\r', 
		'\x137', '\n', '\r', '\x3', '\r', '\x5', '\r', '\x13A', '\n', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', 
		'\x141', '\n', '\r', '\f', '\r', '\xE', '\r', '\x144', '\v', '\r', '\x5', 
		'\r', '\x146', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\a', '\r', '\x14C', '\n', '\r', '\f', '\r', '\xE', '\r', '\x14F', 
		'\v', '\r', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\x153', '\n', '\xE', 
		'\f', '\xE', '\xE', '\xE', '\x156', '\v', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', 
		'\xE', '\x15E', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x5', '\xE', '\x163', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', 
		'\xE', '\x167', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x5', '\xE', '\x16C', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x5', '\xE', '\x172', '\n', '\xE', '\x3', '\xE', 
		'\x5', '\xE', '\x175', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', 
		'\xE', '\x179', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 
		'\x17D', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x181', 
		'\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', 
		'\xE', '\x187', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 
		'\x18B', '\n', '\xE', '\x5', '\xE', '\x18D', '\n', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\a', '\xF', '\x191', '\n', '\xF', '\f', '\xF', '\xE', '\xF', 
		'\x194', '\v', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x5', '\x10', '\x19B', '\n', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x1A0', '\n', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\x1A6', 
		'\n', '\x10', '\f', '\x10', '\xE', '\x10', '\x1A9', '\v', '\x10', '\x5', 
		'\x10', '\x1AB', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x5', '\x10', '\x1B1', '\n', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x1B7', '\n', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', 
		'\x1BD', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\x1C0', '\v', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x1C4', '\n', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\x1CA', 
		'\n', '\x10', '\f', '\x10', '\xE', '\x10', '\x1CD', '\v', '\x10', '\x5', 
		'\x10', '\x1CF', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\x1E5', '\n', '\x10', '\f', 
		'\x10', '\xE', '\x10', '\x1E8', '\v', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\a', '\x10', '\x1EC', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\x1EF', 
		'\v', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x5', '\x10', '\x1FA', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x5', '\x10', '\x214', '\n', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\x21A', '\n', 
		'\x10', '\f', '\x10', '\xE', '\x10', '\x21D', '\v', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x5', '\x10', '\x221', '\n', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\x227', '\n', '\x10', 
		'\f', '\x10', '\xE', '\x10', '\x22A', '\v', '\x10', '\x5', '\x10', '\x22C', 
		'\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\a', '\x10', '\x232', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\x235', 
		'\v', '\x10', '\x3', '\x10', '\x2', '\x4', '\x18', '\x1E', '\x11', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', '\x2', '\a', '\x3', '\x2', '!', '$', '\x3', 
		'\x2', '\r', '\xE', '\x3', '\x2', '\v', '\f', '\x3', '\x2', '\x15', '\x18', 
		'\x4', '\x2', '\x19', '\x19', '\x1B', '\x1B', '\x2', '\x29B', '\x2', '$', 
		'\x3', '\x2', '\x2', '\x2', '\x4', ')', '\x3', '\x2', '\x2', '\x2', '\x6', 
		',', '\x3', '\x2', '\x2', '\x2', '\b', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\n', 'Y', '\x3', '\x2', '\x2', '\x2', '\f', '\xF8', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '\xFA', '\x3', '\x2', '\x2', '\x2', '\x10', '\x103', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\x108', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x10E', '\x3', '\x2', '\x2', '\x2', '\x16', '\x116', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x139', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x18C', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\x18E', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\x1F9', '\x3', '\x2', '\x2', '\x2', ' ', '#', '\x5', '\x4', '\x3', '\x2', 
		'!', '#', '\x5', '\x6', '\x4', '\x2', '\"', ' ', '\x3', '\x2', '\x2', 
		'\x2', '\"', '!', '\x3', '\x2', '\x2', '\x2', '#', '&', '\x3', '\x2', 
		'\x2', '\x2', '$', '\"', '\x3', '\x2', '\x2', '\x2', '$', '%', '\x3', 
		'\x2', '\x2', '\x2', '%', '\'', '\x3', '\x2', '\x2', '\x2', '&', '$', 
		'\x3', '\x2', '\x2', '\x2', '\'', '(', '\a', '\x2', '\x2', '\x3', '(', 
		'\x3', '\x3', '\x2', '\x2', '\x2', ')', '*', '\a', '-', '\x2', '\x2', 
		'*', '+', '\x5', '\x1A', '\xE', '\x2', '+', '\x5', '\x3', '\x2', '\x2', 
		'\x2', ',', '-', '\a', ',', '\x2', '\x2', '-', '.', '\a', '#', '\x2', 
		'\x2', '.', '\x33', '\a', '\xF', '\x2', '\x2', '/', '\x32', '\x5', '\f', 
		'\a', '\x2', '\x30', '\x32', '\x5', '\b', '\x5', '\x2', '\x31', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x31', '\x30', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x33', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x34', '\x3', '\x2', '\x2', '\x2', '\x34', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '\x35', '\x33', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x37', '\a', '\x10', '\x2', '\x2', '\x37', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x38', ':', '\a', '&', '\x2', '\x2', '\x39', '\x38', '\x3', '\x2', 
		'\x2', '\x2', '\x39', ':', '\x3', '\x2', '\x2', '\x2', ':', ';', '\x3', 
		'\x2', '\x2', '\x2', ';', '<', '\a', '\'', '\x2', '\x2', '<', 'G', '\a', 
		'?', '\x2', '\x2', '=', '>', '\a', '\x15', '\x2', '\x2', '>', '\x43', 
		'\a', '?', '\x2', '\x2', '?', '@', '\a', '\a', '\x2', '\x2', '@', '\x42', 
		'\a', '?', '\x2', '\x2', '\x41', '?', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\x45', '\x3', '\x2', '\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x43', '\x44', '\x3', '\x2', '\x2', '\x2', '\x44', '\x46', '\x3', 
		'\x2', '\x2', '\x2', '\x45', '\x43', '\x3', '\x2', '\x2', '\x2', '\x46', 
		'H', '\a', '\x17', '\x2', '\x2', 'G', '=', '\x3', '\x2', '\x2', '\x2', 
		'G', 'H', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\x3', '\x2', '\x2', '\x2', 
		'I', 'T', '\a', '\xF', '\x2', '\x2', 'J', 'L', '\a', ';', '\x2', '\x2', 
		'K', 'J', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x3', '\x2', '\x2', '\x2', 
		'L', 'M', '\x3', '\x2', '\x2', '\x2', 'M', 'O', '\x5', '\x12', '\n', '\x2', 
		'N', 'P', '\a', '\t', '\x2', '\x2', 'O', 'N', '\x3', '\x2', '\x2', '\x2', 
		'O', 'P', '\x3', '\x2', '\x2', '\x2', 'P', 'S', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'S', '\x5', '\n', '\x6', '\x2', 'R', 'K', '\x3', '\x2', '\x2', '\x2', 
		'R', 'Q', '\x3', '\x2', '\x2', '\x2', 'S', 'V', '\x3', '\x2', '\x2', '\x2', 
		'T', 'R', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\x3', '\x2', '\x2', '\x2', 
		'U', 'W', '\x3', '\x2', '\x2', '\x2', 'V', 'T', '\x3', '\x2', '\x2', '\x2', 
		'W', 'X', '\a', '\x10', '\x2', '\x2', 'X', '\t', '\x3', '\x2', '\x2', 
		'\x2', 'Y', 'Z', '\a', '\x30', '\x2', '\x2', 'Z', '\\', '\x5', '\x18', 
		'\r', '\x2', '[', ']', '\a', '\t', '\x2', '\x2', '\\', '[', '\x3', '\x2', 
		'\x2', '\x2', '\\', ']', '\x3', '\x2', '\x2', '\x2', ']', '\v', '\x3', 
		'\x2', '\x2', '\x2', '^', '`', '\a', ';', '\x2', '\x2', '_', '^', '\x3', 
		'\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', '\x2', '`', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\x61', '\x64', '\x5', '\x18', '\r', '\x2', 
		'\x62', '\x64', '\a', '(', '\x2', '\x2', '\x63', '\x61', '\x3', '\x2', 
		'\x2', '\x2', '\x63', '\x62', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', 
		'\x3', '\x2', '\x2', '\x2', '\x65', 'p', '\a', '?', '\x2', '\x2', '\x66', 
		'g', '\a', '\x15', '\x2', '\x2', 'g', 'l', '\a', '?', '\x2', '\x2', 'h', 
		'i', '\a', '\a', '\x2', '\x2', 'i', 'k', '\a', '?', '\x2', '\x2', 'j', 
		'h', '\x3', '\x2', '\x2', '\x2', 'k', 'n', '\x3', '\x2', '\x2', '\x2', 
		'l', 'j', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x3', '\x2', '\x2', '\x2', 
		'm', 'o', '\x3', '\x2', '\x2', '\x2', 'n', 'l', '\x3', '\x2', '\x2', '\x2', 
		'o', 'q', '\a', '\x17', '\x2', '\x2', 'p', '\x66', '\x3', '\x2', '\x2', 
		'\x2', 'p', 'q', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\x3', '\x2', '\x2', 
		'\x2', 'r', '{', '\a', '\x11', '\x2', '\x2', 's', 'x', '\x5', '\x12', 
		'\n', '\x2', 't', 'u', '\a', '\a', '\x2', '\x2', 'u', 'w', '\x5', '\x12', 
		'\n', '\x2', 'v', 't', '\x3', '\x2', '\x2', '\x2', 'w', 'z', '\x3', '\x2', 
		'\x2', '\x2', 'x', 'v', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\x3', '\x2', 
		'\x2', '\x2', 'y', '|', '\x3', '\x2', '\x2', '\x2', 'z', 'x', '\x3', '\x2', 
		'\x2', '\x2', '{', 's', '\x3', '\x2', '\x2', '\x2', '{', '|', '\x3', '\x2', 
		'\x2', '\x2', '|', '}', '\x3', '\x2', '\x2', '\x2', '}', '\x7F', '\a', 
		'\x12', '\x2', '\x2', '~', '\x80', '\x5', '\xE', '\b', '\x2', '\x7F', 
		'~', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', '\x3', '\x2', '\x2', 
		'\x2', '\x80', '\x81', '\x3', '\x2', '\x2', '\x2', '\x81', '\xF9', '\x5', 
		'\x1C', '\xF', '\x2', '\x82', '\x84', '\a', ';', '\x2', '\x2', '\x83', 
		'\x82', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\x3', '\x2', '\x2', 
		'\x2', '\x84', '\x87', '\x3', '\x2', '\x2', '\x2', '\x85', '\x88', '\x5', 
		'\x18', '\r', '\x2', '\x86', '\x88', '\a', '(', '\x2', '\x2', '\x87', 
		'\x85', '\x3', '\x2', '\x2', '\x2', '\x87', '\x86', '\x3', '\x2', '\x2', 
		'\x2', '\x88', '\x89', '\x3', '\x2', '\x2', '\x2', '\x89', '\x94', '\a', 
		'?', '\x2', '\x2', '\x8A', '\x8B', '\a', '\x15', '\x2', '\x2', '\x8B', 
		'\x90', '\a', '?', '\x2', '\x2', '\x8C', '\x8D', '\a', '\a', '\x2', '\x2', 
		'\x8D', '\x8F', '\a', '?', '\x2', '\x2', '\x8E', '\x8C', '\x3', '\x2', 
		'\x2', '\x2', '\x8F', '\x92', '\x3', '\x2', '\x2', '\x2', '\x90', '\x8E', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\x3', '\x2', '\x2', '\x2', 
		'\x91', '\x93', '\x3', '\x2', '\x2', '\x2', '\x92', '\x90', '\x3', '\x2', 
		'\x2', '\x2', '\x93', '\x95', '\a', '\x17', '\x2', '\x2', '\x94', '\x8A', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\x3', '\x2', '\x2', '\x2', 
		'\x95', '\x96', '\x3', '\x2', '\x2', '\x2', '\x96', '\x9F', '\a', '\x11', 
		'\x2', '\x2', '\x97', '\x9C', '\x5', '\x12', '\n', '\x2', '\x98', '\x99', 
		'\a', '\a', '\x2', '\x2', '\x99', '\x9B', '\x5', '\x12', '\n', '\x2', 
		'\x9A', '\x98', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9E', '\x3', '\x2', 
		'\x2', '\x2', '\x9C', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', 
		'\x3', '\x2', '\x2', '\x2', '\x9D', '\xA0', '\x3', '\x2', '\x2', '\x2', 
		'\x9E', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9F', '\x97', '\x3', '\x2', 
		'\x2', '\x2', '\x9F', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', 
		'\x3', '\x2', '\x2', '\x2', '\xA1', '\xA3', '\a', '\x12', '\x2', '\x2', 
		'\xA2', '\xA4', '\x5', '\xE', '\b', '\x2', '\xA3', '\xA2', '\x3', '\x2', 
		'\x2', '\x2', '\xA3', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', 
		'\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\a', '\x38', '\x2', '\x2', 
		'\xA6', '\xA8', '\x5', '\x1E', '\x10', '\x2', '\xA7', '\xA9', '\a', '\t', 
		'\x2', '\x2', '\xA8', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA9', 
		'\x3', '\x2', '\x2', '\x2', '\xA9', '\xF9', '\x3', '\x2', '\x2', '\x2', 
		'\xAA', '\xAC', '\a', ';', '\x2', '\x2', '\xAB', '\xAA', '\x3', '\x2', 
		'\x2', '\x2', '\xAB', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', 
		'\x3', '\x2', '\x2', '\x2', '\xAD', '\xAF', '\a', '\x36', '\x2', '\x2', 
		'\xAE', '\xB0', '\a', '\x39', '\x2', '\x2', '\xAF', '\xAE', '\x3', '\x2', 
		'\x2', '\x2', '\xAF', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB3', 
		'\x3', '\x2', '\x2', '\x2', '\xB1', '\xB4', '\x5', '\x18', '\r', '\x2', 
		'\xB2', '\xB4', '\a', '(', '\x2', '\x2', '\xB3', '\xB1', '\x3', '\x2', 
		'\x2', '\x2', '\xB3', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', 
		'\x3', '\x2', '\x2', '\x2', '\xB5', '\xC0', '\a', '?', '\x2', '\x2', '\xB6', 
		'\xB7', '\a', '\x15', '\x2', '\x2', '\xB7', '\xBC', '\a', '?', '\x2', 
		'\x2', '\xB8', '\xB9', '\a', '\a', '\x2', '\x2', '\xB9', '\xBB', '\a', 
		'?', '\x2', '\x2', '\xBA', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xBB', 
		'\xBE', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBA', '\x3', '\x2', '\x2', 
		'\x2', '\xBC', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBF', '\x3', 
		'\x2', '\x2', '\x2', '\xBE', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBF', 
		'\xC1', '\a', '\x17', '\x2', '\x2', '\xC0', '\xB6', '\x3', '\x2', '\x2', 
		'\x2', '\xC0', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\x3', 
		'\x2', '\x2', '\x2', '\xC2', '\xCB', '\a', '\x11', '\x2', '\x2', '\xC3', 
		'\xC8', '\x5', '\x12', '\n', '\x2', '\xC4', '\xC5', '\a', '\a', '\x2', 
		'\x2', '\xC5', '\xC7', '\x5', '\x12', '\n', '\x2', '\xC6', '\xC4', '\x3', 
		'\x2', '\x2', '\x2', '\xC7', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xC8', 
		'\xC6', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', '\x3', '\x2', '\x2', 
		'\x2', '\xC9', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xC8', '\x3', 
		'\x2', '\x2', '\x2', '\xCB', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xCB', 
		'\xCC', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCD', '\x3', '\x2', '\x2', 
		'\x2', '\xCD', '\xCF', '\a', '\x12', '\x2', '\x2', '\xCE', '\xD0', '\x5', 
		'\xE', '\b', '\x2', '\xCF', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xCF', 
		'\xD0', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xF9', '\x3', '\x2', '\x2', 
		'\x2', '\xD1', '\xD3', '\a', ';', '\x2', '\x2', '\xD2', '\xD1', '\x3', 
		'\x2', '\x2', '\x2', '\xD2', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD3', 
		'\xD4', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD5', '\a', ':', '\x2', 
		'\x2', '\xD5', '\xD8', '\a', '\x36', '\x2', '\x2', '\xD6', '\xD9', '\x5', 
		'\x18', '\r', '\x2', '\xD7', '\xD9', '\a', '(', '\x2', '\x2', '\xD8', 
		'\xD6', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD7', '\x3', '\x2', '\x2', 
		'\x2', '\xD9', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xDB', '\a', 
		'?', '\x2', '\x2', '\xDB', '\xDC', '\a', '\b', '\x2', '\x2', '\xDC', '\xE7', 
		'\a', '?', '\x2', '\x2', '\xDD', '\xDE', '\a', '\x15', '\x2', '\x2', '\xDE', 
		'\xE3', '\a', '?', '\x2', '\x2', '\xDF', '\xE0', '\a', '\a', '\x2', '\x2', 
		'\xE0', '\xE2', '\a', '?', '\x2', '\x2', '\xE1', '\xDF', '\x3', '\x2', 
		'\x2', '\x2', '\xE2', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE1', 
		'\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', '\x3', '\x2', '\x2', '\x2', 
		'\xE4', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE3', '\x3', '\x2', 
		'\x2', '\x2', '\xE6', '\xE8', '\a', '\x17', '\x2', '\x2', '\xE7', '\xDD', 
		'\x3', '\x2', '\x2', '\x2', '\xE7', '\xE8', '\x3', '\x2', '\x2', '\x2', 
		'\xE8', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xF2', '\a', '\x11', 
		'\x2', '\x2', '\xEA', '\xEF', '\x5', '\x12', '\n', '\x2', '\xEB', '\xEC', 
		'\a', '\a', '\x2', '\x2', '\xEC', '\xEE', '\x5', '\x12', '\n', '\x2', 
		'\xED', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xF1', '\x3', '\x2', 
		'\x2', '\x2', '\xEF', '\xED', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF0', 
		'\x3', '\x2', '\x2', '\x2', '\xF0', '\xF3', '\x3', '\x2', '\x2', '\x2', 
		'\xF1', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xEA', '\x3', '\x2', 
		'\x2', '\x2', '\xF2', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF4', 
		'\x3', '\x2', '\x2', '\x2', '\xF4', '\xF6', '\a', '\x12', '\x2', '\x2', 
		'\xF5', '\xF7', '\x5', '\xE', '\b', '\x2', '\xF6', '\xF5', '\x3', '\x2', 
		'\x2', '\x2', '\xF6', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF9', 
		'\x3', '\x2', '\x2', '\x2', '\xF8', '_', '\x3', '\x2', '\x2', '\x2', '\xF8', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xAB', '\x3', '\x2', '\x2', 
		'\x2', '\xF8', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xF9', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\xFA', '\xFB', '\a', '\x1A', '\x2', '\x2', '\xFB', 
		'\x100', '\x5', '\x10', '\t', '\x2', '\xFC', '\xFD', '\a', '\x31', '\x2', 
		'\x2', '\xFD', '\xFF', '\x5', '\x10', '\t', '\x2', '\xFE', '\xFC', '\x3', 
		'\x2', '\x2', '\x2', '\xFF', '\x102', '\x3', '\x2', '\x2', '\x2', '\x100', 
		'\xFE', '\x3', '\x2', '\x2', '\x2', '\x100', '\x101', '\x3', '\x2', '\x2', 
		'\x2', '\x101', '\xF', '\x3', '\x2', '\x2', '\x2', '\x102', '\x100', '\x3', 
		'\x2', '\x2', '\x2', '\x103', '\x104', '\x5', '\x18', '\r', '\x2', '\x104', 
		'\x105', '\a', '\x30', '\x2', '\x2', '\x105', '\x106', '\x5', '\x18', 
		'\r', '\x2', '\x106', '\x11', '\x3', '\x2', '\x2', '\x2', '\x107', '\x109', 
		'\a', '/', '\x2', '\x2', '\x108', '\x107', '\x3', '\x2', '\x2', '\x2', 
		'\x108', '\x109', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10A', '\x3', 
		'\x2', '\x2', '\x2', '\x10A', '\x10B', '\x5', '\x18', '\r', '\x2', '\x10B', 
		'\x10C', '\a', '?', '\x2', '\x2', '\x10C', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x10D', '\x10F', '\a', '/', '\x2', '\x2', '\x10E', '\x10D', '\x3', 
		'\x2', '\x2', '\x2', '\x10E', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x10F', 
		'\x110', '\x3', '\x2', '\x2', '\x2', '\x110', '\x111', '\x5', '\x18', 
		'\r', '\x2', '\x111', '\x112', '\a', '?', '\x2', '\x2', '\x112', '\x113', 
		'\a', '\n', '\x2', '\x2', '\x113', '\x114', '\x5', '\x1E', '\x10', '\x2', 
		'\x114', '\x15', '\x3', '\x2', '\x2', '\x2', '\x115', '\x117', '\a', '/', 
		'\x2', '\x2', '\x116', '\x115', '\x3', '\x2', '\x2', '\x2', '\x116', '\x117', 
		'\x3', '\x2', '\x2', '\x2', '\x117', '\x118', '\x3', '\x2', '\x2', '\x2', 
		'\x118', '\x119', '\a', '?', '\x2', '\x2', '\x119', '\x11A', '\a', '\x3', 
		'\x2', '\x2', '\x11A', '\x11B', '\x5', '\x1E', '\x10', '\x2', '\x11B', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11D', '\b', '\r', '\x1', 
		'\x2', '\x11D', '\x13A', '\a', ')', '\x2', '\x2', '\x11E', '\x13A', '\a', 
		'<', '\x2', '\x2', '\x11F', '\x13A', '\a', '?', '\x2', '\x2', '\x120', 
		'\x121', '\a', '?', '\x2', '\x2', '\x121', '\x122', '\a', '\x15', '\x2', 
		'\x2', '\x122', '\x127', '\x5', '\x18', '\r', '\x2', '\x123', '\x124', 
		'\a', '\a', '\x2', '\x2', '\x124', '\x126', '\x5', '\x18', '\r', '\x2', 
		'\x125', '\x123', '\x3', '\x2', '\x2', '\x2', '\x126', '\x129', '\x3', 
		'\x2', '\x2', '\x2', '\x127', '\x125', '\x3', '\x2', '\x2', '\x2', '\x127', 
		'\x128', '\x3', '\x2', '\x2', '\x2', '\x128', '\x12A', '\x3', '\x2', '\x2', 
		'\x2', '\x129', '\x127', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x12B', 
		'\a', '\x17', '\x2', '\x2', '\x12B', '\x13A', '\x3', '\x2', '\x2', '\x2', 
		'\x12C', '\x12D', '\a', '(', '\x2', '\x2', '\x12D', '\x136', '\a', '\x11', 
		'\x2', '\x2', '\x12E', '\x133', '\x5', '\x18', '\r', '\x2', '\x12F', '\x130', 
		'\a', '\a', '\x2', '\x2', '\x130', '\x132', '\x5', '\x18', '\r', '\x2', 
		'\x131', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x132', '\x135', '\x3', 
		'\x2', '\x2', '\x2', '\x133', '\x131', '\x3', '\x2', '\x2', '\x2', '\x133', 
		'\x134', '\x3', '\x2', '\x2', '\x2', '\x134', '\x137', '\x3', '\x2', '\x2', 
		'\x2', '\x135', '\x133', '\x3', '\x2', '\x2', '\x2', '\x136', '\x12E', 
		'\x3', '\x2', '\x2', '\x2', '\x136', '\x137', '\x3', '\x2', '\x2', '\x2', 
		'\x137', '\x138', '\x3', '\x2', '\x2', '\x2', '\x138', '\x13A', '\a', 
		'\x12', '\x2', '\x2', '\x139', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x139', 
		'\x11E', '\x3', '\x2', '\x2', '\x2', '\x139', '\x11F', '\x3', '\x2', '\x2', 
		'\x2', '\x139', '\x120', '\x3', '\x2', '\x2', '\x2', '\x139', '\x12C', 
		'\x3', '\x2', '\x2', '\x2', '\x13A', '\x14D', '\x3', '\x2', '\x2', '\x2', 
		'\x13B', '\x13C', '\f', '\x5', '\x2', '\x2', '\x13C', '\x145', '\a', '\x11', 
		'\x2', '\x2', '\x13D', '\x142', '\x5', '\x18', '\r', '\x2', '\x13E', '\x13F', 
		'\a', '\a', '\x2', '\x2', '\x13F', '\x141', '\x5', '\x18', '\r', '\x2', 
		'\x140', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x141', '\x144', '\x3', 
		'\x2', '\x2', '\x2', '\x142', '\x140', '\x3', '\x2', '\x2', '\x2', '\x142', 
		'\x143', '\x3', '\x2', '\x2', '\x2', '\x143', '\x146', '\x3', '\x2', '\x2', 
		'\x2', '\x144', '\x142', '\x3', '\x2', '\x2', '\x2', '\x145', '\x13D', 
		'\x3', '\x2', '\x2', '\x2', '\x145', '\x146', '\x3', '\x2', '\x2', '\x2', 
		'\x146', '\x147', '\x3', '\x2', '\x2', '\x2', '\x147', '\x14C', '\a', 
		'\x12', '\x2', '\x2', '\x148', '\x149', '\f', '\x3', '\x2', '\x2', '\x149', 
		'\x14A', '\a', '\x13', '\x2', '\x2', '\x14A', '\x14C', '\a', '\x14', '\x2', 
		'\x2', '\x14B', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x14B', '\x148', 
		'\x3', '\x2', '\x2', '\x2', '\x14C', '\x14F', '\x3', '\x2', '\x2', '\x2', 
		'\x14D', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x14E', '\x3', 
		'\x2', '\x2', '\x2', '\x14E', '\x19', '\x3', '\x2', '\x2', '\x2', '\x14F', 
		'\x14D', '\x3', '\x2', '\x2', '\x2', '\x150', '\x154', '\a', '\xF', '\x2', 
		'\x2', '\x151', '\x153', '\x5', '\x1A', '\xE', '\x2', '\x152', '\x151', 
		'\x3', '\x2', '\x2', '\x2', '\x153', '\x156', '\x3', '\x2', '\x2', '\x2', 
		'\x154', '\x152', '\x3', '\x2', '\x2', '\x2', '\x154', '\x155', '\x3', 
		'\x2', '\x2', '\x2', '\x155', '\x157', '\x3', '\x2', '\x2', '\x2', '\x156', 
		'\x154', '\x3', '\x2', '\x2', '\x2', '\x157', '\x18D', '\a', '\x10', '\x2', 
		'\x2', '\x158', '\x159', '\a', '+', '\x2', '\x2', '\x159', '\x15A', '\x5', 
		'\x1E', '\x10', '\x2', '\x15A', '\x15D', '\x5', '\x1A', '\xE', '\x2', 
		'\x15B', '\x15C', '\a', '\x34', '\x2', '\x2', '\x15C', '\x15E', '\x5', 
		'\x1A', '\xE', '\x2', '\x15D', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x15D', 
		'\x15E', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x18D', '\x3', '\x2', '\x2', 
		'\x2', '\x15F', '\x166', '\a', '\x35', '\x2', '\x2', '\x160', '\x163', 
		'\x5', '\x14', '\v', '\x2', '\x161', '\x163', '\x5', '\x16', '\f', '\x2', 
		'\x162', '\x160', '\x3', '\x2', '\x2', '\x2', '\x162', '\x161', '\x3', 
		'\x2', '\x2', '\x2', '\x163', '\x164', '\x3', '\x2', '\x2', '\x2', '\x164', 
		'\x165', '\a', '\t', '\x2', '\x2', '\x165', '\x167', '\x3', '\x2', '\x2', 
		'\x2', '\x166', '\x162', '\x3', '\x2', '\x2', '\x2', '\x166', '\x167', 
		'\x3', '\x2', '\x2', '\x2', '\x167', '\x168', '\x3', '\x2', '\x2', '\x2', 
		'\x168', '\x16B', '\x5', '\x1E', '\x10', '\x2', '\x169', '\x16A', '\a', 
		'\t', '\x2', '\x2', '\x16A', '\x16C', '\x5', '\x1E', '\x10', '\x2', '\x16B', 
		'\x169', '\x3', '\x2', '\x2', '\x2', '\x16B', '\x16C', '\x3', '\x2', '\x2', 
		'\x2', '\x16C', '\x16D', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x16E', 
		'\x5', '\x1A', '\xE', '\x2', '\x16E', '\x18D', '\x3', '\x2', '\x2', '\x2', 
		'\x16F', '\x171', '\a', '*', '\x2', '\x2', '\x170', '\x172', '\x5', '\x1E', 
		'\x10', '\x2', '\x171', '\x170', '\x3', '\x2', '\x2', '\x2', '\x171', 
		'\x172', '\x3', '\x2', '\x2', '\x2', '\x172', '\x174', '\x3', '\x2', '\x2', 
		'\x2', '\x173', '\x175', '\a', '\t', '\x2', '\x2', '\x174', '\x173', '\x3', 
		'\x2', '\x2', '\x2', '\x174', '\x175', '\x3', '\x2', '\x2', '\x2', '\x175', 
		'\x18D', '\x3', '\x2', '\x2', '\x2', '\x176', '\x178', '\x5', '\x16', 
		'\f', '\x2', '\x177', '\x179', '\a', '\t', '\x2', '\x2', '\x178', '\x177', 
		'\x3', '\x2', '\x2', '\x2', '\x178', '\x179', '\x3', '\x2', '\x2', '\x2', 
		'\x179', '\x18D', '\x3', '\x2', '\x2', '\x2', '\x17A', '\x17C', '\x5', 
		'\x14', '\v', '\x2', '\x17B', '\x17D', '\a', '\t', '\x2', '\x2', '\x17C', 
		'\x17B', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x17D', '\x3', '\x2', '\x2', 
		'\x2', '\x17D', '\x18D', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x180', 
		'\x5', '\x12', '\n', '\x2', '\x17F', '\x181', '\a', '\t', '\x2', '\x2', 
		'\x180', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x180', '\x181', '\x3', 
		'\x2', '\x2', '\x2', '\x181', '\x18D', '\x3', '\x2', '\x2', '\x2', '\x182', 
		'\x183', '\x5', '\x1E', '\x10', '\x2', '\x183', '\x184', '\a', '\n', '\x2', 
		'\x2', '\x184', '\x186', '\x5', '\x1E', '\x10', '\x2', '\x185', '\x187', 
		'\a', '\t', '\x2', '\x2', '\x186', '\x185', '\x3', '\x2', '\x2', '\x2', 
		'\x186', '\x187', '\x3', '\x2', '\x2', '\x2', '\x187', '\x18D', '\x3', 
		'\x2', '\x2', '\x2', '\x188', '\x18A', '\x5', '\x1E', '\x10', '\x2', '\x189', 
		'\x18B', '\a', '\t', '\x2', '\x2', '\x18A', '\x189', '\x3', '\x2', '\x2', 
		'\x2', '\x18A', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x18D', 
		'\x3', '\x2', '\x2', '\x2', '\x18C', '\x150', '\x3', '\x2', '\x2', '\x2', 
		'\x18C', '\x158', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x15F', '\x3', 
		'\x2', '\x2', '\x2', '\x18C', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x18C', 
		'\x176', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x17A', '\x3', '\x2', '\x2', 
		'\x2', '\x18C', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x182', 
		'\x3', '\x2', '\x2', '\x2', '\x18C', '\x188', '\x3', '\x2', '\x2', '\x2', 
		'\x18D', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x192', '\a', '\xF', 
		'\x2', '\x2', '\x18F', '\x191', '\x5', '\x1A', '\xE', '\x2', '\x190', 
		'\x18F', '\x3', '\x2', '\x2', '\x2', '\x191', '\x194', '\x3', '\x2', '\x2', 
		'\x2', '\x192', '\x190', '\x3', '\x2', '\x2', '\x2', '\x192', '\x193', 
		'\x3', '\x2', '\x2', '\x2', '\x193', '\x195', '\x3', '\x2', '\x2', '\x2', 
		'\x194', '\x192', '\x3', '\x2', '\x2', '\x2', '\x195', '\x196', '\a', 
		'\x10', '\x2', '\x2', '\x196', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x197', 
		'\x198', '\b', '\x10', '\x1', '\x2', '\x198', '\x1FA', '\t', '\x2', '\x2', 
		'\x2', '\x199', '\x19B', '\x5', '\x12', '\n', '\x2', '\x19A', '\x199', 
		'\x3', '\x2', '\x2', '\x2', '\x19A', '\x19B', '\x3', '\x2', '\x2', '\x2', 
		'\x19B', '\x19C', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x19F', '\a', 
		'\x38', '\x2', '\x2', '\x19D', '\x1A0', '\x5', '\x1C', '\xF', '\x2', '\x19E', 
		'\x1A0', '\x5', '\x1E', '\x10', '\x2', '\x19F', '\x19D', '\x3', '\x2', 
		'\x2', '\x2', '\x19F', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x1FA', 
		'\x3', '\x2', '\x2', '\x2', '\x1A1', '\x1AA', '\a', '\x11', '\x2', '\x2', 
		'\x1A2', '\x1A7', '\x5', '\x12', '\n', '\x2', '\x1A3', '\x1A4', '\a', 
		'\a', '\x2', '\x2', '\x1A4', '\x1A6', '\x5', '\x12', '\n', '\x2', '\x1A5', 
		'\x1A3', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\x1A9', '\x3', '\x2', '\x2', 
		'\x2', '\x1A7', '\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1A8', 
		'\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1AB', '\x3', '\x2', '\x2', '\x2', 
		'\x1A9', '\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1AA', '\x1A2', '\x3', 
		'\x2', '\x2', '\x2', '\x1AA', '\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1AB', 
		'\x1AC', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1AD', '\a', '\x12', '\x2', 
		'\x2', '\x1AD', '\x1B0', '\a', '\x38', '\x2', '\x2', '\x1AE', '\x1B1', 
		'\x5', '\x1C', '\xF', '\x2', '\x1AF', '\x1B1', '\x5', '\x1E', '\x10', 
		'\x2', '\x1B0', '\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\x1AF', 
		'\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1FA', '\x3', '\x2', '\x2', '\x2', 
		'\x1B2', '\x1B6', '\a', '?', '\x2', '\x2', '\x1B3', '\x1B4', '\a', '\x15', 
		'\x2', '\x2', '\x1B4', '\x1B5', '\a', '\x37', '\x2', '\x2', '\x1B5', '\x1B7', 
		'\a', '\x17', '\x2', '\x2', '\x1B6', '\x1B3', '\x3', '\x2', '\x2', '\x2', 
		'\x1B6', '\x1B7', '\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1C3', '\x3', 
		'\x2', '\x2', '\x2', '\x1B8', '\x1B9', '\a', '\x15', '\x2', '\x2', '\x1B9', 
		'\x1BE', '\x5', '\x18', '\r', '\x2', '\x1BA', '\x1BB', '\a', '\a', '\x2', 
		'\x2', '\x1BB', '\x1BD', '\x5', '\x18', '\r', '\x2', '\x1BC', '\x1BA', 
		'\x3', '\x2', '\x2', '\x2', '\x1BD', '\x1C0', '\x3', '\x2', '\x2', '\x2', 
		'\x1BE', '\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1BF', '\x3', 
		'\x2', '\x2', '\x2', '\x1BF', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\x1C0', 
		'\x1BE', '\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1C2', '\a', '\x17', '\x2', 
		'\x2', '\x1C2', '\x1C4', '\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1B8', 
		'\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1C4', '\x3', '\x2', '\x2', '\x2', 
		'\x1C4', '\x1C5', '\x3', '\x2', '\x2', '\x2', '\x1C5', '\x1CE', '\a', 
		'\x11', '\x2', '\x2', '\x1C6', '\x1CB', '\x5', '\x1E', '\x10', '\x2', 
		'\x1C7', '\x1C8', '\a', '\a', '\x2', '\x2', '\x1C8', '\x1CA', '\x5', '\x1E', 
		'\x10', '\x2', '\x1C9', '\x1C7', '\x3', '\x2', '\x2', '\x2', '\x1CA', 
		'\x1CD', '\x3', '\x2', '\x2', '\x2', '\x1CB', '\x1C9', '\x3', '\x2', '\x2', 
		'\x2', '\x1CB', '\x1CC', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x1CF', 
		'\x3', '\x2', '\x2', '\x2', '\x1CD', '\x1CB', '\x3', '\x2', '\x2', '\x2', 
		'\x1CE', '\x1C6', '\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1CF', '\x3', 
		'\x2', '\x2', '\x2', '\x1CF', '\x1D0', '\x3', '\x2', '\x2', '\x2', '\x1D0', 
		'\x1FA', '\a', '\x12', '\x2', '\x2', '\x1D1', '\x1D2', '\x5', '\x18', 
		'\r', '\x2', '\x1D2', '\x1D3', '\a', '\b', '\x2', '\x2', '\x1D3', '\x1D4', 
		'\a', '\x32', '\x2', '\x2', '\x1D4', '\x1FA', '\x3', '\x2', '\x2', '\x2', 
		'\x1D5', '\x1D6', '\x5', '\x18', '\r', '\x2', '\x1D6', '\x1D7', '\a', 
		'\b', '\x2', '\x2', '\x1D7', '\x1D8', '\a', '\x33', '\x2', '\x2', '\x1D8', 
		'\x1FA', '\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1DA', '\a', '.', '\x2', 
		'\x2', '\x1DA', '\x1ED', '\x5', '\x18', '\r', '\x2', '\x1DB', '\x1DC', 
		'\a', '\xF', '\x2', '\x2', '\x1DC', '\x1DD', '\a', '?', '\x2', '\x2', 
		'\x1DD', '\x1DE', '\a', '\n', '\x2', '\x2', '\x1DE', '\x1DF', '\x5', '\x1E', 
		'\x10', '\x2', '\x1DF', '\x1E6', '\x3', '\x2', '\x2', '\x2', '\x1E0', 
		'\x1E1', '\a', '\a', '\x2', '\x2', '\x1E1', '\x1E2', '\a', '?', '\x2', 
		'\x2', '\x1E2', '\x1E3', '\a', '\n', '\x2', '\x2', '\x1E3', '\x1E5', '\x5', 
		'\x1E', '\x10', '\x2', '\x1E4', '\x1E0', '\x3', '\x2', '\x2', '\x2', '\x1E5', 
		'\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1E4', '\x3', '\x2', '\x2', 
		'\x2', '\x1E6', '\x1E7', '\x3', '\x2', '\x2', '\x2', '\x1E7', '\x1E9', 
		'\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1E6', '\x3', '\x2', '\x2', '\x2', 
		'\x1E9', '\x1EA', '\a', '\x10', '\x2', '\x2', '\x1EA', '\x1EC', '\x3', 
		'\x2', '\x2', '\x2', '\x1EB', '\x1DB', '\x3', '\x2', '\x2', '\x2', '\x1EC', 
		'\x1EF', '\x3', '\x2', '\x2', '\x2', '\x1ED', '\x1EB', '\x3', '\x2', '\x2', 
		'\x2', '\x1ED', '\x1EE', '\x3', '\x2', '\x2', '\x2', '\x1EE', '\x1FA', 
		'\x3', '\x2', '\x2', '\x2', '\x1EF', '\x1ED', '\x3', '\x2', '\x2', '\x2', 
		'\x1F0', '\x1FA', '\a', '?', '\x2', '\x2', '\x1F1', '\x1F2', '\a', '\x11', 
		'\x2', '\x2', '\x1F2', '\x1F3', '\x5', '\x1E', '\x10', '\x2', '\x1F3', 
		'\x1F4', '\a', '\x12', '\x2', '\x2', '\x1F4', '\x1FA', '\x3', '\x2', '\x2', 
		'\x2', '\x1F5', '\x1F6', '\a', '\x1C', '\x2', '\x2', '\x1F6', '\x1FA', 
		'\x5', '\x1E', '\x10', '\n', '\x1F7', '\x1F8', '\a', '\f', '\x2', '\x2', 
		'\x1F8', '\x1FA', '\x5', '\x1E', '\x10', '\t', '\x1F9', '\x197', '\x3', 
		'\x2', '\x2', '\x2', '\x1F9', '\x19A', '\x3', '\x2', '\x2', '\x2', '\x1F9', 
		'\x1A1', '\x3', '\x2', '\x2', '\x2', '\x1F9', '\x1B2', '\x3', '\x2', '\x2', 
		'\x2', '\x1F9', '\x1D1', '\x3', '\x2', '\x2', '\x2', '\x1F9', '\x1D5', 
		'\x3', '\x2', '\x2', '\x2', '\x1F9', '\x1D9', '\x3', '\x2', '\x2', '\x2', 
		'\x1F9', '\x1F0', '\x3', '\x2', '\x2', '\x2', '\x1F9', '\x1F1', '\x3', 
		'\x2', '\x2', '\x2', '\x1F9', '\x1F5', '\x3', '\x2', '\x2', '\x2', '\x1F9', 
		'\x1F7', '\x3', '\x2', '\x2', '\x2', '\x1FA', '\x233', '\x3', '\x2', '\x2', 
		'\x2', '\x1FB', '\x1FC', '\f', '\b', '\x2', '\x2', '\x1FC', '\x1FD', '\t', 
		'\x3', '\x2', '\x2', '\x1FD', '\x232', '\x5', '\x1E', '\x10', '\t', '\x1FE', 
		'\x1FF', '\f', '\a', '\x2', '\x2', '\x1FF', '\x200', '\t', '\x4', '\x2', 
		'\x2', '\x200', '\x232', '\x5', '\x1E', '\x10', '\b', '\x201', '\x202', 
		'\f', '\x6', '\x2', '\x2', '\x202', '\x203', '\t', '\x5', '\x2', '\x2', 
		'\x203', '\x232', '\x5', '\x1E', '\x10', '\a', '\x204', '\x205', '\f', 
		'\x5', '\x2', '\x2', '\x205', '\x206', '\t', '\x6', '\x2', '\x2', '\x206', 
		'\x232', '\x5', '\x1E', '\x10', '\x6', '\x207', '\x208', '\f', '\x4', 
		'\x2', '\x2', '\x208', '\x209', '\a', '\x1D', '\x2', '\x2', '\x209', '\x232', 
		'\x5', '\x1E', '\x10', '\x5', '\x20A', '\x20B', '\f', '\x3', '\x2', '\x2', 
		'\x20B', '\x20C', '\a', '\x1E', '\x2', '\x2', '\x20C', '\x232', '\x5', 
		'\x1E', '\x10', '\x4', '\x20D', '\x20E', '\f', '\x11', '\x2', '\x2', '\x20E', 
		'\x20F', '\a', '\b', '\x2', '\x2', '\x20F', '\x213', '\a', '?', '\x2', 
		'\x2', '\x210', '\x211', '\a', '\x15', '\x2', '\x2', '\x211', '\x212', 
		'\a', '\x37', '\x2', '\x2', '\x212', '\x214', '\a', '\x17', '\x2', '\x2', 
		'\x213', '\x210', '\x3', '\x2', '\x2', '\x2', '\x213', '\x214', '\x3', 
		'\x2', '\x2', '\x2', '\x214', '\x220', '\x3', '\x2', '\x2', '\x2', '\x215', 
		'\x216', '\a', '\x15', '\x2', '\x2', '\x216', '\x21B', '\x5', '\x18', 
		'\r', '\x2', '\x217', '\x218', '\a', '\a', '\x2', '\x2', '\x218', '\x21A', 
		'\x5', '\x18', '\r', '\x2', '\x219', '\x217', '\x3', '\x2', '\x2', '\x2', 
		'\x21A', '\x21D', '\x3', '\x2', '\x2', '\x2', '\x21B', '\x219', '\x3', 
		'\x2', '\x2', '\x2', '\x21B', '\x21C', '\x3', '\x2', '\x2', '\x2', '\x21C', 
		'\x21E', '\x3', '\x2', '\x2', '\x2', '\x21D', '\x21B', '\x3', '\x2', '\x2', 
		'\x2', '\x21E', '\x21F', '\a', '\x17', '\x2', '\x2', '\x21F', '\x221', 
		'\x3', '\x2', '\x2', '\x2', '\x220', '\x215', '\x3', '\x2', '\x2', '\x2', 
		'\x220', '\x221', '\x3', '\x2', '\x2', '\x2', '\x221', '\x222', '\x3', 
		'\x2', '\x2', '\x2', '\x222', '\x22B', '\a', '\x11', '\x2', '\x2', '\x223', 
		'\x228', '\x5', '\x1E', '\x10', '\x2', '\x224', '\x225', '\a', '\a', '\x2', 
		'\x2', '\x225', '\x227', '\x5', '\x1E', '\x10', '\x2', '\x226', '\x224', 
		'\x3', '\x2', '\x2', '\x2', '\x227', '\x22A', '\x3', '\x2', '\x2', '\x2', 
		'\x228', '\x226', '\x3', '\x2', '\x2', '\x2', '\x228', '\x229', '\x3', 
		'\x2', '\x2', '\x2', '\x229', '\x22C', '\x3', '\x2', '\x2', '\x2', '\x22A', 
		'\x228', '\x3', '\x2', '\x2', '\x2', '\x22B', '\x223', '\x3', '\x2', '\x2', 
		'\x2', '\x22B', '\x22C', '\x3', '\x2', '\x2', '\x2', '\x22C', '\x22D', 
		'\x3', '\x2', '\x2', '\x2', '\x22D', '\x232', '\a', '\x12', '\x2', '\x2', 
		'\x22E', '\x22F', '\f', '\xE', '\x2', '\x2', '\x22F', '\x230', '\a', '\b', 
		'\x2', '\x2', '\x230', '\x232', '\a', '?', '\x2', '\x2', '\x231', '\x1FB', 
		'\x3', '\x2', '\x2', '\x2', '\x231', '\x1FE', '\x3', '\x2', '\x2', '\x2', 
		'\x231', '\x201', '\x3', '\x2', '\x2', '\x2', '\x231', '\x204', '\x3', 
		'\x2', '\x2', '\x2', '\x231', '\x207', '\x3', '\x2', '\x2', '\x2', '\x231', 
		'\x20A', '\x3', '\x2', '\x2', '\x2', '\x231', '\x20D', '\x3', '\x2', '\x2', 
		'\x2', '\x231', '\x22E', '\x3', '\x2', '\x2', '\x2', '\x232', '\x235', 
		'\x3', '\x2', '\x2', '\x2', '\x233', '\x231', '\x3', '\x2', '\x2', '\x2', 
		'\x233', '\x234', '\x3', '\x2', '\x2', '\x2', '\x234', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x235', '\x233', '\x3', '\x2', '\x2', '\x2', '[', 
		'\"', '$', '\x31', '\x33', '\x39', '\x43', 'G', 'K', 'O', 'R', 'T', '\\', 
		'_', '\x63', 'l', 'p', 'x', '{', '\x7F', '\x83', '\x87', '\x90', '\x94', 
		'\x9C', '\x9F', '\xA3', '\xA8', '\xAB', '\xAF', '\xB3', '\xBC', '\xC0', 
		'\xC8', '\xCB', '\xCF', '\xD2', '\xD8', '\xE3', '\xE7', '\xEF', '\xF2', 
		'\xF6', '\xF8', '\x100', '\x108', '\x10E', '\x116', '\x127', '\x133', 
		'\x136', '\x139', '\x142', '\x145', '\x14B', '\x14D', '\x154', '\x15D', 
		'\x162', '\x166', '\x16B', '\x171', '\x174', '\x178', '\x17C', '\x180', 
		'\x186', '\x18A', '\x18C', '\x192', '\x19A', '\x19F', '\x1A7', '\x1AA', 
		'\x1B0', '\x1B6', '\x1BE', '\x1C3', '\x1CB', '\x1CE', '\x1E6', '\x1ED', 
		'\x1F9', '\x213', '\x21B', '\x220', '\x228', '\x22B', '\x231', '\x233',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
