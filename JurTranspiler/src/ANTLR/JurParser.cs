//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/jurek/Documents/GitHub/JurTranspiler/JurTranspiler/src/ANTLR/Jur.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class JurParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, LINE_COMMENT=3, WHITESPACE=4, NEWLINE=5, COMA=6, DOT=7, 
		SEMICOLON=8, ASSIGN=9, ADD=10, SUBTRACT=11, TIMES=12, DIVIDE=13, LEFT_CURLY=14, 
		RIGHT_CURLY=15, LEFT_PARENT=16, RIGHT_PARENT=17, LEFT_SQUARE_PARENT=18, 
		RIGHT_SQUARE_PARENT=19, LESS=20, LEQUAL=21, GREATER=22, GREQUAL=23, EQUAL=24, 
		WHERE=25, NOT_EQUAL=26, NOT=27, LOGICAL_AND=28, OR=29, DECREMENT=30, INCREMENT=31, 
		STRING_VALUE=32, NUMBER_VALUE=33, BOOL_VALUE=34, NULL_VALUE=35, VALUE=36, 
		STRUCT=37, VOID=38, ANY=39, RETURN=40, BREAK=41, CONTINUE=42, IF=43, ABSTRACTION=44, 
		MAIN=45, NEW=46, IS=47, AND=48, DEFAULT_VALUE=49, TYPE=50, ELSE=51, OTHERWISE=52, 
		FOR=53, EXTERN=54, POLY=55, ARROW=56, MEMBER=57, STATIC=58, PRIVATE=59, 
		PRIMITIVE=60, UNDEFINED_VALUE=61, ARITHMETIC=62, LOGIC=63, ID=64;
	public const int
		RULE_program = 0, RULE_main = 1, RULE_abstraction = 2, RULE_structDeclaration = 3, 
		RULE_inlinedType = 4, RULE_functionDeclaration = 5, RULE_constraints = 6, 
		RULE_constrain = 7, RULE_uninitializedVarDeclaration = 8, RULE_initializedVariableDeclaration = 9, 
		RULE_inferedVariableDeclaration = 10, RULE_type = 11, RULE_statement = 12, 
		RULE_block = 13, RULE_singleGuard = 14, RULE_expression = 15;
	public static readonly string[] ruleNames = {
		"program", "main", "abstraction", "structDeclaration", "inlinedType", 
		"functionDeclaration", "constraints", "constrain", "uninitializedVarDeclaration", 
		"initializedVariableDeclaration", "inferedVariableDeclaration", "type", 
		"statement", "block", "singleGuard", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "':='", "'|'", null, null, null, "','", "'.'", "';'", "'='", "'+'", 
		"'-'", "'*'", "'/'", "'{'", "'}'", "'('", "')'", "'['", "']'", "'<'", 
		"'<='", "'>'", "'>='", "'=='", "'where'", "'!='", "'!'", "'&&'", "'||'", 
		"'--'", "'++'", null, null, null, "'null'", null, "'struct'", "'void'", 
		"'any'", "'return'", "'break'", "'continue'", "'if'", "'abstraction'", 
		"'main'", "'new'", "'is'", "'and'", "'default'", "'typeof'", "'else'", 
		"'otherwise'", "'for'", "'extern'", "'poly'", "'->'", "'member'", "'static'", 
		"'private'", null, "'undefined'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "LINE_COMMENT", "WHITESPACE", "NEWLINE", "COMA", "DOT", 
		"SEMICOLON", "ASSIGN", "ADD", "SUBTRACT", "TIMES", "DIVIDE", "LEFT_CURLY", 
		"RIGHT_CURLY", "LEFT_PARENT", "RIGHT_PARENT", "LEFT_SQUARE_PARENT", "RIGHT_SQUARE_PARENT", 
		"LESS", "LEQUAL", "GREATER", "GREQUAL", "EQUAL", "WHERE", "NOT_EQUAL", 
		"NOT", "LOGICAL_AND", "OR", "DECREMENT", "INCREMENT", "STRING_VALUE", 
		"NUMBER_VALUE", "BOOL_VALUE", "NULL_VALUE", "VALUE", "STRUCT", "VOID", 
		"ANY", "RETURN", "BREAK", "CONTINUE", "IF", "ABSTRACTION", "MAIN", "NEW", 
		"IS", "AND", "DEFAULT_VALUE", "TYPE", "ELSE", "OTHERWISE", "FOR", "EXTERN", 
		"POLY", "ARROW", "MEMBER", "STATIC", "PRIVATE", "PRIMITIVE", "UNDEFINED_VALUE", 
		"ARITHMETIC", "LOGIC", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Jur.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JurParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JurParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JurParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(JurParser.Eof, 0); }
		public MainContext[] main() {
			return GetRuleContexts<MainContext>();
		}
		public MainContext main(int i) {
			return GetRuleContext<MainContext>(i);
		}
		public AbstractionContext[] abstraction() {
			return GetRuleContexts<AbstractionContext>();
		}
		public AbstractionContext abstraction(int i) {
			return GetRuleContext<AbstractionContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ABSTRACTION || _la==MAIN) {
				{
				State = 34;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case MAIN:
					{
					State = 32; main();
					}
					break;
				case ABSTRACTION:
					{
					State = 33; abstraction();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 38;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 39; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainContext : ParserRuleContext {
		public ITerminalNode MAIN() { return GetToken(JurParser.MAIN, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 2, RULE_main);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41; Match(MAIN);
			State = 42; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractionContext : ParserRuleContext {
		public ITerminalNode ABSTRACTION() { return GetToken(JurParser.ABSTRACTION, 0); }
		public ITerminalNode NUMBER_VALUE() { return GetToken(JurParser.NUMBER_VALUE, 0); }
		public ITerminalNode LEFT_CURLY() { return GetToken(JurParser.LEFT_CURLY, 0); }
		public ITerminalNode RIGHT_CURLY() { return GetToken(JurParser.RIGHT_CURLY, 0); }
		public FunctionDeclarationContext[] functionDeclaration() {
			return GetRuleContexts<FunctionDeclarationContext>();
		}
		public FunctionDeclarationContext functionDeclaration(int i) {
			return GetRuleContext<FunctionDeclarationContext>(i);
		}
		public StructDeclarationContext[] structDeclaration() {
			return GetRuleContexts<StructDeclarationContext>();
		}
		public StructDeclarationContext structDeclaration(int i) {
			return GetRuleContext<StructDeclarationContext>(i);
		}
		public AbstractionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstraction; } }
	}

	[RuleVersion(0)]
	public AbstractionContext abstraction() {
		AbstractionContext _localctx = new AbstractionContext(Context, State);
		EnterRule(_localctx, 4, RULE_abstraction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44; Match(ABSTRACTION);
			State = 45; Match(NUMBER_VALUE);
			State = 46; Match(LEFT_CURLY);
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 37)) & ~0x3f) == 0 && ((1L << (_la - 37)) & ((1L << (STRUCT - 37)) | (1L << (VOID - 37)) | (1L << (ANY - 37)) | (1L << (EXTERN - 37)) | (1L << (STATIC - 37)) | (1L << (PRIVATE - 37)) | (1L << (PRIMITIVE - 37)) | (1L << (ID - 37)))) != 0)) {
				{
				State = 49;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VOID:
				case ANY:
				case EXTERN:
				case STATIC:
				case PRIVATE:
				case PRIMITIVE:
				case ID:
					{
					State = 47; functionDeclaration();
					}
					break;
				case STRUCT:
					{
					State = 48; structDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 54; Match(RIGHT_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationContext : ParserRuleContext {
		public ITerminalNode STRUCT() { return GetToken(JurParser.STRUCT, 0); }
		public ITerminalNode[] ID() { return GetTokens(JurParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(JurParser.ID, i);
		}
		public ITerminalNode LEFT_CURLY() { return GetToken(JurParser.LEFT_CURLY, 0); }
		public ITerminalNode RIGHT_CURLY() { return GetToken(JurParser.RIGHT_CURLY, 0); }
		public ITerminalNode LESS() { return GetToken(JurParser.LESS, 0); }
		public ITerminalNode GREATER() { return GetToken(JurParser.GREATER, 0); }
		public InlinedTypeContext[] inlinedType() {
			return GetRuleContexts<InlinedTypeContext>();
		}
		public InlinedTypeContext inlinedType(int i) {
			return GetRuleContext<InlinedTypeContext>(i);
		}
		public UninitializedVarDeclarationContext[] uninitializedVarDeclaration() {
			return GetRuleContexts<UninitializedVarDeclarationContext>();
		}
		public UninitializedVarDeclarationContext uninitializedVarDeclaration(int i) {
			return GetRuleContext<UninitializedVarDeclarationContext>(i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(JurParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(JurParser.SEMICOLON, i);
		}
		public ITerminalNode[] COMA() { return GetTokens(JurParser.COMA); }
		public ITerminalNode COMA(int i) {
			return GetToken(JurParser.COMA, i);
		}
		public StructDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaration; } }
	}

	[RuleVersion(0)]
	public StructDeclarationContext structDeclaration() {
		StructDeclarationContext _localctx = new StructDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_structDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56; Match(STRUCT);
			State = 57; Match(ID);
			State = 68;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LESS) {
				{
				State = 58; Match(LESS);
				State = 59; Match(ID);
				State = 64;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMA) {
					{
					{
					State = 60; Match(COMA);
					State = 61; Match(ID);
					}
					}
					State = 66;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 67; Match(GREATER);
				}
			}

			State = 70; Match(LEFT_CURLY);
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & ((1L << (VOID - 38)) | (1L << (ANY - 38)) | (1L << (IS - 38)) | (1L << (PRIMITIVE - 38)) | (1L << (ID - 38)))) != 0)) {
				{
				State = 75;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VOID:
				case ANY:
				case PRIMITIVE:
				case ID:
					{
					{
					State = 71; uninitializedVarDeclaration();
					State = 72; Match(SEMICOLON);
					}
					}
					break;
				case IS:
					{
					State = 74; inlinedType();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 80; Match(RIGHT_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlinedTypeContext : ParserRuleContext {
		public ITerminalNode IS() { return GetToken(JurParser.IS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(JurParser.SEMICOLON, 0); }
		public InlinedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlinedType; } }
	}

	[RuleVersion(0)]
	public InlinedTypeContext inlinedType() {
		InlinedTypeContext _localctx = new InlinedTypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_inlinedType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82; Match(IS);
			State = 83; type(0);
			State = 84; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(JurParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(JurParser.ID, i);
		}
		public ITerminalNode LEFT_PARENT() { return GetToken(JurParser.LEFT_PARENT, 0); }
		public ITerminalNode RIGHT_PARENT() { return GetToken(JurParser.RIGHT_PARENT, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(JurParser.VOID, 0); }
		public ITerminalNode PRIVATE() { return GetToken(JurParser.PRIVATE, 0); }
		public ITerminalNode LESS() { return GetToken(JurParser.LESS, 0); }
		public ITerminalNode GREATER() { return GetToken(JurParser.GREATER, 0); }
		public UninitializedVarDeclarationContext[] uninitializedVarDeclaration() {
			return GetRuleContexts<UninitializedVarDeclarationContext>();
		}
		public UninitializedVarDeclarationContext uninitializedVarDeclaration(int i) {
			return GetRuleContext<UninitializedVarDeclarationContext>(i);
		}
		public ConstraintsContext constraints() {
			return GetRuleContext<ConstraintsContext>(0);
		}
		public ITerminalNode[] COMA() { return GetTokens(JurParser.COMA); }
		public ITerminalNode COMA(int i) {
			return GetToken(JurParser.COMA, i);
		}
		public ITerminalNode ARROW() { return GetToken(JurParser.ARROW, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(JurParser.SEMICOLON, 0); }
		public ITerminalNode EXTERN() { return GetToken(JurParser.EXTERN, 0); }
		public ITerminalNode MEMBER() { return GetToken(JurParser.MEMBER, 0); }
		public ITerminalNode STATIC() { return GetToken(JurParser.STATIC, 0); }
		public ITerminalNode DOT() { return GetToken(JurParser.DOT, 0); }
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_functionDeclaration);
		int _la;
		try {
			State = 242;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIVATE) {
					{
					State = 86; Match(PRIVATE);
					}
				}

				State = 91;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
				case 1:
					{
					State = 89; type(0);
					}
					break;
				case 2:
					{
					State = 90; Match(VOID);
					}
					break;
				}
				State = 93; Match(ID);
				State = 104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LESS) {
					{
					State = 94; Match(LESS);
					State = 95; Match(ID);
					State = 100;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 96; Match(COMA);
						State = 97; Match(ID);
						}
						}
						State = 102;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 103; Match(GREATER);
					}
				}

				State = 106; Match(LEFT_PARENT);
				State = 115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & ((1L << (VOID - 38)) | (1L << (ANY - 38)) | (1L << (PRIMITIVE - 38)) | (1L << (ID - 38)))) != 0)) {
					{
					State = 107; uninitializedVarDeclaration();
					State = 112;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 108; Match(COMA);
						State = 109; uninitializedVarDeclaration();
						}
						}
						State = 114;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 117; Match(RIGHT_PARENT);
				State = 119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 118; constraints();
					}
				}

				State = 121; block();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIVATE) {
					{
					State = 122; Match(PRIVATE);
					}
				}

				State = 127;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 125; type(0);
					}
					break;
				case 2:
					{
					State = 126; Match(VOID);
					}
					break;
				}
				State = 129; Match(ID);
				State = 140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LESS) {
					{
					State = 130; Match(LESS);
					State = 131; Match(ID);
					State = 136;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 132; Match(COMA);
						State = 133; Match(ID);
						}
						}
						State = 138;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 139; Match(GREATER);
					}
				}

				State = 142; Match(LEFT_PARENT);
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & ((1L << (VOID - 38)) | (1L << (ANY - 38)) | (1L << (PRIMITIVE - 38)) | (1L << (ID - 38)))) != 0)) {
					{
					State = 143; uninitializedVarDeclaration();
					State = 148;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 144; Match(COMA);
						State = 145; uninitializedVarDeclaration();
						}
						}
						State = 150;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 153; Match(RIGHT_PARENT);
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 154; constraints();
					}
				}

				State = 157; Match(ARROW);
				State = 158; expression(0);
				State = 159; Match(SEMICOLON);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIVATE) {
					{
					State = 161; Match(PRIVATE);
					}
				}

				State = 164; Match(EXTERN);
				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MEMBER) {
					{
					State = 165; Match(MEMBER);
					}
				}

				State = 170;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
				case 1:
					{
					State = 168; type(0);
					}
					break;
				case 2:
					{
					State = 169; Match(VOID);
					}
					break;
				}
				State = 172; Match(ID);
				State = 183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LESS) {
					{
					State = 173; Match(LESS);
					State = 174; Match(ID);
					State = 179;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 175; Match(COMA);
						State = 176; Match(ID);
						}
						}
						State = 181;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 182; Match(GREATER);
					}
				}

				State = 185; Match(LEFT_PARENT);
				State = 194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & ((1L << (VOID - 38)) | (1L << (ANY - 38)) | (1L << (PRIMITIVE - 38)) | (1L << (ID - 38)))) != 0)) {
					{
					State = 186; uninitializedVarDeclaration();
					State = 191;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 187; Match(COMA);
						State = 188; uninitializedVarDeclaration();
						}
						}
						State = 193;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 196; Match(RIGHT_PARENT);
				State = 198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 197; constraints();
					}
				}

				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 201;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIVATE) {
					{
					State = 200; Match(PRIVATE);
					}
				}

				State = 203; Match(STATIC);
				State = 204; Match(EXTERN);
				State = 206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MEMBER) {
					{
					State = 205; Match(MEMBER);
					}
				}

				State = 210;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 208; type(0);
					}
					break;
				case 2:
					{
					State = 209; Match(VOID);
					}
					break;
				}
				State = 212; Match(ID);
				State = 213; Match(DOT);
				State = 214; Match(ID);
				State = 225;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LESS) {
					{
					State = 215; Match(LESS);
					State = 216; Match(ID);
					State = 221;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 217; Match(COMA);
						State = 218; Match(ID);
						}
						}
						State = 223;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 224; Match(GREATER);
					}
				}

				State = 227; Match(LEFT_PARENT);
				State = 236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & ((1L << (VOID - 38)) | (1L << (ANY - 38)) | (1L << (PRIMITIVE - 38)) | (1L << (ID - 38)))) != 0)) {
					{
					State = 228; uninitializedVarDeclaration();
					State = 233;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 229; Match(COMA);
						State = 230; uninitializedVarDeclaration();
						}
						}
						State = 235;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 238; Match(RIGHT_PARENT);
				State = 240;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 239; constraints();
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintsContext : ParserRuleContext {
		public ITerminalNode WHERE() { return GetToken(JurParser.WHERE, 0); }
		public ConstrainContext[] constrain() {
			return GetRuleContexts<ConstrainContext>();
		}
		public ConstrainContext constrain(int i) {
			return GetRuleContext<ConstrainContext>(i);
		}
		public ITerminalNode[] AND() { return GetTokens(JurParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(JurParser.AND, i);
		}
		public ConstraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraints; } }
	}

	[RuleVersion(0)]
	public ConstraintsContext constraints() {
		ConstraintsContext _localctx = new ConstraintsContext(Context, State);
		EnterRule(_localctx, 12, RULE_constraints);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244; Match(WHERE);
			State = 245; constrain();
			State = 250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 246; Match(AND);
				State = 247; constrain();
				}
				}
				State = 252;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstrainContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode IS() { return GetToken(JurParser.IS, 0); }
		public ConstrainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constrain; } }
	}

	[RuleVersion(0)]
	public ConstrainContext constrain() {
		ConstrainContext _localctx = new ConstrainContext(Context, State);
		EnterRule(_localctx, 14, RULE_constrain);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253; type(0);
			State = 254; Match(IS);
			State = 255; type(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UninitializedVarDeclarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(JurParser.ID, 0); }
		public UninitializedVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uninitializedVarDeclaration; } }
	}

	[RuleVersion(0)]
	public UninitializedVarDeclarationContext uninitializedVarDeclaration() {
		UninitializedVarDeclarationContext _localctx = new UninitializedVarDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_uninitializedVarDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257; type(0);
			State = 258; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializedVariableDeclarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(JurParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(JurParser.ASSIGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InitializedVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializedVariableDeclaration; } }
	}

	[RuleVersion(0)]
	public InitializedVariableDeclarationContext initializedVariableDeclaration() {
		InitializedVariableDeclarationContext _localctx = new InitializedVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_initializedVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260; type(0);
			State = 261; Match(ID);
			State = 262; Match(ASSIGN);
			State = 263; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InferedVariableDeclarationContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(JurParser.ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InferedVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inferedVariableDeclaration; } }
	}

	[RuleVersion(0)]
	public InferedVariableDeclarationContext inferedVariableDeclaration() {
		InferedVariableDeclarationContext _localctx = new InferedVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_inferedVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265; Match(ID);
			State = 266; Match(T__0);
			State = 267; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArrayTypeContext : TypeContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode LEFT_SQUARE_PARENT() { return GetToken(JurParser.LEFT_SQUARE_PARENT, 0); }
		public ITerminalNode RIGHT_SQUARE_PARENT() { return GetToken(JurParser.RIGHT_SQUARE_PARENT, 0); }
		public ArrayTypeContext(TypeContext context) { CopyFrom(context); }
	}
	public partial class AnyTypeContext : TypeContext {
		public ITerminalNode ANY() { return GetToken(JurParser.ANY, 0); }
		public AnyTypeContext(TypeContext context) { CopyFrom(context); }
	}
	public partial class TypeParameterOrStructTypeContext : TypeContext {
		public ITerminalNode ID() { return GetToken(JurParser.ID, 0); }
		public TypeParameterOrStructTypeContext(TypeContext context) { CopyFrom(context); }
	}
	public partial class FunctionPointerTypeContext : TypeContext {
		public ITerminalNode VOID() { return GetToken(JurParser.VOID, 0); }
		public ITerminalNode LEFT_PARENT() { return GetToken(JurParser.LEFT_PARENT, 0); }
		public ITerminalNode RIGHT_PARENT() { return GetToken(JurParser.RIGHT_PARENT, 0); }
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode[] COMA() { return GetTokens(JurParser.COMA); }
		public ITerminalNode COMA(int i) {
			return GetToken(JurParser.COMA, i);
		}
		public FunctionPointerTypeContext(TypeContext context) { CopyFrom(context); }
	}
	public partial class GenericStructTypeContext : TypeContext {
		public ITerminalNode ID() { return GetToken(JurParser.ID, 0); }
		public ITerminalNode LESS() { return GetToken(JurParser.LESS, 0); }
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode GREATER() { return GetToken(JurParser.GREATER, 0); }
		public ITerminalNode[] COMA() { return GetTokens(JurParser.COMA); }
		public ITerminalNode COMA(int i) {
			return GetToken(JurParser.COMA, i);
		}
		public GenericStructTypeContext(TypeContext context) { CopyFrom(context); }
	}
	public partial class PrimitiveTypeContext : TypeContext {
		public ITerminalNode PRIMITIVE() { return GetToken(JurParser.PRIMITIVE, 0); }
		public PrimitiveTypeContext(TypeContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public TypeContext type() {
		return type(0);
	}

	private TypeContext type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeContext _localctx = new TypeContext(Context, _parentState);
		TypeContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_type, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 298;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				{
				_localctx = new AnyTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 270; Match(ANY);
				}
				break;
			case 2:
				{
				_localctx = new PrimitiveTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 271; Match(PRIMITIVE);
				}
				break;
			case 3:
				{
				_localctx = new TypeParameterOrStructTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 272; Match(ID);
				}
				break;
			case 4:
				{
				_localctx = new GenericStructTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 273; Match(ID);
				{
				State = 274; Match(LESS);
				State = 275; type(0);
				State = 280;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMA) {
					{
					{
					State = 276; Match(COMA);
					State = 277; type(0);
					}
					}
					State = 282;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 283; Match(GREATER);
				}
				}
				break;
			case 5:
				{
				_localctx = new FunctionPointerTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 285; Match(VOID);
				State = 286; Match(LEFT_PARENT);
				State = 295;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & ((1L << (VOID - 38)) | (1L << (ANY - 38)) | (1L << (PRIMITIVE - 38)) | (1L << (ID - 38)))) != 0)) {
					{
					State = 287; type(0);
					State = 292;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 288; Match(COMA);
						State = 289; type(0);
						}
						}
						State = 294;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 297; Match(RIGHT_PARENT);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 318;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 316;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
					case 1:
						{
						_localctx = new FunctionPointerTypeContext(new TypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 300;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 301; Match(LEFT_PARENT);
						State = 310;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & ((1L << (VOID - 38)) | (1L << (ANY - 38)) | (1L << (PRIMITIVE - 38)) | (1L << (ID - 38)))) != 0)) {
							{
							State = 302; type(0);
							State = 307;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==COMA) {
								{
								{
								State = 303; Match(COMA);
								State = 304; type(0);
								}
								}
								State = 309;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							}
						}

						State = 312; Match(RIGHT_PARENT);
						}
						break;
					case 2:
						{
						_localctx = new ArrayTypeContext(new TypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 313;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 314; Match(LEFT_SQUARE_PARENT);
						State = 315; Match(RIGHT_SQUARE_PARENT);
						}
						break;
					}
					} 
				}
				State = 320;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlockStatementContext : StatementContext {
		public ITerminalNode LEFT_CURLY() { return GetToken(JurParser.LEFT_CURLY, 0); }
		public ITerminalNode RIGHT_CURLY() { return GetToken(JurParser.RIGHT_CURLY, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class AssignmentStatementContext : StatementContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ASSIGN() { return GetToken(JurParser.ASSIGN, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(JurParser.SEMICOLON, 0); }
		public AssignmentStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class UninitializedVarDeclarationStatementContext : StatementContext {
		public UninitializedVarDeclarationContext uninitializedVarDeclaration() {
			return GetRuleContext<UninitializedVarDeclarationContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(JurParser.SEMICOLON, 0); }
		public UninitializedVarDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class ForStatementContext : StatementContext {
		public ITerminalNode FOR() { return GetToken(JurParser.FOR, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(JurParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(JurParser.SEMICOLON, i);
		}
		public InitializedVariableDeclarationContext initializedVariableDeclaration() {
			return GetRuleContext<InitializedVariableDeclarationContext>(0);
		}
		public InferedVariableDeclarationContext inferedVariableDeclaration() {
			return GetRuleContext<InferedVariableDeclarationContext>(0);
		}
		public ForStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class BreakStatementContext : StatementContext {
		public ITerminalNode BREAK() { return GetToken(JurParser.BREAK, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(JurParser.SEMICOLON, 0); }
		public BreakStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class ContinueStatementContext : StatementContext {
		public ITerminalNode CONTINUE() { return GetToken(JurParser.CONTINUE, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(JurParser.SEMICOLON, 0); }
		public ContinueStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class ExpressionStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(JurParser.SEMICOLON, 0); }
		public ExpressionStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class IfStatementContext : StatementContext {
		public ITerminalNode IF() { return GetToken(JurParser.IF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(JurParser.ELSE, 0); }
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class ReturnStatementContext : StatementContext {
		public ITerminalNode RETURN() { return GetToken(JurParser.RETURN, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(JurParser.SEMICOLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class InferedVariableDeclarationStatementContext : StatementContext {
		public InferedVariableDeclarationContext inferedVariableDeclaration() {
			return GetRuleContext<InferedVariableDeclarationContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(JurParser.SEMICOLON, 0); }
		public InferedVariableDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class InitializedVariableDeclarationStatementContext : StatementContext {
		public InitializedVariableDeclarationContext initializedVariableDeclaration() {
			return GetRuleContext<InitializedVariableDeclarationContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(JurParser.SEMICOLON, 0); }
		public InitializedVariableDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_statement);
		int _la;
		try {
			State = 378;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				_localctx = new BlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 321; Match(LEFT_CURLY);
				State = 325;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & ((1L << (T__1 - 2)) | (1L << (SUBTRACT - 2)) | (1L << (LEFT_CURLY - 2)) | (1L << (LEFT_PARENT - 2)) | (1L << (NOT - 2)) | (1L << (STRING_VALUE - 2)) | (1L << (NUMBER_VALUE - 2)) | (1L << (BOOL_VALUE - 2)) | (1L << (NULL_VALUE - 2)) | (1L << (VOID - 2)) | (1L << (ANY - 2)) | (1L << (RETURN - 2)) | (1L << (BREAK - 2)) | (1L << (CONTINUE - 2)) | (1L << (IF - 2)) | (1L << (NEW - 2)) | (1L << (FOR - 2)) | (1L << (ARROW - 2)) | (1L << (PRIMITIVE - 2)) | (1L << (UNDEFINED_VALUE - 2)) | (1L << (ID - 2)))) != 0)) {
					{
					{
					State = 322; statement();
					}
					}
					State = 327;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 328; Match(RIGHT_CURLY);
				}
				break;
			case 2:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 329; Match(IF);
				State = 330; expression(0);
				State = 331; statement();
				State = 334;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
				case 1:
					{
					State = 332; Match(ELSE);
					State = 333; statement();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 336; Match(FOR);
				State = 343;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
				case 1:
					{
					State = 339;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
					case 1:
						{
						State = 337; initializedVariableDeclaration();
						}
						break;
					case 2:
						{
						State = 338; inferedVariableDeclaration();
						}
						break;
					}
					State = 341; Match(SEMICOLON);
					}
					break;
				}
				State = 345; expression(0);
				State = 348;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 346; Match(SEMICOLON);
					State = 347; expression(0);
					}
				}

				State = 350; statement();
				}
				break;
			case 4:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 352; Match(RETURN);
				State = 354;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & ((1L << (T__1 - 2)) | (1L << (SUBTRACT - 2)) | (1L << (LEFT_PARENT - 2)) | (1L << (NOT - 2)) | (1L << (STRING_VALUE - 2)) | (1L << (NUMBER_VALUE - 2)) | (1L << (BOOL_VALUE - 2)) | (1L << (NULL_VALUE - 2)) | (1L << (VOID - 2)) | (1L << (ANY - 2)) | (1L << (NEW - 2)) | (1L << (ARROW - 2)) | (1L << (PRIMITIVE - 2)) | (1L << (UNDEFINED_VALUE - 2)) | (1L << (ID - 2)))) != 0)) {
					{
					State = 353; expression(0);
					}
				}

				State = 356; Match(SEMICOLON);
				}
				break;
			case 5:
				_localctx = new BreakStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 357; Match(BREAK);
				State = 358; Match(SEMICOLON);
				}
				break;
			case 6:
				_localctx = new ContinueStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 359; Match(CONTINUE);
				State = 360; Match(SEMICOLON);
				}
				break;
			case 7:
				_localctx = new InferedVariableDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 361; inferedVariableDeclaration();
				State = 362; Match(SEMICOLON);
				}
				break;
			case 8:
				_localctx = new InitializedVariableDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 364; initializedVariableDeclaration();
				State = 365; Match(SEMICOLON);
				}
				break;
			case 9:
				_localctx = new UninitializedVarDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 367; uninitializedVarDeclaration();
				State = 368; Match(SEMICOLON);
				}
				break;
			case 10:
				_localctx = new AssignmentStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 370; expression(0);
				State = 371; Match(ASSIGN);
				State = 372; expression(0);
				State = 373; Match(SEMICOLON);
				}
				break;
			case 11:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 375; expression(0);
				State = 376; Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode LEFT_CURLY() { return GetToken(JurParser.LEFT_CURLY, 0); }
		public ITerminalNode RIGHT_CURLY() { return GetToken(JurParser.RIGHT_CURLY, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 26, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380; Match(LEFT_CURLY);
			State = 384;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & ((1L << (T__1 - 2)) | (1L << (SUBTRACT - 2)) | (1L << (LEFT_CURLY - 2)) | (1L << (LEFT_PARENT - 2)) | (1L << (NOT - 2)) | (1L << (STRING_VALUE - 2)) | (1L << (NUMBER_VALUE - 2)) | (1L << (BOOL_VALUE - 2)) | (1L << (NULL_VALUE - 2)) | (1L << (VOID - 2)) | (1L << (ANY - 2)) | (1L << (RETURN - 2)) | (1L << (BREAK - 2)) | (1L << (CONTINUE - 2)) | (1L << (IF - 2)) | (1L << (NEW - 2)) | (1L << (FOR - 2)) | (1L << (ARROW - 2)) | (1L << (PRIMITIVE - 2)) | (1L << (UNDEFINED_VALUE - 2)) | (1L << (ID - 2)))) != 0)) {
				{
				{
				State = 381; statement();
				}
				}
				State = 386;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 387; Match(RIGHT_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleGuardContext : ParserRuleContext {
		public ITerminalNode ARROW() { return GetToken(JurParser.ARROW, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OTHERWISE() { return GetToken(JurParser.OTHERWISE, 0); }
		public SingleGuardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleGuard; } }
	}

	[RuleVersion(0)]
	public SingleGuardContext singleGuard() {
		SingleGuardContext _localctx = new SingleGuardContext(Context, State);
		EnterRule(_localctx, 28, RULE_singleGuard);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
			case SUBTRACT:
			case LEFT_PARENT:
			case NOT:
			case STRING_VALUE:
			case NUMBER_VALUE:
			case BOOL_VALUE:
			case NULL_VALUE:
			case VOID:
			case ANY:
			case NEW:
			case ARROW:
			case PRIMITIVE:
			case UNDEFINED_VALUE:
			case ID:
				{
				State = 389; expression(0);
				}
				break;
			case OTHERWISE:
				{
				State = 390; Match(OTHERWISE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 393; Match(ARROW);
			State = 394; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NegationContext : ExpressionContext {
		public ITerminalNode NOT() { return GetToken(JurParser.NOT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NegationContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class AnonymusFunctionContext : ExpressionContext {
		public ITerminalNode ARROW() { return GetToken(JurParser.ARROW, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UninitializedVarDeclarationContext[] uninitializedVarDeclaration() {
			return GetRuleContexts<UninitializedVarDeclarationContext>();
		}
		public UninitializedVarDeclarationContext uninitializedVarDeclaration(int i) {
			return GetRuleContext<UninitializedVarDeclarationContext>(i);
		}
		public ITerminalNode LEFT_PARENT() { return GetToken(JurParser.LEFT_PARENT, 0); }
		public ITerminalNode RIGHT_PARENT() { return GetToken(JurParser.RIGHT_PARENT, 0); }
		public ITerminalNode[] COMA() { return GetTokens(JurParser.COMA); }
		public ITerminalNode COMA(int i) {
			return GetToken(JurParser.COMA, i);
		}
		public AnonymusFunctionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class DefaultValueContext : ExpressionContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(JurParser.DOT, 0); }
		public ITerminalNode DEFAULT_VALUE() { return GetToken(JurParser.DEFAULT_VALUE, 0); }
		public DefaultValueContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class GuardContext : ExpressionContext {
		public SingleGuardContext[] singleGuard() {
			return GetRuleContexts<SingleGuardContext>();
		}
		public SingleGuardContext singleGuard(int i) {
			return GetRuleContext<SingleGuardContext>(i);
		}
		public GuardContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class FieldAccessContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(JurParser.DOT, 0); }
		public ITerminalNode ID() { return GetToken(JurParser.ID, 0); }
		public FieldAccessContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class ConstructorContext : ExpressionContext {
		public ITerminalNode NEW() { return GetToken(JurParser.NEW, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode[] LEFT_CURLY() { return GetTokens(JurParser.LEFT_CURLY); }
		public ITerminalNode LEFT_CURLY(int i) {
			return GetToken(JurParser.LEFT_CURLY, i);
		}
		public ITerminalNode[] RIGHT_CURLY() { return GetTokens(JurParser.RIGHT_CURLY); }
		public ITerminalNode RIGHT_CURLY(int i) {
			return GetToken(JurParser.RIGHT_CURLY, i);
		}
		public ITerminalNode[] ID() { return GetTokens(JurParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(JurParser.ID, i);
		}
		public ITerminalNode[] ASSIGN() { return GetTokens(JurParser.ASSIGN); }
		public ITerminalNode ASSIGN(int i) {
			return GetToken(JurParser.ASSIGN, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMA() { return GetTokens(JurParser.COMA); }
		public ITerminalNode COMA(int i) {
			return GetToken(JurParser.COMA, i);
		}
		public ConstructorContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class IncrementOrDecrementContext : ExpressionContext {
		public IToken @operator;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode INCREMENT() { return GetToken(JurParser.INCREMENT, 0); }
		public ITerminalNode DECREMENT() { return GetToken(JurParser.DECREMENT, 0); }
		public IncrementOrDecrementContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class VariableAccessContext : ExpressionContext {
		public ITerminalNode ID() { return GetToken(JurParser.ID, 0); }
		public VariableAccessContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class ArithmeticNegationContext : ExpressionContext {
		public ITerminalNode SUBTRACT() { return GetToken(JurParser.SUBTRACT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArithmeticNegationContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class PrimitiveValueContext : ExpressionContext {
		public IToken value;
		public ITerminalNode NUMBER_VALUE() { return GetToken(JurParser.NUMBER_VALUE, 0); }
		public ITerminalNode STRING_VALUE() { return GetToken(JurParser.STRING_VALUE, 0); }
		public ITerminalNode BOOL_VALUE() { return GetToken(JurParser.BOOL_VALUE, 0); }
		public ITerminalNode NULL_VALUE() { return GetToken(JurParser.NULL_VALUE, 0); }
		public ITerminalNode UNDEFINED_VALUE() { return GetToken(JurParser.UNDEFINED_VALUE, 0); }
		public PrimitiveValueContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class FunctionCallContext : ExpressionContext {
		public ITerminalNode ID() { return GetToken(JurParser.ID, 0); }
		public ITerminalNode LEFT_PARENT() { return GetToken(JurParser.LEFT_PARENT, 0); }
		public ITerminalNode RIGHT_PARENT() { return GetToken(JurParser.RIGHT_PARENT, 0); }
		public ITerminalNode[] LESS() { return GetTokens(JurParser.LESS); }
		public ITerminalNode LESS(int i) {
			return GetToken(JurParser.LESS, i);
		}
		public ITerminalNode POLY() { return GetToken(JurParser.POLY, 0); }
		public ITerminalNode[] GREATER() { return GetTokens(JurParser.GREATER); }
		public ITerminalNode GREATER(int i) {
			return GetToken(JurParser.GREATER, i);
		}
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMA() { return GetTokens(JurParser.COMA); }
		public ITerminalNode COMA(int i) {
			return GetToken(JurParser.COMA, i);
		}
		public ITerminalNode DOT() { return GetToken(JurParser.DOT, 0); }
		public FunctionCallContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class ArrayIndexAccessContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode LEFT_SQUARE_PARENT() { return GetToken(JurParser.LEFT_SQUARE_PARENT, 0); }
		public ITerminalNode RIGHT_SQUARE_PARENT() { return GetToken(JurParser.RIGHT_SQUARE_PARENT, 0); }
		public ArrayIndexAccessContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class OperationContext : ExpressionContext {
		public IToken @operator;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TIMES() { return GetToken(JurParser.TIMES, 0); }
		public ITerminalNode DIVIDE() { return GetToken(JurParser.DIVIDE, 0); }
		public ITerminalNode ADD() { return GetToken(JurParser.ADD, 0); }
		public ITerminalNode SUBTRACT() { return GetToken(JurParser.SUBTRACT, 0); }
		public ITerminalNode LESS() { return GetToken(JurParser.LESS, 0); }
		public ITerminalNode GREATER() { return GetToken(JurParser.GREATER, 0); }
		public ITerminalNode LEQUAL() { return GetToken(JurParser.LEQUAL, 0); }
		public ITerminalNode GREQUAL() { return GetToken(JurParser.GREQUAL, 0); }
		public ITerminalNode EQUAL() { return GetToken(JurParser.EQUAL, 0); }
		public ITerminalNode NOT_EQUAL() { return GetToken(JurParser.NOT_EQUAL, 0); }
		public ITerminalNode LOGICAL_AND() { return GetToken(JurParser.LOGICAL_AND, 0); }
		public ITerminalNode OR() { return GetToken(JurParser.OR, 0); }
		public OperationContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class ParExpressionContext : ExpressionContext {
		public ITerminalNode LEFT_PARENT() { return GetToken(JurParser.LEFT_PARENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RIGHT_PARENT() { return GetToken(JurParser.RIGHT_PARENT, 0); }
		public ParExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class TypeExpressionContext : ExpressionContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(JurParser.DOT, 0); }
		public ITerminalNode TYPE() { return GetToken(JurParser.TYPE, 0); }
		public TypeExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 500;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				{
				_localctx = new PrimitiveValueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 397;
				((PrimitiveValueContext)_localctx).value = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_VALUE) | (1L << NUMBER_VALUE) | (1L << BOOL_VALUE) | (1L << NULL_VALUE) | (1L << UNDEFINED_VALUE))) != 0)) ) {
					((PrimitiveValueContext)_localctx).value = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				{
				_localctx = new AnonymusFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 399;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & ((1L << (VOID - 38)) | (1L << (ANY - 38)) | (1L << (PRIMITIVE - 38)) | (1L << (ID - 38)))) != 0)) {
					{
					State = 398; uninitializedVarDeclaration();
					}
				}

				State = 401; Match(ARROW);
				State = 404;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LEFT_CURLY:
					{
					State = 402; block();
					}
					break;
				case T__1:
				case SUBTRACT:
				case LEFT_PARENT:
				case NOT:
				case STRING_VALUE:
				case NUMBER_VALUE:
				case BOOL_VALUE:
				case NULL_VALUE:
				case VOID:
				case ANY:
				case NEW:
				case ARROW:
				case PRIMITIVE:
				case UNDEFINED_VALUE:
				case ID:
					{
					State = 403; expression(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				{
				_localctx = new AnonymusFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 406; Match(LEFT_PARENT);
				State = 415;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & ((1L << (VOID - 38)) | (1L << (ANY - 38)) | (1L << (PRIMITIVE - 38)) | (1L << (ID - 38)))) != 0)) {
					{
					State = 407; uninitializedVarDeclaration();
					State = 412;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 408; Match(COMA);
						State = 409; uninitializedVarDeclaration();
						}
						}
						State = 414;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 417; Match(RIGHT_PARENT);
				State = 418; Match(ARROW);
				State = 421;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LEFT_CURLY:
					{
					State = 419; block();
					}
					break;
				case T__1:
				case SUBTRACT:
				case LEFT_PARENT:
				case NOT:
				case STRING_VALUE:
				case NUMBER_VALUE:
				case BOOL_VALUE:
				case NULL_VALUE:
				case VOID:
				case ANY:
				case NEW:
				case ARROW:
				case PRIMITIVE:
				case UNDEFINED_VALUE:
				case ID:
					{
					State = 420; expression(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				{
				_localctx = new FunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 423; Match(ID);
				State = 427;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
				case 1:
					{
					State = 424; Match(LESS);
					State = 425; Match(POLY);
					State = 426; Match(GREATER);
					}
					break;
				}
				State = 440;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LESS) {
					{
					State = 429; Match(LESS);
					State = 430; type(0);
					State = 435;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 431; Match(COMA);
						State = 432; type(0);
						}
						}
						State = 437;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 438; Match(GREATER);
					}
				}

				State = 442; Match(LEFT_PARENT);
				State = 451;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & ((1L << (T__1 - 2)) | (1L << (SUBTRACT - 2)) | (1L << (LEFT_PARENT - 2)) | (1L << (NOT - 2)) | (1L << (STRING_VALUE - 2)) | (1L << (NUMBER_VALUE - 2)) | (1L << (BOOL_VALUE - 2)) | (1L << (NULL_VALUE - 2)) | (1L << (VOID - 2)) | (1L << (ANY - 2)) | (1L << (NEW - 2)) | (1L << (ARROW - 2)) | (1L << (PRIMITIVE - 2)) | (1L << (UNDEFINED_VALUE - 2)) | (1L << (ID - 2)))) != 0)) {
					{
					State = 443; expression(0);
					State = 448;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 444; Match(COMA);
						State = 445; expression(0);
						}
						}
						State = 450;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 453; Match(RIGHT_PARENT);
				}
				break;
			case 5:
				{
				_localctx = new GuardContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 456;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 454; Match(T__1);
						State = 455; singleGuard();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 458;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 6:
				{
				_localctx = new DefaultValueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 460; type(0);
				State = 461; Match(DOT);
				State = 462; Match(DEFAULT_VALUE);
				}
				break;
			case 7:
				{
				_localctx = new TypeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 464; type(0);
				State = 465; Match(DOT);
				State = 466; Match(TYPE);
				}
				break;
			case 8:
				{
				_localctx = new ConstructorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 468; Match(NEW);
				State = 469; type(0);
				State = 488;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 470; Match(LEFT_CURLY);
						{
						State = 471; Match(ID);
						State = 472; Match(ASSIGN);
						State = 473; expression(0);
						}
						State = 481;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==COMA) {
							{
							{
							State = 475; Match(COMA);
							State = 476; Match(ID);
							State = 477; Match(ASSIGN);
							State = 478; expression(0);
							}
							}
							State = 483;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 484; Match(RIGHT_CURLY);
						}
						} 
					}
					State = 490;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
				}
				}
				break;
			case 9:
				{
				_localctx = new VariableAccessContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 491; Match(ID);
				}
				break;
			case 10:
				{
				_localctx = new ParExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 492; Match(LEFT_PARENT);
				State = 493; expression(0);
				State = 494; Match(RIGHT_PARENT);
				}
				break;
			case 11:
				{
				_localctx = new NegationContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 496; Match(NOT);
				State = 497; expression(9);
				}
				break;
			case 12:
				{
				_localctx = new ArithmeticNegationContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 498; Match(SUBTRACT);
				State = 499; expression(8);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 565;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 563;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
					case 1:
						{
						_localctx = new OperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 502;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 503;
						((OperationContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==TIMES || _la==DIVIDE) ) {
							((OperationContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 504; expression(7);
						}
						break;
					case 2:
						{
						_localctx = new OperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 505;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 506;
						((OperationContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ADD || _la==SUBTRACT) ) {
							((OperationContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 507; expression(6);
						}
						break;
					case 3:
						{
						_localctx = new OperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 508;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 509;
						((OperationContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LESS) | (1L << LEQUAL) | (1L << GREATER) | (1L << GREQUAL))) != 0)) ) {
							((OperationContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 510; expression(5);
						}
						break;
					case 4:
						{
						_localctx = new OperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 511;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 512;
						((OperationContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==EQUAL || _la==NOT_EQUAL) ) {
							((OperationContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 513; expression(4);
						}
						break;
					case 5:
						{
						_localctx = new OperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 514;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 515; Match(LOGICAL_AND);
						State = 516; expression(3);
						}
						break;
					case 6:
						{
						_localctx = new OperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 517;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 518; Match(OR);
						State = 519; expression(2);
						}
						break;
					case 7:
						{
						_localctx = new FunctionCallContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 520;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 521; Match(DOT);
						State = 522; Match(ID);
						State = 526;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
						case 1:
							{
							State = 523; Match(LESS);
							State = 524; Match(POLY);
							State = 525; Match(GREATER);
							}
							break;
						}
						State = 539;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==LESS) {
							{
							State = 528; Match(LESS);
							State = 529; type(0);
							State = 534;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==COMA) {
								{
								{
								State = 530; Match(COMA);
								State = 531; type(0);
								}
								}
								State = 536;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							State = 537; Match(GREATER);
							}
						}

						State = 541; Match(LEFT_PARENT);
						State = 550;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & ((1L << (T__1 - 2)) | (1L << (SUBTRACT - 2)) | (1L << (LEFT_PARENT - 2)) | (1L << (NOT - 2)) | (1L << (STRING_VALUE - 2)) | (1L << (NUMBER_VALUE - 2)) | (1L << (BOOL_VALUE - 2)) | (1L << (NULL_VALUE - 2)) | (1L << (VOID - 2)) | (1L << (ANY - 2)) | (1L << (NEW - 2)) | (1L << (ARROW - 2)) | (1L << (PRIMITIVE - 2)) | (1L << (UNDEFINED_VALUE - 2)) | (1L << (ID - 2)))) != 0)) {
							{
							State = 542; expression(0);
							State = 547;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==COMA) {
								{
								{
								State = 543; Match(COMA);
								State = 544; expression(0);
								}
								}
								State = 549;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							}
						}

						State = 552; Match(RIGHT_PARENT);
						}
						break;
					case 8:
						{
						_localctx = new FieldAccessContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 553;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 554; Match(DOT);
						State = 555; Match(ID);
						}
						break;
					case 9:
						{
						_localctx = new ArrayIndexAccessContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 556;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 557; Match(LEFT_SQUARE_PARENT);
						State = 558; expression(0);
						State = 559; Match(RIGHT_SQUARE_PARENT);
						}
						break;
					case 10:
						{
						_localctx = new IncrementOrDecrementContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 561;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 562;
						((IncrementOrDecrementContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==DECREMENT || _la==INCREMENT) ) {
							((IncrementOrDecrementContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					} 
				}
				State = 567;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 11: return type_sempred((TypeContext)_localctx, predIndex);
		case 15: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool type_sempred(TypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		case 5: return Precpred(Context, 3);
		case 6: return Precpred(Context, 2);
		case 7: return Precpred(Context, 1);
		case 8: return Precpred(Context, 18);
		case 9: return Precpred(Context, 14);
		case 10: return Precpred(Context, 11);
		case 11: return Precpred(Context, 7);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x42', '\x23B', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '%', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '(', '\v', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x34', 
		'\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x37', '\v', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x41', '\n', '\x5', '\f', '\x5', 
		'\xE', '\x5', '\x44', '\v', '\x5', '\x3', '\x5', '\x5', '\x5', 'G', '\n', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\a', '\x5', 'N', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 'Q', 
		'\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x5', '\a', 'Z', '\n', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', '^', '\n', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\x65', '\n', '\a', 
		'\f', '\a', '\xE', '\a', 'h', '\v', '\a', '\x3', '\a', '\x5', '\a', 'k', 
		'\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', 
		'\a', 'q', '\n', '\a', '\f', '\a', '\xE', '\a', 't', '\v', '\a', '\x5', 
		'\a', 'v', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'z', '\n', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '~', '\n', '\a', '\x3', '\a', 
		'\x3', '\a', '\x5', '\a', '\x82', '\n', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\x89', '\n', '\a', 
		'\f', '\a', '\xE', '\a', '\x8C', '\v', '\a', '\x3', '\a', '\x5', '\a', 
		'\x8F', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\a', '\a', '\x95', '\n', '\a', '\f', '\a', '\xE', '\a', '\x98', '\v', 
		'\a', '\x5', '\a', '\x9A', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', '\x9E', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', '\xA5', '\n', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\xA9', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', '\xAD', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\a', '\a', '\xB4', '\n', '\a', '\f', '\a', '\xE', 
		'\a', '\xB7', '\v', '\a', '\x3', '\a', '\x5', '\a', '\xBA', '\n', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\xC0', 
		'\n', '\a', '\f', '\a', '\xE', '\a', '\xC3', '\v', '\a', '\x5', '\a', 
		'\xC5', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\xC9', '\n', 
		'\a', '\x3', '\a', '\x5', '\a', '\xCC', '\n', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', '\xD1', '\n', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\xD5', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 
		'\xDE', '\n', '\a', '\f', '\a', '\xE', '\a', '\xE1', '\v', '\a', '\x3', 
		'\a', '\x5', '\a', '\xE4', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\a', '\a', '\xEA', '\n', '\a', '\f', '\a', '\xE', 
		'\a', '\xED', '\v', '\a', '\x5', '\a', '\xEF', '\n', '\a', '\x3', '\a', 
		'\x3', '\a', '\x5', '\a', '\xF3', '\n', '\a', '\x5', '\a', '\xF5', '\n', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 
		'\xFB', '\n', '\b', '\f', '\b', '\xE', '\b', '\xFE', '\v', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\x119', '\n', '\r', '\f', 
		'\r', '\xE', '\r', '\x11C', '\v', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', 
		'\x125', '\n', '\r', '\f', '\r', '\xE', '\r', '\x128', '\v', '\r', '\x5', 
		'\r', '\x12A', '\n', '\r', '\x3', '\r', '\x5', '\r', '\x12D', '\n', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', 
		'\r', '\x134', '\n', '\r', '\f', '\r', '\xE', '\r', '\x137', '\v', '\r', 
		'\x5', '\r', '\x139', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\a', '\r', '\x13F', '\n', '\r', '\f', '\r', '\xE', '\r', 
		'\x142', '\v', '\r', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\x146', 
		'\n', '\xE', '\f', '\xE', '\xE', '\xE', '\x149', '\v', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x5', '\xE', '\x151', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x5', '\xE', '\x156', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x5', '\xE', '\x15A', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x5', '\xE', '\x15F', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x165', '\n', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x5', '\xE', '\x17D', '\n', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\a', '\xF', '\x181', '\n', '\xF', '\f', '\xF', '\xE', '\xF', 
		'\x184', '\v', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', 
		'\x10', '\x5', '\x10', '\x18A', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', 
		'\x192', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', 
		'\x11', '\x197', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\a', '\x11', '\x19D', '\n', '\x11', '\f', '\x11', '\xE', 
		'\x11', '\x1A0', '\v', '\x11', '\x5', '\x11', '\x1A2', '\n', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x1A8', 
		'\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x5', '\x11', '\x1AE', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\a', '\x11', '\x1B4', '\n', '\x11', '\f', '\x11', 
		'\xE', '\x11', '\x1B7', '\v', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', 
		'\x11', '\x1BB', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\a', '\x11', '\x1C1', '\n', '\x11', '\f', '\x11', '\xE', 
		'\x11', '\x1C4', '\v', '\x11', '\x5', '\x11', '\x1C6', '\n', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x6', '\x11', '\x1CB', '\n', '\x11', 
		'\r', '\x11', '\xE', '\x11', '\x1CC', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\a', '\x11', '\x1E2', '\n', '\x11', '\f', '\x11', 
		'\xE', '\x11', '\x1E5', '\v', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', 
		'\x11', '\x1E9', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\x1EC', '\v', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', 
		'\x11', '\x1F7', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x5', '\x11', '\x211', '\n', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\x217', '\n', '\x11', 
		'\f', '\x11', '\xE', '\x11', '\x21A', '\v', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\x21E', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\x224', '\n', '\x11', '\f', 
		'\x11', '\xE', '\x11', '\x227', '\v', '\x11', '\x5', '\x11', '\x229', 
		'\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\x236', '\n', '\x11', '\f', 
		'\x11', '\xE', '\x11', '\x239', '\v', '\x11', '\x3', '\x11', '\x2', '\x4', 
		'\x18', ' ', '\x12', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\x2', '\b', 
		'\x4', '\x2', '\"', '%', '?', '?', '\x3', '\x2', '\xE', '\xF', '\x3', 
		'\x2', '\f', '\r', '\x3', '\x2', '\x16', '\x19', '\x4', '\x2', '\x1A', 
		'\x1A', '\x1C', '\x1C', '\x3', '\x2', ' ', '!', '\x2', '\x298', '\x2', 
		'&', '\x3', '\x2', '\x2', '\x2', '\x4', '+', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '.', '\x3', '\x2', '\x2', '\x2', '\b', ':', '\x3', '\x2', '\x2', 
		'\x2', '\n', 'T', '\x3', '\x2', '\x2', '\x2', '\f', '\xF4', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\xF6', '\x3', '\x2', '\x2', '\x2', '\x10', '\xFF', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x103', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\x106', '\x3', '\x2', '\x2', '\x2', '\x16', '\x10B', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x17C', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\x17E', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\x189', '\x3', '\x2', '\x2', '\x2', ' ', '\x1F6', '\x3', '\x2', 
		'\x2', '\x2', '\"', '%', '\x5', '\x4', '\x3', '\x2', '#', '%', '\x5', 
		'\x6', '\x4', '\x2', '$', '\"', '\x3', '\x2', '\x2', '\x2', '$', '#', 
		'\x3', '\x2', '\x2', '\x2', '%', '(', '\x3', '\x2', '\x2', '\x2', '&', 
		'$', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\x3', '\x2', '\x2', '\x2', 
		'\'', ')', '\x3', '\x2', '\x2', '\x2', '(', '&', '\x3', '\x2', '\x2', 
		'\x2', ')', '*', '\a', '\x2', '\x2', '\x3', '*', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '+', ',', '\a', '/', '\x2', '\x2', ',', '-', '\x5', '\x1A', 
		'\xE', '\x2', '-', '\x5', '\x3', '\x2', '\x2', '\x2', '.', '/', '\a', 
		'.', '\x2', '\x2', '/', '\x30', '\a', '#', '\x2', '\x2', '\x30', '\x35', 
		'\a', '\x10', '\x2', '\x2', '\x31', '\x34', '\x5', '\f', '\a', '\x2', 
		'\x32', '\x34', '\x5', '\b', '\x5', '\x2', '\x33', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '\x33', '\x32', '\x3', '\x2', '\x2', '\x2', '\x34', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x35', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x35', '\x36', '\x3', '\x2', '\x2', '\x2', '\x36', '\x38', '\x3', '\x2', 
		'\x2', '\x2', '\x37', '\x35', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', 
		'\a', '\x11', '\x2', '\x2', '\x39', '\a', '\x3', '\x2', '\x2', '\x2', 
		':', ';', '\a', '\'', '\x2', '\x2', ';', '\x46', '\a', '\x42', '\x2', 
		'\x2', '<', '=', '\a', '\x16', '\x2', '\x2', '=', '\x42', '\a', '\x42', 
		'\x2', '\x2', '>', '?', '\a', '\b', '\x2', '\x2', '?', '\x41', '\a', '\x42', 
		'\x2', '\x2', '@', '>', '\x3', '\x2', '\x2', '\x2', '\x41', '\x44', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '@', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x43', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x44', '\x42', '\x3', '\x2', '\x2', '\x2', '\x45', 'G', '\a', 
		'\x18', '\x2', '\x2', '\x46', '<', '\x3', '\x2', '\x2', '\x2', '\x46', 
		'G', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\x3', '\x2', '\x2', '\x2', 
		'H', 'O', '\a', '\x10', '\x2', '\x2', 'I', 'J', '\x5', '\x12', '\n', '\x2', 
		'J', 'K', '\a', '\n', '\x2', '\x2', 'K', 'N', '\x3', '\x2', '\x2', '\x2', 
		'L', 'N', '\x5', '\n', '\x6', '\x2', 'M', 'I', '\x3', '\x2', '\x2', '\x2', 
		'M', 'L', '\x3', '\x2', '\x2', '\x2', 'N', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'O', 'M', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\x3', '\x2', '\x2', '\x2', 
		'P', 'R', '\x3', '\x2', '\x2', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 
		'R', 'S', '\a', '\x11', '\x2', '\x2', 'S', '\t', '\x3', '\x2', '\x2', 
		'\x2', 'T', 'U', '\a', '\x31', '\x2', '\x2', 'U', 'V', '\x5', '\x18', 
		'\r', '\x2', 'V', 'W', '\a', '\n', '\x2', '\x2', 'W', '\v', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'Z', '\a', '=', '\x2', '\x2', 'Y', 'X', '\x3', '\x2', 
		'\x2', '\x2', 'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 'Z', ']', '\x3', '\x2', 
		'\x2', '\x2', '[', '^', '\x5', '\x18', '\r', '\x2', '\\', '^', '\a', '(', 
		'\x2', '\x2', ']', '[', '\x3', '\x2', '\x2', '\x2', ']', '\\', '\x3', 
		'\x2', '\x2', '\x2', '^', '_', '\x3', '\x2', '\x2', '\x2', '_', 'j', '\a', 
		'\x42', '\x2', '\x2', '`', '\x61', '\a', '\x16', '\x2', '\x2', '\x61', 
		'\x66', '\a', '\x42', '\x2', '\x2', '\x62', '\x63', '\a', '\b', '\x2', 
		'\x2', '\x63', '\x65', '\a', '\x42', '\x2', '\x2', '\x64', '\x62', '\x3', 
		'\x2', '\x2', '\x2', '\x65', 'h', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'\x64', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\x3', '\x2', '\x2', 
		'\x2', 'g', 'i', '\x3', '\x2', '\x2', '\x2', 'h', '\x66', '\x3', '\x2', 
		'\x2', '\x2', 'i', 'k', '\a', '\x18', '\x2', '\x2', 'j', '`', '\x3', '\x2', 
		'\x2', '\x2', 'j', 'k', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\x3', '\x2', 
		'\x2', '\x2', 'l', 'u', '\a', '\x12', '\x2', '\x2', 'm', 'r', '\x5', '\x12', 
		'\n', '\x2', 'n', 'o', '\a', '\b', '\x2', '\x2', 'o', 'q', '\x5', '\x12', 
		'\n', '\x2', 'p', 'n', '\x3', '\x2', '\x2', '\x2', 'q', 't', '\x3', '\x2', 
		'\x2', '\x2', 'r', 'p', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\x3', '\x2', 
		'\x2', '\x2', 's', 'v', '\x3', '\x2', '\x2', '\x2', 't', 'r', '\x3', '\x2', 
		'\x2', '\x2', 'u', 'm', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x3', '\x2', 
		'\x2', '\x2', 'v', 'w', '\x3', '\x2', '\x2', '\x2', 'w', 'y', '\a', '\x13', 
		'\x2', '\x2', 'x', 'z', '\x5', '\xE', '\b', '\x2', 'y', 'x', '\x3', '\x2', 
		'\x2', '\x2', 'y', 'z', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\x3', '\x2', 
		'\x2', '\x2', '{', '\xF5', '\x5', '\x1C', '\xF', '\x2', '|', '~', '\a', 
		'=', '\x2', '\x2', '}', '|', '\x3', '\x2', '\x2', '\x2', '}', '~', '\x3', 
		'\x2', '\x2', '\x2', '~', '\x81', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'\x82', '\x5', '\x18', '\r', '\x2', '\x80', '\x82', '\a', '(', '\x2', 
		'\x2', '\x81', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x81', '\x80', '\x3', 
		'\x2', '\x2', '\x2', '\x82', '\x83', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'\x8E', '\a', '\x42', '\x2', '\x2', '\x84', '\x85', '\a', '\x16', '\x2', 
		'\x2', '\x85', '\x8A', '\a', '\x42', '\x2', '\x2', '\x86', '\x87', '\a', 
		'\b', '\x2', '\x2', '\x87', '\x89', '\a', '\x42', '\x2', '\x2', '\x88', 
		'\x86', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8C', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x88', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\x8B', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8F', '\a', '\x18', '\x2', 
		'\x2', '\x8E', '\x84', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x8F', '\x90', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x99', '\a', '\x12', '\x2', '\x2', '\x91', '\x96', '\x5', '\x12', '\n', 
		'\x2', '\x92', '\x93', '\a', '\b', '\x2', '\x2', '\x93', '\x95', '\x5', 
		'\x12', '\n', '\x2', '\x94', '\x92', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\x98', '\x3', '\x2', '\x2', '\x2', '\x96', '\x94', '\x3', '\x2', '\x2', 
		'\x2', '\x96', '\x97', '\x3', '\x2', '\x2', '\x2', '\x97', '\x9A', '\x3', 
		'\x2', '\x2', '\x2', '\x98', '\x96', '\x3', '\x2', '\x2', '\x2', '\x99', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\x3', '\x2', '\x2', 
		'\x2', '\x9A', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9D', '\a', 
		'\x13', '\x2', '\x2', '\x9C', '\x9E', '\x5', '\xE', '\b', '\x2', '\x9D', 
		'\x9C', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\x3', '\x2', '\x2', 
		'\x2', '\x9E', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\a', 
		':', '\x2', '\x2', '\xA0', '\xA1', '\x5', ' ', '\x11', '\x2', '\xA1', 
		'\xA2', '\a', '\n', '\x2', '\x2', '\xA2', '\xF5', '\x3', '\x2', '\x2', 
		'\x2', '\xA3', '\xA5', '\a', '=', '\x2', '\x2', '\xA4', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\xA4', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\xA6', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA8', '\a', '\x38', '\x2', 
		'\x2', '\xA7', '\xA9', '\a', ';', '\x2', '\x2', '\xA8', '\xA7', '\x3', 
		'\x2', '\x2', '\x2', '\xA8', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xA9', 
		'\xAC', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAD', '\x5', '\x18', '\r', 
		'\x2', '\xAB', '\xAD', '\a', '(', '\x2', '\x2', '\xAC', '\xAA', '\x3', 
		'\x2', '\x2', '\x2', '\xAC', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAD', 
		'\xAE', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xB9', '\a', '\x42', '\x2', 
		'\x2', '\xAF', '\xB0', '\a', '\x16', '\x2', '\x2', '\xB0', '\xB5', '\a', 
		'\x42', '\x2', '\x2', '\xB1', '\xB2', '\a', '\b', '\x2', '\x2', '\xB2', 
		'\xB4', '\a', '\x42', '\x2', '\x2', '\xB3', '\xB1', '\x3', '\x2', '\x2', 
		'\x2', '\xB4', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\xB5', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\xB8', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB5', '\x3', '\x2', '\x2', 
		'\x2', '\xB8', '\xBA', '\a', '\x18', '\x2', '\x2', '\xB9', '\xAF', '\x3', 
		'\x2', '\x2', '\x2', '\xB9', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xBA', 
		'\xBB', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xC4', '\a', '\x12', '\x2', 
		'\x2', '\xBC', '\xC1', '\x5', '\x12', '\n', '\x2', '\xBD', '\xBE', '\a', 
		'\b', '\x2', '\x2', '\xBE', '\xC0', '\x5', '\x12', '\n', '\x2', '\xBF', 
		'\xBD', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC3', '\x3', '\x2', '\x2', 
		'\x2', '\xC1', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\x3', 
		'\x2', '\x2', '\x2', '\xC2', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC3', 
		'\xC1', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xBC', '\x3', '\x2', '\x2', 
		'\x2', '\xC4', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\x3', 
		'\x2', '\x2', '\x2', '\xC6', '\xC8', '\a', '\x13', '\x2', '\x2', '\xC7', 
		'\xC9', '\x5', '\xE', '\b', '\x2', '\xC8', '\xC7', '\x3', '\x2', '\x2', 
		'\x2', '\xC8', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xF5', '\x3', 
		'\x2', '\x2', '\x2', '\xCA', '\xCC', '\a', '=', '\x2', '\x2', '\xCB', 
		'\xCA', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', '\x3', '\x2', '\x2', 
		'\x2', '\xCC', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', '\a', 
		'<', '\x2', '\x2', '\xCE', '\xD0', '\a', '\x38', '\x2', '\x2', '\xCF', 
		'\xD1', '\a', ';', '\x2', '\x2', '\xD0', '\xCF', '\x3', '\x2', '\x2', 
		'\x2', '\xD0', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD4', '\x3', 
		'\x2', '\x2', '\x2', '\xD2', '\xD5', '\x5', '\x18', '\r', '\x2', '\xD3', 
		'\xD5', '\a', '(', '\x2', '\x2', '\xD4', '\xD2', '\x3', '\x2', '\x2', 
		'\x2', '\xD4', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\x3', 
		'\x2', '\x2', '\x2', '\xD6', '\xD7', '\a', '\x42', '\x2', '\x2', '\xD7', 
		'\xD8', '\a', '\t', '\x2', '\x2', '\xD8', '\xE3', '\a', '\x42', '\x2', 
		'\x2', '\xD9', '\xDA', '\a', '\x16', '\x2', '\x2', '\xDA', '\xDF', '\a', 
		'\x42', '\x2', '\x2', '\xDB', '\xDC', '\a', '\b', '\x2', '\x2', '\xDC', 
		'\xDE', '\a', '\x42', '\x2', '\x2', '\xDD', '\xDB', '\x3', '\x2', '\x2', 
		'\x2', '\xDE', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xDD', '\x3', 
		'\x2', '\x2', '\x2', '\xDF', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE0', 
		'\xE2', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xDF', '\x3', '\x2', '\x2', 
		'\x2', '\xE2', '\xE4', '\a', '\x18', '\x2', '\x2', '\xE3', '\xD9', '\x3', 
		'\x2', '\x2', '\x2', '\xE3', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE4', 
		'\xE5', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xEE', '\a', '\x12', '\x2', 
		'\x2', '\xE6', '\xEB', '\x5', '\x12', '\n', '\x2', '\xE7', '\xE8', '\a', 
		'\b', '\x2', '\x2', '\xE8', '\xEA', '\x5', '\x12', '\n', '\x2', '\xE9', 
		'\xE7', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xED', '\x3', '\x2', '\x2', 
		'\x2', '\xEB', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xEC', '\x3', 
		'\x2', '\x2', '\x2', '\xEC', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xED', 
		'\xEB', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xE6', '\x3', '\x2', '\x2', 
		'\x2', '\xEE', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF0', '\x3', 
		'\x2', '\x2', '\x2', '\xF0', '\xF2', '\a', '\x13', '\x2', '\x2', '\xF1', 
		'\xF3', '\x5', '\xE', '\b', '\x2', '\xF2', '\xF1', '\x3', '\x2', '\x2', 
		'\x2', '\xF2', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF5', '\x3', 
		'\x2', '\x2', '\x2', '\xF4', 'Y', '\x3', '\x2', '\x2', '\x2', '\xF4', 
		'}', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xA4', '\x3', '\x2', '\x2', 
		'\x2', '\xF4', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xF5', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\xF6', '\xF7', '\a', '\x1B', '\x2', '\x2', '\xF7', 
		'\xFC', '\x5', '\x10', '\t', '\x2', '\xF8', '\xF9', '\a', '\x32', '\x2', 
		'\x2', '\xF9', '\xFB', '\x5', '\x10', '\t', '\x2', '\xFA', '\xF8', '\x3', 
		'\x2', '\x2', '\x2', '\xFB', '\xFE', '\x3', '\x2', '\x2', '\x2', '\xFC', 
		'\xFA', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFD', '\x3', '\x2', '\x2', 
		'\x2', '\xFD', '\xF', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFC', '\x3', 
		'\x2', '\x2', '\x2', '\xFF', '\x100', '\x5', '\x18', '\r', '\x2', '\x100', 
		'\x101', '\a', '\x31', '\x2', '\x2', '\x101', '\x102', '\x5', '\x18', 
		'\r', '\x2', '\x102', '\x11', '\x3', '\x2', '\x2', '\x2', '\x103', '\x104', 
		'\x5', '\x18', '\r', '\x2', '\x104', '\x105', '\a', '\x42', '\x2', '\x2', 
		'\x105', '\x13', '\x3', '\x2', '\x2', '\x2', '\x106', '\x107', '\x5', 
		'\x18', '\r', '\x2', '\x107', '\x108', '\a', '\x42', '\x2', '\x2', '\x108', 
		'\x109', '\a', '\v', '\x2', '\x2', '\x109', '\x10A', '\x5', ' ', '\x11', 
		'\x2', '\x10A', '\x15', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10C', 
		'\a', '\x42', '\x2', '\x2', '\x10C', '\x10D', '\a', '\x3', '\x2', '\x2', 
		'\x10D', '\x10E', '\x5', ' ', '\x11', '\x2', '\x10E', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x10F', '\x110', '\b', '\r', '\x1', '\x2', '\x110', '\x12D', 
		'\a', ')', '\x2', '\x2', '\x111', '\x12D', '\a', '>', '\x2', '\x2', '\x112', 
		'\x12D', '\a', '\x42', '\x2', '\x2', '\x113', '\x114', '\a', '\x42', '\x2', 
		'\x2', '\x114', '\x115', '\a', '\x16', '\x2', '\x2', '\x115', '\x11A', 
		'\x5', '\x18', '\r', '\x2', '\x116', '\x117', '\a', '\b', '\x2', '\x2', 
		'\x117', '\x119', '\x5', '\x18', '\r', '\x2', '\x118', '\x116', '\x3', 
		'\x2', '\x2', '\x2', '\x119', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11A', 
		'\x118', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11B', '\x3', '\x2', '\x2', 
		'\x2', '\x11B', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11A', 
		'\x3', '\x2', '\x2', '\x2', '\x11D', '\x11E', '\a', '\x18', '\x2', '\x2', 
		'\x11E', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x120', '\a', 
		'(', '\x2', '\x2', '\x120', '\x129', '\a', '\x12', '\x2', '\x2', '\x121', 
		'\x126', '\x5', '\x18', '\r', '\x2', '\x122', '\x123', '\a', '\b', '\x2', 
		'\x2', '\x123', '\x125', '\x5', '\x18', '\r', '\x2', '\x124', '\x122', 
		'\x3', '\x2', '\x2', '\x2', '\x125', '\x128', '\x3', '\x2', '\x2', '\x2', 
		'\x126', '\x124', '\x3', '\x2', '\x2', '\x2', '\x126', '\x127', '\x3', 
		'\x2', '\x2', '\x2', '\x127', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x128', 
		'\x126', '\x3', '\x2', '\x2', '\x2', '\x129', '\x121', '\x3', '\x2', '\x2', 
		'\x2', '\x129', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x12B', 
		'\x3', '\x2', '\x2', '\x2', '\x12B', '\x12D', '\a', '\x13', '\x2', '\x2', 
		'\x12C', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x111', '\x3', 
		'\x2', '\x2', '\x2', '\x12C', '\x112', '\x3', '\x2', '\x2', '\x2', '\x12C', 
		'\x113', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x11F', '\x3', '\x2', '\x2', 
		'\x2', '\x12D', '\x140', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x12F', 
		'\f', '\x5', '\x2', '\x2', '\x12F', '\x138', '\a', '\x12', '\x2', '\x2', 
		'\x130', '\x135', '\x5', '\x18', '\r', '\x2', '\x131', '\x132', '\a', 
		'\b', '\x2', '\x2', '\x132', '\x134', '\x5', '\x18', '\r', '\x2', '\x133', 
		'\x131', '\x3', '\x2', '\x2', '\x2', '\x134', '\x137', '\x3', '\x2', '\x2', 
		'\x2', '\x135', '\x133', '\x3', '\x2', '\x2', '\x2', '\x135', '\x136', 
		'\x3', '\x2', '\x2', '\x2', '\x136', '\x139', '\x3', '\x2', '\x2', '\x2', 
		'\x137', '\x135', '\x3', '\x2', '\x2', '\x2', '\x138', '\x130', '\x3', 
		'\x2', '\x2', '\x2', '\x138', '\x139', '\x3', '\x2', '\x2', '\x2', '\x139', 
		'\x13A', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x13F', '\a', '\x13', '\x2', 
		'\x2', '\x13B', '\x13C', '\f', '\x3', '\x2', '\x2', '\x13C', '\x13D', 
		'\a', '\x14', '\x2', '\x2', '\x13D', '\x13F', '\a', '\x15', '\x2', '\x2', 
		'\x13E', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x13B', '\x3', 
		'\x2', '\x2', '\x2', '\x13F', '\x142', '\x3', '\x2', '\x2', '\x2', '\x140', 
		'\x13E', '\x3', '\x2', '\x2', '\x2', '\x140', '\x141', '\x3', '\x2', '\x2', 
		'\x2', '\x141', '\x19', '\x3', '\x2', '\x2', '\x2', '\x142', '\x140', 
		'\x3', '\x2', '\x2', '\x2', '\x143', '\x147', '\a', '\x10', '\x2', '\x2', 
		'\x144', '\x146', '\x5', '\x1A', '\xE', '\x2', '\x145', '\x144', '\x3', 
		'\x2', '\x2', '\x2', '\x146', '\x149', '\x3', '\x2', '\x2', '\x2', '\x147', 
		'\x145', '\x3', '\x2', '\x2', '\x2', '\x147', '\x148', '\x3', '\x2', '\x2', 
		'\x2', '\x148', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x149', '\x147', 
		'\x3', '\x2', '\x2', '\x2', '\x14A', '\x17D', '\a', '\x11', '\x2', '\x2', 
		'\x14B', '\x14C', '\a', '-', '\x2', '\x2', '\x14C', '\x14D', '\x5', ' ', 
		'\x11', '\x2', '\x14D', '\x150', '\x5', '\x1A', '\xE', '\x2', '\x14E', 
		'\x14F', '\a', '\x35', '\x2', '\x2', '\x14F', '\x151', '\x5', '\x1A', 
		'\xE', '\x2', '\x150', '\x14E', '\x3', '\x2', '\x2', '\x2', '\x150', '\x151', 
		'\x3', '\x2', '\x2', '\x2', '\x151', '\x17D', '\x3', '\x2', '\x2', '\x2', 
		'\x152', '\x159', '\a', '\x37', '\x2', '\x2', '\x153', '\x156', '\x5', 
		'\x14', '\v', '\x2', '\x154', '\x156', '\x5', '\x16', '\f', '\x2', '\x155', 
		'\x153', '\x3', '\x2', '\x2', '\x2', '\x155', '\x154', '\x3', '\x2', '\x2', 
		'\x2', '\x156', '\x157', '\x3', '\x2', '\x2', '\x2', '\x157', '\x158', 
		'\a', '\n', '\x2', '\x2', '\x158', '\x15A', '\x3', '\x2', '\x2', '\x2', 
		'\x159', '\x155', '\x3', '\x2', '\x2', '\x2', '\x159', '\x15A', '\x3', 
		'\x2', '\x2', '\x2', '\x15A', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x15B', 
		'\x15E', '\x5', ' ', '\x11', '\x2', '\x15C', '\x15D', '\a', '\n', '\x2', 
		'\x2', '\x15D', '\x15F', '\x5', ' ', '\x11', '\x2', '\x15E', '\x15C', 
		'\x3', '\x2', '\x2', '\x2', '\x15E', '\x15F', '\x3', '\x2', '\x2', '\x2', 
		'\x15F', '\x160', '\x3', '\x2', '\x2', '\x2', '\x160', '\x161', '\x5', 
		'\x1A', '\xE', '\x2', '\x161', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x162', 
		'\x164', '\a', '*', '\x2', '\x2', '\x163', '\x165', '\x5', ' ', '\x11', 
		'\x2', '\x164', '\x163', '\x3', '\x2', '\x2', '\x2', '\x164', '\x165', 
		'\x3', '\x2', '\x2', '\x2', '\x165', '\x166', '\x3', '\x2', '\x2', '\x2', 
		'\x166', '\x17D', '\a', '\n', '\x2', '\x2', '\x167', '\x168', '\a', '+', 
		'\x2', '\x2', '\x168', '\x17D', '\a', '\n', '\x2', '\x2', '\x169', '\x16A', 
		'\a', ',', '\x2', '\x2', '\x16A', '\x17D', '\a', '\n', '\x2', '\x2', '\x16B', 
		'\x16C', '\x5', '\x16', '\f', '\x2', '\x16C', '\x16D', '\a', '\n', '\x2', 
		'\x2', '\x16D', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x16F', 
		'\x5', '\x14', '\v', '\x2', '\x16F', '\x170', '\a', '\n', '\x2', '\x2', 
		'\x170', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x171', '\x172', '\x5', 
		'\x12', '\n', '\x2', '\x172', '\x173', '\a', '\n', '\x2', '\x2', '\x173', 
		'\x17D', '\x3', '\x2', '\x2', '\x2', '\x174', '\x175', '\x5', ' ', '\x11', 
		'\x2', '\x175', '\x176', '\a', '\v', '\x2', '\x2', '\x176', '\x177', '\x5', 
		' ', '\x11', '\x2', '\x177', '\x178', '\a', '\n', '\x2', '\x2', '\x178', 
		'\x17D', '\x3', '\x2', '\x2', '\x2', '\x179', '\x17A', '\x5', ' ', '\x11', 
		'\x2', '\x17A', '\x17B', '\a', '\n', '\x2', '\x2', '\x17B', '\x17D', '\x3', 
		'\x2', '\x2', '\x2', '\x17C', '\x143', '\x3', '\x2', '\x2', '\x2', '\x17C', 
		'\x14B', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x152', '\x3', '\x2', '\x2', 
		'\x2', '\x17C', '\x162', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x167', 
		'\x3', '\x2', '\x2', '\x2', '\x17C', '\x169', '\x3', '\x2', '\x2', '\x2', 
		'\x17C', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x16E', '\x3', 
		'\x2', '\x2', '\x2', '\x17C', '\x171', '\x3', '\x2', '\x2', '\x2', '\x17C', 
		'\x174', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x179', '\x3', '\x2', '\x2', 
		'\x2', '\x17D', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x182', 
		'\a', '\x10', '\x2', '\x2', '\x17F', '\x181', '\x5', '\x1A', '\xE', '\x2', 
		'\x180', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x181', '\x184', '\x3', 
		'\x2', '\x2', '\x2', '\x182', '\x180', '\x3', '\x2', '\x2', '\x2', '\x182', 
		'\x183', '\x3', '\x2', '\x2', '\x2', '\x183', '\x185', '\x3', '\x2', '\x2', 
		'\x2', '\x184', '\x182', '\x3', '\x2', '\x2', '\x2', '\x185', '\x186', 
		'\a', '\x11', '\x2', '\x2', '\x186', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x187', '\x18A', '\x5', ' ', '\x11', '\x2', '\x188', '\x18A', '\a', '\x36', 
		'\x2', '\x2', '\x189', '\x187', '\x3', '\x2', '\x2', '\x2', '\x189', '\x188', 
		'\x3', '\x2', '\x2', '\x2', '\x18A', '\x18B', '\x3', '\x2', '\x2', '\x2', 
		'\x18B', '\x18C', '\a', ':', '\x2', '\x2', '\x18C', '\x18D', '\x5', ' ', 
		'\x11', '\x2', '\x18D', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x18F', 
		'\b', '\x11', '\x1', '\x2', '\x18F', '\x1F7', '\t', '\x2', '\x2', '\x2', 
		'\x190', '\x192', '\x5', '\x12', '\n', '\x2', '\x191', '\x190', '\x3', 
		'\x2', '\x2', '\x2', '\x191', '\x192', '\x3', '\x2', '\x2', '\x2', '\x192', 
		'\x193', '\x3', '\x2', '\x2', '\x2', '\x193', '\x196', '\a', ':', '\x2', 
		'\x2', '\x194', '\x197', '\x5', '\x1C', '\xF', '\x2', '\x195', '\x197', 
		'\x5', ' ', '\x11', '\x2', '\x196', '\x194', '\x3', '\x2', '\x2', '\x2', 
		'\x196', '\x195', '\x3', '\x2', '\x2', '\x2', '\x197', '\x1F7', '\x3', 
		'\x2', '\x2', '\x2', '\x198', '\x1A1', '\a', '\x12', '\x2', '\x2', '\x199', 
		'\x19E', '\x5', '\x12', '\n', '\x2', '\x19A', '\x19B', '\a', '\b', '\x2', 
		'\x2', '\x19B', '\x19D', '\x5', '\x12', '\n', '\x2', '\x19C', '\x19A', 
		'\x3', '\x2', '\x2', '\x2', '\x19D', '\x1A0', '\x3', '\x2', '\x2', '\x2', 
		'\x19E', '\x19C', '\x3', '\x2', '\x2', '\x2', '\x19E', '\x19F', '\x3', 
		'\x2', '\x2', '\x2', '\x19F', '\x1A2', '\x3', '\x2', '\x2', '\x2', '\x1A0', 
		'\x19E', '\x3', '\x2', '\x2', '\x2', '\x1A1', '\x199', '\x3', '\x2', '\x2', 
		'\x2', '\x1A1', '\x1A2', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x1A3', 
		'\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A4', '\a', '\x13', '\x2', '\x2', 
		'\x1A4', '\x1A7', '\a', ':', '\x2', '\x2', '\x1A5', '\x1A8', '\x5', '\x1C', 
		'\xF', '\x2', '\x1A6', '\x1A8', '\x5', ' ', '\x11', '\x2', '\x1A7', '\x1A5', 
		'\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1A6', '\x3', '\x2', '\x2', '\x2', 
		'\x1A8', '\x1F7', '\x3', '\x2', '\x2', '\x2', '\x1A9', '\x1AD', '\a', 
		'\x42', '\x2', '\x2', '\x1AA', '\x1AB', '\a', '\x16', '\x2', '\x2', '\x1AB', 
		'\x1AC', '\a', '\x39', '\x2', '\x2', '\x1AC', '\x1AE', '\a', '\x18', '\x2', 
		'\x2', '\x1AD', '\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1AE', 
		'\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1BA', '\x3', '\x2', '\x2', '\x2', 
		'\x1AF', '\x1B0', '\a', '\x16', '\x2', '\x2', '\x1B0', '\x1B5', '\x5', 
		'\x18', '\r', '\x2', '\x1B1', '\x1B2', '\a', '\b', '\x2', '\x2', '\x1B2', 
		'\x1B4', '\x5', '\x18', '\r', '\x2', '\x1B3', '\x1B1', '\x3', '\x2', '\x2', 
		'\x2', '\x1B4', '\x1B7', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1B3', 
		'\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1B6', '\x3', '\x2', '\x2', '\x2', 
		'\x1B6', '\x1B8', '\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1B5', '\x3', 
		'\x2', '\x2', '\x2', '\x1B8', '\x1B9', '\a', '\x18', '\x2', '\x2', '\x1B9', 
		'\x1BB', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1AF', '\x3', '\x2', '\x2', 
		'\x2', '\x1BA', '\x1BB', '\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1BC', 
		'\x3', '\x2', '\x2', '\x2', '\x1BC', '\x1C5', '\a', '\x12', '\x2', '\x2', 
		'\x1BD', '\x1C2', '\x5', ' ', '\x11', '\x2', '\x1BE', '\x1BF', '\a', '\b', 
		'\x2', '\x2', '\x1BF', '\x1C1', '\x5', ' ', '\x11', '\x2', '\x1C0', '\x1BE', 
		'\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1C4', '\x3', '\x2', '\x2', '\x2', 
		'\x1C2', '\x1C0', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1C3', '\x3', 
		'\x2', '\x2', '\x2', '\x1C3', '\x1C6', '\x3', '\x2', '\x2', '\x2', '\x1C4', 
		'\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1C5', '\x1BD', '\x3', '\x2', '\x2', 
		'\x2', '\x1C5', '\x1C6', '\x3', '\x2', '\x2', '\x2', '\x1C6', '\x1C7', 
		'\x3', '\x2', '\x2', '\x2', '\x1C7', '\x1F7', '\a', '\x13', '\x2', '\x2', 
		'\x1C8', '\x1C9', '\a', '\x4', '\x2', '\x2', '\x1C9', '\x1CB', '\x5', 
		'\x1E', '\x10', '\x2', '\x1CA', '\x1C8', '\x3', '\x2', '\x2', '\x2', '\x1CB', 
		'\x1CC', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x1CA', '\x3', '\x2', '\x2', 
		'\x2', '\x1CC', '\x1CD', '\x3', '\x2', '\x2', '\x2', '\x1CD', '\x1F7', 
		'\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1CF', '\x5', '\x18', '\r', '\x2', 
		'\x1CF', '\x1D0', '\a', '\t', '\x2', '\x2', '\x1D0', '\x1D1', '\a', '\x33', 
		'\x2', '\x2', '\x1D1', '\x1F7', '\x3', '\x2', '\x2', '\x2', '\x1D2', '\x1D3', 
		'\x5', '\x18', '\r', '\x2', '\x1D3', '\x1D4', '\a', '\t', '\x2', '\x2', 
		'\x1D4', '\x1D5', '\a', '\x34', '\x2', '\x2', '\x1D5', '\x1F7', '\x3', 
		'\x2', '\x2', '\x2', '\x1D6', '\x1D7', '\a', '\x30', '\x2', '\x2', '\x1D7', 
		'\x1EA', '\x5', '\x18', '\r', '\x2', '\x1D8', '\x1D9', '\a', '\x10', '\x2', 
		'\x2', '\x1D9', '\x1DA', '\a', '\x42', '\x2', '\x2', '\x1DA', '\x1DB', 
		'\a', '\v', '\x2', '\x2', '\x1DB', '\x1DC', '\x5', ' ', '\x11', '\x2', 
		'\x1DC', '\x1E3', '\x3', '\x2', '\x2', '\x2', '\x1DD', '\x1DE', '\a', 
		'\b', '\x2', '\x2', '\x1DE', '\x1DF', '\a', '\x42', '\x2', '\x2', '\x1DF', 
		'\x1E0', '\a', '\v', '\x2', '\x2', '\x1E0', '\x1E2', '\x5', ' ', '\x11', 
		'\x2', '\x1E1', '\x1DD', '\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1E5', 
		'\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1E1', '\x3', '\x2', '\x2', '\x2', 
		'\x1E3', '\x1E4', '\x3', '\x2', '\x2', '\x2', '\x1E4', '\x1E6', '\x3', 
		'\x2', '\x2', '\x2', '\x1E5', '\x1E3', '\x3', '\x2', '\x2', '\x2', '\x1E6', 
		'\x1E7', '\a', '\x11', '\x2', '\x2', '\x1E7', '\x1E9', '\x3', '\x2', '\x2', 
		'\x2', '\x1E8', '\x1D8', '\x3', '\x2', '\x2', '\x2', '\x1E9', '\x1EC', 
		'\x3', '\x2', '\x2', '\x2', '\x1EA', '\x1E8', '\x3', '\x2', '\x2', '\x2', 
		'\x1EA', '\x1EB', '\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1F7', '\x3', 
		'\x2', '\x2', '\x2', '\x1EC', '\x1EA', '\x3', '\x2', '\x2', '\x2', '\x1ED', 
		'\x1F7', '\a', '\x42', '\x2', '\x2', '\x1EE', '\x1EF', '\a', '\x12', '\x2', 
		'\x2', '\x1EF', '\x1F0', '\x5', ' ', '\x11', '\x2', '\x1F0', '\x1F1', 
		'\a', '\x13', '\x2', '\x2', '\x1F1', '\x1F7', '\x3', '\x2', '\x2', '\x2', 
		'\x1F2', '\x1F3', '\a', '\x1D', '\x2', '\x2', '\x1F3', '\x1F7', '\x5', 
		' ', '\x11', '\v', '\x1F4', '\x1F5', '\a', '\r', '\x2', '\x2', '\x1F5', 
		'\x1F7', '\x5', ' ', '\x11', '\n', '\x1F6', '\x18E', '\x3', '\x2', '\x2', 
		'\x2', '\x1F6', '\x191', '\x3', '\x2', '\x2', '\x2', '\x1F6', '\x198', 
		'\x3', '\x2', '\x2', '\x2', '\x1F6', '\x1A9', '\x3', '\x2', '\x2', '\x2', 
		'\x1F6', '\x1CA', '\x3', '\x2', '\x2', '\x2', '\x1F6', '\x1CE', '\x3', 
		'\x2', '\x2', '\x2', '\x1F6', '\x1D2', '\x3', '\x2', '\x2', '\x2', '\x1F6', 
		'\x1D6', '\x3', '\x2', '\x2', '\x2', '\x1F6', '\x1ED', '\x3', '\x2', '\x2', 
		'\x2', '\x1F6', '\x1EE', '\x3', '\x2', '\x2', '\x2', '\x1F6', '\x1F2', 
		'\x3', '\x2', '\x2', '\x2', '\x1F6', '\x1F4', '\x3', '\x2', '\x2', '\x2', 
		'\x1F7', '\x237', '\x3', '\x2', '\x2', '\x2', '\x1F8', '\x1F9', '\f', 
		'\b', '\x2', '\x2', '\x1F9', '\x1FA', '\t', '\x3', '\x2', '\x2', '\x1FA', 
		'\x236', '\x5', ' ', '\x11', '\t', '\x1FB', '\x1FC', '\f', '\a', '\x2', 
		'\x2', '\x1FC', '\x1FD', '\t', '\x4', '\x2', '\x2', '\x1FD', '\x236', 
		'\x5', ' ', '\x11', '\b', '\x1FE', '\x1FF', '\f', '\x6', '\x2', '\x2', 
		'\x1FF', '\x200', '\t', '\x5', '\x2', '\x2', '\x200', '\x236', '\x5', 
		' ', '\x11', '\a', '\x201', '\x202', '\f', '\x5', '\x2', '\x2', '\x202', 
		'\x203', '\t', '\x6', '\x2', '\x2', '\x203', '\x236', '\x5', ' ', '\x11', 
		'\x6', '\x204', '\x205', '\f', '\x4', '\x2', '\x2', '\x205', '\x206', 
		'\a', '\x1E', '\x2', '\x2', '\x206', '\x236', '\x5', ' ', '\x11', '\x5', 
		'\x207', '\x208', '\f', '\x3', '\x2', '\x2', '\x208', '\x209', '\a', '\x1F', 
		'\x2', '\x2', '\x209', '\x236', '\x5', ' ', '\x11', '\x4', '\x20A', '\x20B', 
		'\f', '\x14', '\x2', '\x2', '\x20B', '\x20C', '\a', '\t', '\x2', '\x2', 
		'\x20C', '\x210', '\a', '\x42', '\x2', '\x2', '\x20D', '\x20E', '\a', 
		'\x16', '\x2', '\x2', '\x20E', '\x20F', '\a', '\x39', '\x2', '\x2', '\x20F', 
		'\x211', '\a', '\x18', '\x2', '\x2', '\x210', '\x20D', '\x3', '\x2', '\x2', 
		'\x2', '\x210', '\x211', '\x3', '\x2', '\x2', '\x2', '\x211', '\x21D', 
		'\x3', '\x2', '\x2', '\x2', '\x212', '\x213', '\a', '\x16', '\x2', '\x2', 
		'\x213', '\x218', '\x5', '\x18', '\r', '\x2', '\x214', '\x215', '\a', 
		'\b', '\x2', '\x2', '\x215', '\x217', '\x5', '\x18', '\r', '\x2', '\x216', 
		'\x214', '\x3', '\x2', '\x2', '\x2', '\x217', '\x21A', '\x3', '\x2', '\x2', 
		'\x2', '\x218', '\x216', '\x3', '\x2', '\x2', '\x2', '\x218', '\x219', 
		'\x3', '\x2', '\x2', '\x2', '\x219', '\x21B', '\x3', '\x2', '\x2', '\x2', 
		'\x21A', '\x218', '\x3', '\x2', '\x2', '\x2', '\x21B', '\x21C', '\a', 
		'\x18', '\x2', '\x2', '\x21C', '\x21E', '\x3', '\x2', '\x2', '\x2', '\x21D', 
		'\x212', '\x3', '\x2', '\x2', '\x2', '\x21D', '\x21E', '\x3', '\x2', '\x2', 
		'\x2', '\x21E', '\x21F', '\x3', '\x2', '\x2', '\x2', '\x21F', '\x228', 
		'\a', '\x12', '\x2', '\x2', '\x220', '\x225', '\x5', ' ', '\x11', '\x2', 
		'\x221', '\x222', '\a', '\b', '\x2', '\x2', '\x222', '\x224', '\x5', ' ', 
		'\x11', '\x2', '\x223', '\x221', '\x3', '\x2', '\x2', '\x2', '\x224', 
		'\x227', '\x3', '\x2', '\x2', '\x2', '\x225', '\x223', '\x3', '\x2', '\x2', 
		'\x2', '\x225', '\x226', '\x3', '\x2', '\x2', '\x2', '\x226', '\x229', 
		'\x3', '\x2', '\x2', '\x2', '\x227', '\x225', '\x3', '\x2', '\x2', '\x2', 
		'\x228', '\x220', '\x3', '\x2', '\x2', '\x2', '\x228', '\x229', '\x3', 
		'\x2', '\x2', '\x2', '\x229', '\x22A', '\x3', '\x2', '\x2', '\x2', '\x22A', 
		'\x236', '\a', '\x13', '\x2', '\x2', '\x22B', '\x22C', '\f', '\x10', '\x2', 
		'\x2', '\x22C', '\x22D', '\a', '\t', '\x2', '\x2', '\x22D', '\x236', '\a', 
		'\x42', '\x2', '\x2', '\x22E', '\x22F', '\f', '\r', '\x2', '\x2', '\x22F', 
		'\x230', '\a', '\x14', '\x2', '\x2', '\x230', '\x231', '\x5', ' ', '\x11', 
		'\x2', '\x231', '\x232', '\a', '\x15', '\x2', '\x2', '\x232', '\x236', 
		'\x3', '\x2', '\x2', '\x2', '\x233', '\x234', '\f', '\t', '\x2', '\x2', 
		'\x234', '\x236', '\t', '\a', '\x2', '\x2', '\x235', '\x1F8', '\x3', '\x2', 
		'\x2', '\x2', '\x235', '\x1FB', '\x3', '\x2', '\x2', '\x2', '\x235', '\x1FE', 
		'\x3', '\x2', '\x2', '\x2', '\x235', '\x201', '\x3', '\x2', '\x2', '\x2', 
		'\x235', '\x204', '\x3', '\x2', '\x2', '\x2', '\x235', '\x207', '\x3', 
		'\x2', '\x2', '\x2', '\x235', '\x20A', '\x3', '\x2', '\x2', '\x2', '\x235', 
		'\x22B', '\x3', '\x2', '\x2', '\x2', '\x235', '\x22E', '\x3', '\x2', '\x2', 
		'\x2', '\x235', '\x233', '\x3', '\x2', '\x2', '\x2', '\x236', '\x239', 
		'\x3', '\x2', '\x2', '\x2', '\x237', '\x235', '\x3', '\x2', '\x2', '\x2', 
		'\x237', '\x238', '\x3', '\x2', '\x2', '\x2', '\x238', '!', '\x3', '\x2', 
		'\x2', '\x2', '\x239', '\x237', '\x3', '\x2', '\x2', '\x2', 'P', '$', 
		'&', '\x33', '\x35', '\x42', '\x46', 'M', 'O', 'Y', ']', '\x66', 'j', 
		'r', 'u', 'y', '}', '\x81', '\x8A', '\x8E', '\x96', '\x99', '\x9D', '\xA4', 
		'\xA8', '\xAC', '\xB5', '\xB9', '\xC1', '\xC4', '\xC8', '\xCB', '\xD0', 
		'\xD4', '\xDF', '\xE3', '\xEB', '\xEE', '\xF2', '\xF4', '\xFC', '\x11A', 
		'\x126', '\x129', '\x12C', '\x135', '\x138', '\x13E', '\x140', '\x147', 
		'\x150', '\x155', '\x159', '\x15E', '\x164', '\x17C', '\x182', '\x189', 
		'\x191', '\x196', '\x19E', '\x1A1', '\x1A7', '\x1AD', '\x1B5', '\x1BA', 
		'\x1C2', '\x1C5', '\x1CC', '\x1E3', '\x1EA', '\x1F6', '\x210', '\x218', 
		'\x21D', '\x225', '\x228', '\x235', '\x237',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
